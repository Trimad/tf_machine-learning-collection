{"version":3,"sources":["webpack:///node_modules/p5/lib/p5.d.ts","webpack:///node_modules/p5/lib/p5.global-mode.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,eAAe;AACfgBAAgB,O;AAC9C,aAAa,gBAAgB,OAAO,OAAO;AAC3C,yD;AACA,uBAAuB,mBAAmB;AAC1C,WAAW,mBAAmB,EAAE,E;AAChuBAAuB;AACvB,uCAAuC;AACvC;AACA,yBAAyB,mB;AACzqD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qcAAc,sBAAsB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wD;AACA;AACA,2BAA2B,qBAAqB;AAChD;AACA,YAAY,2BAA2B;AACvC;AACA,gCAAgC;AAChC,yBAAyB,8B;AACzB;AACA,uBAAuB;AACvB,oCAAoC;AACpC,2CAA2C;AAC3C,QAAQ,iBAAiB;AACzB,+BAA+B;AAC/B,8CAA8C;AAC9C;AACA,ugBAAgB;AAChiDAAiD;AACjwD;AACA,2BAA2B,wB;AAC3B,iCAAiC,EAAE;AACnC,UAAU,4BAA4B;AACtC;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qCAAqC;AACrgCAAgC,gBAAgB,O;AAChD,eAAe,gBAAgB,OAAO,OAAO;AAC7C,2D;AACA,yBAAyB,mBAAmB;AAC5C,aAAa,mBAAmB,EAAE,E;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,gDAAgD;AAChkCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjyXA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACbgBAAgB,O;AAC5C,WAAW,gBAAgB,OAAO,OAAO;AACzC,uD;AACA,qBAAqB,mBAAmB;AACxC,SAAS,mBAAmB,EAAE,E;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,qCAAqC;AACrC;AACA,uBAAuB,mB;AACvmD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,msBAAsB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sD;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA,UAAU,2BAA2B;AACrC;AACA,8BAA8B;AAC9B,uBAAuB,8B;AACvB;AACA,qBAAqB;AACrB,kCAAkC;AAClC,yCAAyC;AACzC,MAAM,iBAAiB;AACvB,6BAA6B;AAC7B,4CAA4C;AAC5C;AACA,qcAAc;AACdfile":"scripts.js","sourcesContent":["// This file was auto-generated. Please do not edit it.\r\ndeclare class p5 {\r\n  // Properties from p5\r\n  \r\n  /**\r\n   *   This is the p5 instance constructor. A p5 instance \r\n   *   holds all the properties and methods related to a \r\n   *   p5 sketch. It expects an incoming sketch closure \r\n   *   and it can also take an optional node parameter \r\n   *   for attaching the generated p5 canvas to a node. \r\n   *   The sketch closure takes the newly created p5 \r\n   *   instance as its sole argument and may optionally \r\n   *   set preload(), setup(), and/or draw() properties \r\n   *   on it for running a sketch. \r\n   * \r\n   *   A p5 sketch can run in \"global\" or \"instance\" \r\n   *   mode: \"global\" - all properties and methods are \r\n   *   attached to the window \"instance\" - all properties \r\n   *   and methods are bound to this p5 object\r\n   *\r\n   *   @param sketch a closure that can set optional \r\n   *   preload(), setup(), and/or draw() properties on \r\n   *   the given p5 instance\r\n   *   @param [node] element to attach canvas to, if a \r\n   *   boolean is passed in use it as sync\r\n   *   @param [sync] start synchronously (optional)\r\n   *   @return a p5 instance\r\n   */\r\n  constructor(sketch: Function, node?: HTMLElement|boolean, sync?: boolean)\r\n  \r\n  // src/color/creating_reading.js\r\n  \r\n  /**\r\n   *   Extracts the alpha value from a color or pixel \r\n   *   array.\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the alpha value\r\n   */\r\n  alpha(color: p5.Color|number[]|string): number\r\n  \r\n  /**\r\n   *   Extracts the blue value from a color or pixel \r\n   *   array.\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the blue value\r\n   */\r\n  blue(color: p5.Color|number[]|string): number\r\n  \r\n  /**\r\n   *   Extracts the HSB brightness value from a color or \r\n   *   pixel array.\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the brightness value\r\n   */\r\n  brightness(color: p5.Color|number[]|string): number\r\n  \r\n  /**\r\n   *   Creates colors for storing in variables of the \r\n   *   color datatype. The parameters are interpreted as \r\n   *   RGB or HSB values depending on the current \r\n   *   colorMode(). The default mode is RGB values from 0 \r\n   *   to 255 and, therefore, the function call \r\n   *   color(255, 204, 0) will return a bright yellow \r\n   *   color.  Note that if only one value is provided to \r\n   *   color(), it will be interpreted as a grayscale \r\n   *   value. Add a second value, and it will be used for \r\n   *   alpha transparency. When three values are \r\n   *   specified, they are interpreted as either RGB or \r\n   *   HSB values. Adding a fourth value applies alpha \r\n   *   transparency. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used.\r\n   *\r\n   *   @param gray number specifying value between white \r\n   *   and black.\r\n   *   @param [alpha] alpha value relative to current \r\n   *   color range (default is 0-255)\r\n   *   @return resulting color\r\n   */\r\n  color(gray: number, alpha?: number): p5.Color\r\n  \r\n  /**\r\n   *   Creates colors for storing in variables of the \r\n   *   color datatype. The parameters are interpreted as \r\n   *   RGB or HSB values depending on the current \r\n   *   colorMode(). The default mode is RGB values from 0 \r\n   *   to 255 and, therefore, the function call \r\n   *   color(255, 204, 0) will return a bright yellow \r\n   *   color.  Note that if only one value is provided to \r\n   *   color(), it will be interpreted as a grayscale \r\n   *   value. Add a second value, and it will be used for \r\n   *   alpha transparency. When three values are \r\n   *   specified, they are interpreted as either RGB or \r\n   *   HSB values. Adding a fourth value applies alpha \r\n   *   transparency. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used.\r\n   *\r\n   *   @param v1 red or hue value relative to the current \r\n   *   color range\r\n   *   @param v2 green or saturation value relative to \r\n   *   the current color range\r\n   *   @param v3 blue or brightness value relative to the \r\n   *   current color range\r\n   *   @param [alpha] alpha value relative to current \r\n   *   color range (default is 0-255)\r\n   */\r\n  color(v1: number, v2: number, v3: number, alpha?: number): p5.Color\r\n  \r\n  /**\r\n   *   Creates colors for storing in variables of the \r\n   *   color datatype. The parameters are interpreted as \r\n   *   RGB or HSB values depending on the current \r\n   *   colorMode(). The default mode is RGB values from 0 \r\n   *   to 255 and, therefore, the function call \r\n   *   color(255, 204, 0) will return a bright yellow \r\n   *   color.  Note that if only one value is provided to \r\n   *   color(), it will be interpreted as a grayscale \r\n   *   value. Add a second value, and it will be used for \r\n   *   alpha transparency. When three values are \r\n   *   specified, they are interpreted as either RGB or \r\n   *   HSB values. Adding a fourth value applies alpha \r\n   *   transparency. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used.\r\n   *\r\n   *   @param value a color string\r\n   */\r\n  color(value: string): p5.Color\r\n  \r\n  /**\r\n   *   Creates colors for storing in variables of the \r\n   *   color datatype. The parameters are interpreted as \r\n   *   RGB or HSB values depending on the current \r\n   *   colorMode(). The default mode is RGB values from 0 \r\n   *   to 255 and, therefore, the function call \r\n   *   color(255, 204, 0) will return a bright yellow \r\n   *   color.  Note that if only one value is provided to \r\n   *   color(), it will be interpreted as a grayscale \r\n   *   value. Add a second value, and it will be used for \r\n   *   alpha transparency. When three values are \r\n   *   specified, they are interpreted as either RGB or \r\n   *   HSB values. Adding a fourth value applies alpha \r\n   *   transparency. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used.\r\n   *\r\n   *   @param values an array containing the \r\n   *   red,green,blue & and alpha components of the color\r\n   */\r\n  color(values: number[]): p5.Color\r\n  \r\n  /**\r\n   *   Creates colors for storing in variables of the \r\n   *   color datatype. The parameters are interpreted as \r\n   *   RGB or HSB values depending on the current \r\n   *   colorMode(). The default mode is RGB values from 0 \r\n   *   to 255 and, therefore, the function call \r\n   *   color(255, 204, 0) will return a bright yellow \r\n   *   color.  Note that if only one value is provided to \r\n   *   color(), it will be interpreted as a grayscale \r\n   *   value. Add a second value, and it will be used for \r\n   *   alpha transparency. When three values are \r\n   *   specified, they are interpreted as either RGB or \r\n   *   HSB values. Adding a fourth value applies alpha \r\n   *   transparency. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used.\r\n   *\r\n   */\r\n  color(color: p5.Color): p5.Color\r\n  \r\n  /**\r\n   *   Extracts the green value from a color or pixel \r\n   *   array.\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the green value\r\n   */\r\n  green(color: p5.Color|number[]|string): number\r\n  \r\n  /**\r\n   *   Extracts the hue value from a color or pixel \r\n   *   array. Hue exists in both HSB and HSL. This \r\n   *   function will return the HSB-normalized hue when \r\n   *   supplied with an HSB color object (or when \r\n   *   supplied with a pixel array while the color mode \r\n   *   is HSB), but will default to the HSL-normalized \r\n   *   hue otherwise. (The values will only be different \r\n   *   if the maximum hue setting for each system is \r\n   *   different.)\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the hue\r\n   */\r\n  hue(color: p5.Color|number[]|string): number\r\n  \r\n  /**\r\n   *   Blends two colors to find a third color somewhere \r\n   *   between them. The amt parameter is the amount to \r\n   *   interpolate between the two values where 0.0 equal \r\n   *   to the first color, 0.1 is very near the first \r\n   *   color, 0.5 is halfway in between, etc. An amount \r\n   *   below 0 will be treated as 0. Likewise, amounts \r\n   *   above 1 will be capped at 1. This is different \r\n   *   from the behavior of lerp(), but necessary because \r\n   *   otherwise numbers outside the range will produce \r\n   *   strange and unexpected colors.  The way that \r\n   *   colours are interpolated depends on the current \r\n   *   color mode.\r\n   *\r\n   *   @param c1 interpolate from this color\r\n   *   @param c2 interpolate to this color\r\n   *   @param amt number between 0 and 1\r\n   *   @return interpolated color\r\n   */\r\n  lerpColor(c1: p5.Color, c2: p5.Color, amt: number): p5.Color\r\n  \r\n  /**\r\n   *   Extracts the HSL lightness value from a color or \r\n   *   pixel array.\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the lightness\r\n   */\r\n  lightness(color: p5.Color|number[]|string): number\r\n  \r\n  /**\r\n   *   Extracts the red value from a color or pixel \r\n   *   array.\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the red value\r\n   */\r\n  red(color: p5.Color|number[]|string): number\r\n  \r\n  /**\r\n   *   Extracts the saturation value from a color or \r\n   *   pixel array. Saturation is scaled differently in \r\n   *   HSB and HSL. This function will return the HSB \r\n   *   saturation when supplied with an HSB color object \r\n   *   (or when supplied with a pixel array while the \r\n   *   color mode is HSB), but will default to the HSL \r\n   *   saturation otherwise.\r\n   *\r\n   *   @param color p5.Color object, color components, or \r\n   *   CSS color\r\n   *   @return the saturation value\r\n   */\r\n  saturation(color: p5.Color|number[]|string): number\r\n  \r\n  // src/color/setting.js\r\n  \r\n  /**\r\n   *   The background() function sets the color used for \r\n   *   the background of the p5.js canvas. The default \r\n   *   background is light gray. This function is \r\n   *   typically used within draw() to clear the display \r\n   *   window at the beginning of each frame, but it can \r\n   *   be used inside setup() to set the background on \r\n   *   the first frame of animation or if the background \r\n   *   need only be set once.  The color is either \r\n   *   specified in terms of the RGB, HSB, or HSL color \r\n   *   depending on the current colorMode. (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5.Color object can also be provided to set the \r\n   *   background color. \r\n   * \r\n   *  \r\n   *   A p5.Image can also be provided to set the \r\n   *   background image.\r\n   *\r\n   *   @param color any value created by the color() \r\n   *   function\r\n   *   @chainable\r\n   */\r\n  background(color: p5.Color): p5\r\n  \r\n  /**\r\n   *   The background() function sets the color used for \r\n   *   the background of the p5.js canvas. The default \r\n   *   background is light gray. This function is \r\n   *   typically used within draw() to clear the display \r\n   *   window at the beginning of each frame, but it can \r\n   *   be used inside setup() to set the background on \r\n   *   the first frame of animation or if the background \r\n   *   need only be set once.  The color is either \r\n   *   specified in terms of the RGB, HSB, or HSL color \r\n   *   depending on the current colorMode. (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5.Color object can also be provided to set the \r\n   *   background color. \r\n   * \r\n   *  \r\n   *   A p5.Image can also be provided to set the \r\n   *   background image.\r\n   *\r\n   *   @param colorstring color string, possible formats \r\n   *   include: integer rgb() or rgba(), percentage rgb() \r\n   *   or rgba(), 3-digit hex, 6-digit hex\r\n   *   @param [a] opacity of the background relative to \r\n   *   current color range (default is 0-255)\r\n   *   @chainable\r\n   */\r\n  background(colorstring: string, a?: number): p5\r\n  \r\n  /**\r\n   *   The background() function sets the color used for \r\n   *   the background of the p5.js canvas. The default \r\n   *   background is light gray. This function is \r\n   *   typically used within draw() to clear the display \r\n   *   window at the beginning of each frame, but it can \r\n   *   be used inside setup() to set the background on \r\n   *   the first frame of animation or if the background \r\n   *   need only be set once.  The color is either \r\n   *   specified in terms of the RGB, HSB, or HSL color \r\n   *   depending on the current colorMode. (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5.Color object can also be provided to set the \r\n   *   background color. \r\n   * \r\n   *  \r\n   *   A p5.Image can also be provided to set the \r\n   *   background image.\r\n   *\r\n   *   @param gray specifies a value between white and \r\n   *   black\r\n   *   @param [a] opacity of the background relative to \r\n   *   current color range (default is 0-255)\r\n   *   @chainable\r\n   */\r\n  background(gray: number, a?: number): p5\r\n  \r\n  /**\r\n   *   The background() function sets the color used for \r\n   *   the background of the p5.js canvas. The default \r\n   *   background is light gray. This function is \r\n   *   typically used within draw() to clear the display \r\n   *   window at the beginning of each frame, but it can \r\n   *   be used inside setup() to set the background on \r\n   *   the first frame of animation or if the background \r\n   *   need only be set once.  The color is either \r\n   *   specified in terms of the RGB, HSB, or HSL color \r\n   *   depending on the current colorMode. (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5.Color object can also be provided to set the \r\n   *   background color. \r\n   * \r\n   *  \r\n   *   A p5.Image can also be provided to set the \r\n   *   background image.\r\n   *\r\n   *   @param v1 red or hue value (depending on the \r\n   *   current color mode)\r\n   *   @param v2 green or saturation value (depending on \r\n   *   the current color mode)\r\n   *   @param v3 blue or brightness value (depending on \r\n   *   the current color mode)\r\n   *   @param [a] opacity of the background relative to \r\n   *   current color range (default is 0-255)\r\n   *   @chainable\r\n   */\r\n  background(v1: number, v2: number, v3: number, a?: number): p5\r\n  \r\n  /**\r\n   *   The background() function sets the color used for \r\n   *   the background of the p5.js canvas. The default \r\n   *   background is light gray. This function is \r\n   *   typically used within draw() to clear the display \r\n   *   window at the beginning of each frame, but it can \r\n   *   be used inside setup() to set the background on \r\n   *   the first frame of animation or if the background \r\n   *   need only be set once.  The color is either \r\n   *   specified in terms of the RGB, HSB, or HSL color \r\n   *   depending on the current colorMode. (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5.Color object can also be provided to set the \r\n   *   background color. \r\n   * \r\n   *  \r\n   *   A p5.Image can also be provided to set the \r\n   *   background image.\r\n   *\r\n   *   @param values an array containing the \r\n   *   red,green,blue & and alpha components of the color\r\n   *   @chainable\r\n   */\r\n  background(values: number[]): p5\r\n  \r\n  /**\r\n   *   The background() function sets the color used for \r\n   *   the background of the p5.js canvas. The default \r\n   *   background is light gray. This function is \r\n   *   typically used within draw() to clear the display \r\n   *   window at the beginning of each frame, but it can \r\n   *   be used inside setup() to set the background on \r\n   *   the first frame of animation or if the background \r\n   *   need only be set once.  The color is either \r\n   *   specified in terms of the RGB, HSB, or HSL color \r\n   *   depending on the current colorMode. (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255. \r\n   * \r\n   *  \r\n   *   If a single string argument is provided, RGB, RGBA \r\n   *   and Hex CSS color strings and all named color \r\n   *   strings are supported. In this case, an alpha \r\n   *   number value as a second argument is not \r\n   *   supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5.Color object can also be provided to set the \r\n   *   background color. \r\n   * \r\n   *  \r\n   *   A p5.Image can also be provided to set the \r\n   *   background image.\r\n   *\r\n   *   @param image image created with loadImage() or \r\n   *   createImage(), to set as background (must be same \r\n   *   size as the sketch window)\r\n   *   @param [a] opacity of the background relative to \r\n   *   current color range (default is 0-255)\r\n   *   @chainable\r\n   */\r\n  background(image: p5.Image, a?: number): p5\r\n  \r\n  /**\r\n   *   Clears the pixels within a buffer. This function \r\n   *   only works on p5.Canvas objects created with the \r\n   *   createCanvas() function; it won't work with the \r\n   *   main display window. Unlike the main graphics \r\n   *   context, pixels in additional graphics areas \r\n   *   created with createGraphics() can be entirely or \r\n   *   partially transparent. This function clears \r\n   *   everything to make all of the pixels 100% \r\n   *   transparent.\r\n   *\r\n   *   @chainable\r\n   */\r\n  clear(): p5\r\n  \r\n  /**\r\n   *   colorMode() changes the way p5.js interprets color \r\n   *   data. By default, the parameters for fill(), \r\n   *   stroke(), background(), and color() are defined by \r\n   *   values between 0 and 255 using the RGB color \r\n   *   model. This is equivalent to setting \r\n   *   colorMode(RGB, 255). Setting colorMode(HSB) lets \r\n   *   you use the HSB system instead. By default, this \r\n   *   is colorMode(HSB, 360, 100, 100, 1). You can also \r\n   *   use HSL.  Note: existing color objects remember \r\n   *   the mode that they were created in, so you can \r\n   *   change modes as you like without affecting their \r\n   *   appearance.\r\n   *\r\n   *   @param mode either RGB, HSB or HSL, corresponding \r\n   *   to Red/Green/Blue and Hue/Saturation/Brightness \r\n   *   (or Lightness)\r\n   *   @param [max] range for all values\r\n   *   @chainable\r\n   */\r\n  colorMode(mode: COLOR_MODE, max?: number): p5\r\n  \r\n  /**\r\n   *   colorMode() changes the way p5.js interprets color \r\n   *   data. By default, the parameters for fill(), \r\n   *   stroke(), background(), and color() are defined by \r\n   *   values between 0 and 255 using the RGB color \r\n   *   model. This is equivalent to setting \r\n   *   colorMode(RGB, 255). Setting colorMode(HSB) lets \r\n   *   you use the HSB system instead. By default, this \r\n   *   is colorMode(HSB, 360, 100, 100, 1). You can also \r\n   *   use HSL.  Note: existing color objects remember \r\n   *   the mode that they were created in, so you can \r\n   *   change modes as you like without affecting their \r\n   *   appearance.\r\n   *\r\n   *   @param mode either RGB, HSB or HSL, corresponding \r\n   *   to Red/Green/Blue and Hue/Saturation/Brightness \r\n   *   (or Lightness)\r\n   *   @param max1 range for the red or hue depending on \r\n   *   the current color mode\r\n   *   @param max2 range for the green or saturation \r\n   *   depending on the current color mode\r\n   *   @param max3 range for the blue or \r\n   *   brightness/lighntess depending on the current \r\n   *   color mode\r\n   *   @param [maxA] range for the alpha\r\n   *   @chainable\r\n   */\r\n  colorMode(mode: any, max1: number, max2: number, max3: number, maxA?: number): p5\r\n  \r\n  /**\r\n   *   Sets the color used to fill shapes. For example, \r\n   *   if you run fill(204, 102, 0), all subsequent \r\n   *   shapes will be filled with orange. This color is \r\n   *   either specified in terms of the RGB or HSB color \r\n   *   depending on the current colorMode(). (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255.  If a single string argument is \r\n   *   provided, RGB, RGBA and Hex CSS color strings and \r\n   *   all named color strings are supported. In this \r\n   *   case, an alpha number value as a second argument \r\n   *   is not supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   fill color.\r\n   *\r\n   *   @param v1 red or hue value relative to the current \r\n   *   color range\r\n   *   @param v2 green or saturation value relative to \r\n   *   the current color range\r\n   *   @param v3 blue or brightness value relative to the \r\n   *   current color range\r\n   *   @chainable\r\n   */\r\n  fill(v1: number, v2: number, v3: number, alpha?: number): p5\r\n  \r\n  /**\r\n   *   Sets the color used to fill shapes. For example, \r\n   *   if you run fill(204, 102, 0), all subsequent \r\n   *   shapes will be filled with orange. This color is \r\n   *   either specified in terms of the RGB or HSB color \r\n   *   depending on the current colorMode(). (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255.  If a single string argument is \r\n   *   provided, RGB, RGBA and Hex CSS color strings and \r\n   *   all named color strings are supported. In this \r\n   *   case, an alpha number value as a second argument \r\n   *   is not supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   fill color.\r\n   *\r\n   *   @param value a color string\r\n   *   @chainable\r\n   */\r\n  fill(value: string): p5\r\n  \r\n  /**\r\n   *   Sets the color used to fill shapes. For example, \r\n   *   if you run fill(204, 102, 0), all subsequent \r\n   *   shapes will be filled with orange. This color is \r\n   *   either specified in terms of the RGB or HSB color \r\n   *   depending on the current colorMode(). (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255.  If a single string argument is \r\n   *   provided, RGB, RGBA and Hex CSS color strings and \r\n   *   all named color strings are supported. In this \r\n   *   case, an alpha number value as a second argument \r\n   *   is not supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   fill color.\r\n   *\r\n   *   @param gray a gray value\r\n   *   @chainable\r\n   */\r\n  fill(gray: number, alpha?: number): p5\r\n  \r\n  /**\r\n   *   Sets the color used to fill shapes. For example, \r\n   *   if you run fill(204, 102, 0), all subsequent \r\n   *   shapes will be filled with orange. This color is \r\n   *   either specified in terms of the RGB or HSB color \r\n   *   depending on the current colorMode(). (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255.  If a single string argument is \r\n   *   provided, RGB, RGBA and Hex CSS color strings and \r\n   *   all named color strings are supported. In this \r\n   *   case, an alpha number value as a second argument \r\n   *   is not supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   fill color.\r\n   *\r\n   *   @param values an array containing the \r\n   *   red,green,blue & and alpha components of the color\r\n   *   @chainable\r\n   */\r\n  fill(values: number[]): p5\r\n  \r\n  /**\r\n   *   Sets the color used to fill shapes. For example, \r\n   *   if you run fill(204, 102, 0), all subsequent \r\n   *   shapes will be filled with orange. This color is \r\n   *   either specified in terms of the RGB or HSB color \r\n   *   depending on the current colorMode(). (The default \r\n   *   color space is RGB, with each value in the range \r\n   *   from 0 to 255). The alpha range by default is also \r\n   *   0 to 255.  If a single string argument is \r\n   *   provided, RGB, RGBA and Hex CSS color strings and \r\n   *   all named color strings are supported. In this \r\n   *   case, an alpha number value as a second argument \r\n   *   is not supported, the RGBA form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   fill color.\r\n   *\r\n   *   @param color the fill color\r\n   *   @chainable\r\n   */\r\n  fill(color: p5.Color): p5\r\n  \r\n  /**\r\n   *   Disables filling geometry. If both noStroke() and \r\n   *   noFill() are called, nothing will be drawn to the \r\n   *   screen.\r\n   *\r\n   *   @chainable\r\n   */\r\n  noFill(): p5\r\n  \r\n  /**\r\n   *   Disables drawing the stroke (outline). If both \r\n   *   noStroke() and noFill() are called, nothing will \r\n   *   be drawn to the screen.\r\n   *\r\n   *   @chainable\r\n   */\r\n  noStroke(): p5\r\n  \r\n  /**\r\n   *   Sets the color used to draw lines and borders \r\n   *   around shapes. This color is either specified in \r\n   *   terms of the RGB or HSB color depending on the \r\n   *   current colorMode() (the default color space is \r\n   *   RGB, with each value in the range from 0 to 255). \r\n   *   The alpha range by default is also 0 to 255.  If a \r\n   *   single string argument is provided, RGB, RGBA and \r\n   *   Hex CSS color strings and all named color strings \r\n   *   are supported. In this case, an alpha number value \r\n   *   as a second argument is not supported, the RGBA \r\n   *   form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   stroke color.\r\n   *\r\n   *   @param v1 red or hue value relative to the current \r\n   *   color range\r\n   *   @param v2 green or saturation value relative to \r\n   *   the current color range\r\n   *   @param v3 blue or brightness value relative to the \r\n   *   current color range\r\n   *   @chainable\r\n   */\r\n  stroke(v1: number, v2: number, v3: number, alpha?: number): p5\r\n  \r\n  /**\r\n   *   Sets the color used to draw lines and borders \r\n   *   around shapes. This color is either specified in \r\n   *   terms of the RGB or HSB color depending on the \r\n   *   current colorMode() (the default color space is \r\n   *   RGB, with each value in the range from 0 to 255). \r\n   *   The alpha range by default is also 0 to 255.  If a \r\n   *   single string argument is provided, RGB, RGBA and \r\n   *   Hex CSS color strings and all named color strings \r\n   *   are supported. In this case, an alpha number value \r\n   *   as a second argument is not supported, the RGBA \r\n   *   form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   stroke color.\r\n   *\r\n   *   @param value a color string\r\n   *   @chainable\r\n   */\r\n  stroke(value: string): p5\r\n  \r\n  /**\r\n   *   Sets the color used to draw lines and borders \r\n   *   around shapes. This color is either specified in \r\n   *   terms of the RGB or HSB color depending on the \r\n   *   current colorMode() (the default color space is \r\n   *   RGB, with each value in the range from 0 to 255). \r\n   *   The alpha range by default is also 0 to 255.  If a \r\n   *   single string argument is provided, RGB, RGBA and \r\n   *   Hex CSS color strings and all named color strings \r\n   *   are supported. In this case, an alpha number value \r\n   *   as a second argument is not supported, the RGBA \r\n   *   form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   stroke color.\r\n   *\r\n   *   @param gray a gray value\r\n   *   @chainable\r\n   */\r\n  stroke(gray: number, alpha?: number): p5\r\n  \r\n  /**\r\n   *   Sets the color used to draw lines and borders \r\n   *   around shapes. This color is either specified in \r\n   *   terms of the RGB or HSB color depending on the \r\n   *   current colorMode() (the default color space is \r\n   *   RGB, with each value in the range from 0 to 255). \r\n   *   The alpha range by default is also 0 to 255.  If a \r\n   *   single string argument is provided, RGB, RGBA and \r\n   *   Hex CSS color strings and all named color strings \r\n   *   are supported. In this case, an alpha number value \r\n   *   as a second argument is not supported, the RGBA \r\n   *   form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   stroke color.\r\n   *\r\n   *   @param values an array containing the \r\n   *   red,green,blue & and alpha components of the color\r\n   *   @chainable\r\n   */\r\n  stroke(values: number[]): p5\r\n  \r\n  /**\r\n   *   Sets the color used to draw lines and borders \r\n   *   around shapes. This color is either specified in \r\n   *   terms of the RGB or HSB color depending on the \r\n   *   current colorMode() (the default color space is \r\n   *   RGB, with each value in the range from 0 to 255). \r\n   *   The alpha range by default is also 0 to 255.  If a \r\n   *   single string argument is provided, RGB, RGBA and \r\n   *   Hex CSS color strings and all named color strings \r\n   *   are supported. In this case, an alpha number value \r\n   *   as a second argument is not supported, the RGBA \r\n   *   form should be used. \r\n   * \r\n   *  \r\n   *   A p5 Color object can also be provided to set the \r\n   *   stroke color.\r\n   *\r\n   *   @param color the stroke color\r\n   *   @chainable\r\n   */\r\n  stroke(color: p5.Color): p5\r\n  \r\n  // src/core/2d_primitives.js\r\n  \r\n  /**\r\n   *   Draw an arc to the screen. If called with only x, \r\n   *   y, w, h, start, and stop, the arc will be drawn \r\n   *   and filled as an open pie segment. If a mode \r\n   *   parameter is provided, the arc will be filled like \r\n   *   an open semi-circle (OPEN) , a closed semi-circle \r\n   *   (CHORD), or as a closed pie segment (PIE). The \r\n   *   origin may be changed with the ellipseMode() \r\n   *   function. Note that drawing a full circle (ex: 0 \r\n   *   to TWO_PI) will appear blank because 0 and TWO_PI \r\n   *   are the same position on the unit circle. The best \r\n   *   way to handle this is by using the ellipse() \r\n   *   function instead to create a closed ellipse, and \r\n   *   to use the arc() function only to draw parts of an \r\n   *   ellipse.\r\n   *\r\n   *   @param x x-coordinate of the arc's ellipse\r\n   *   @param y y-coordinate of the arc's ellipse\r\n   *   @param w width of the arc's ellipse by default\r\n   *   @param h height of the arc's ellipse by default\r\n   *   @param start angle to start the arc, specified in \r\n   *   radians\r\n   *   @param stop angle to stop the arc, specified in \r\n   *   radians\r\n   *   @param [mode] optional parameter to determine the \r\n   *   way of drawing the arc. either CHORD, PIE or OPEN\r\n   *   @chainable\r\n   */\r\n  arc(x: number, y: number, w: number, h: number, start: number, stop: number, mode?: ARC_MODE): p5\r\n  \r\n  /**\r\n   *   Draws an ellipse (oval) to the screen. An ellipse \r\n   *   with equal width and height is a circle. By \r\n   *   default, the first two parameters set the \r\n   *   location, and the third and fourth parameters set \r\n   *   the shape's width and height. If no height is \r\n   *   specified, the value of width is used for both the \r\n   *   width and height. If a negative height or width is \r\n   *   specified, the absolute value is taken. The origin \r\n   *   may be changed with the ellipseMode() function.\r\n   *\r\n   *   @param x x-coordinate of the ellipse.\r\n   *   @param y y-coordinate of the ellipse.\r\n   *   @param w width of the ellipse.\r\n   *   @param [h] height of the ellipse.\r\n   *   @chainable\r\n   */\r\n  ellipse(x: number, y: number, w: number, h?: number): p5\r\n  \r\n  /**\r\n   *   Draws an ellipse (oval) to the screen. An ellipse \r\n   *   with equal width and height is a circle. By \r\n   *   default, the first two parameters set the \r\n   *   location, and the third and fourth parameters set \r\n   *   the shape's width and height. If no height is \r\n   *   specified, the value of width is used for both the \r\n   *   width and height. If a negative height or width is \r\n   *   specified, the absolute value is taken. The origin \r\n   *   may be changed with the ellipseMode() function.\r\n   *\r\n   *   @param x x-coordinate of the ellipse.\r\n   *   @param y y-coordinate of the ellipse.\r\n   *   @param w width of the ellipse.\r\n   *   @param h height of the ellipse.\r\n   *   @param detail number of radial sectors to draw\r\n   */\r\n  ellipse(x: number, y: number, w: number, h: number, detail: number): void\r\n  \r\n  /**\r\n   *   Draws a line (a direct path between two points) to \r\n   *   the screen. The version of line() with four \r\n   *   parameters draws the line in 2D. To color a line, \r\n   *   use the stroke() function. A line cannot be \r\n   *   filled, therefore the fill() function will not \r\n   *   affect the color of a line. 2D lines are drawn \r\n   *   with a width of one pixel by default, but this can \r\n   *   be changed with the strokeWeight() function.\r\n   *\r\n   *   @param x1 the x-coordinate of the first point\r\n   *   @param y1 the y-coordinate of the first point\r\n   *   @param x2 the x-coordinate of the second point\r\n   *   @param y2 the y-coordinate of the second point\r\n   *   @chainable\r\n   */\r\n  line(x1: number, y1: number, x2: number, y2: number): p5\r\n  \r\n  /**\r\n   *   Draws a line (a direct path between two points) to \r\n   *   the screen. The version of line() with four \r\n   *   parameters draws the line in 2D. To color a line, \r\n   *   use the stroke() function. A line cannot be \r\n   *   filled, therefore the fill() function will not \r\n   *   affect the color of a line. 2D lines are drawn \r\n   *   with a width of one pixel by default, but this can \r\n   *   be changed with the strokeWeight() function.\r\n   *\r\n   *   @param x1 the x-coordinate of the first point\r\n   *   @param y1 the y-coordinate of the first point\r\n   *   @param z1 the z-coordinate of the first point\r\n   *   @param x2 the x-coordinate of the second point\r\n   *   @param y2 the y-coordinate of the second point\r\n   *   @param z2 the z-coordinate of the second point\r\n   *   @chainable\r\n   */\r\n  line(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): p5\r\n  \r\n  /**\r\n   *   Draws a point, a coordinate in space at the \r\n   *   dimension of one pixel. The first parameter is the \r\n   *   horizontal value for the point, the second value \r\n   *   is the vertical value for the point. The color of \r\n   *   the point is determined by the current stroke.\r\n   *\r\n   *   @param x the x-coordinate\r\n   *   @param y the y-coordinate\r\n   *   @param [z] the z-coordinate (for WEBGL mode)\r\n   *   @chainable\r\n   */\r\n  point(x: number, y: number, z?: number): p5\r\n  \r\n  /**\r\n   *   Draw a quad. A quad is a quadrilateral, a four \r\n   *   sided polygon. It is similar to a rectangle, but \r\n   *   the angles between its edges are not constrained \r\n   *   to ninety degrees. The first pair of parameters \r\n   *   (x1,y1) sets the first vertex and the subsequent \r\n   *   pairs should proceed clockwise or \r\n   *   counter-clockwise around the defined shape.\r\n   *\r\n   *   @param x1 the x-coordinate of the first point\r\n   *   @param y1 the y-coordinate of the first point\r\n   *   @param x2 the x-coordinate of the second point\r\n   *   @param y2 the y-coordinate of the second point\r\n   *   @param x3 the x-coordinate of the third point\r\n   *   @param y3 the y-coordinate of the third point\r\n   *   @param x4 the x-coordinate of the fourth point\r\n   *   @param y4 the y-coordinate of the fourth point\r\n   *   @chainable\r\n   */\r\n  quad(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5\r\n  \r\n  /**\r\n   *   Draw a quad. A quad is a quadrilateral, a four \r\n   *   sided polygon. It is similar to a rectangle, but \r\n   *   the angles between its edges are not constrained \r\n   *   to ninety degrees. The first pair of parameters \r\n   *   (x1,y1) sets the first vertex and the subsequent \r\n   *   pairs should proceed clockwise or \r\n   *   counter-clockwise around the defined shape.\r\n   *\r\n   *   @param x1 the x-coordinate of the first point\r\n   *   @param y1 the y-coordinate of the first point\r\n   *   @param x2 the x-coordinate of the second point\r\n   *   @param y2 the y-coordinate of the second point\r\n   *   @param x3 the x-coordinate of the third point\r\n   *   @param y3 the y-coordinate of the third point\r\n   *   @param x4 the x-coordinate of the fourth point\r\n   *   @param y4 the y-coordinate of the fourth point\r\n   *   @chainable\r\n   */\r\n  quad(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number): p5\r\n  \r\n  /**\r\n   *   Draws a rectangle to the screen. A rectangle is a \r\n   *   four-sided shape with every angle at ninety \r\n   *   degrees. By default, the first two parameters set \r\n   *   the location of the upper-left corner, the third \r\n   *   sets the width, and the fourth sets the height. \r\n   *   The way these parameters are interpreted, however, \r\n   *   may be changed with the rectMode() function.  The \r\n   *   fifth, sixth, seventh and eighth parameters, if \r\n   *   specified, determine corner radius for the \r\n   *   top-right, top-left, lower-right and lower-left \r\n   *   corners, respectively. An omitted corner radius \r\n   *   parameter is set to the value of the previously \r\n   *   specified radius value in the parameter list.\r\n   *\r\n   *   @param x x-coordinate of the rectangle.\r\n   *   @param y y-coordinate of the rectangle.\r\n   *   @param w width of the rectangle.\r\n   *   @param h height of the rectangle.\r\n   *   @param [tl] optional radius of top-left corner.\r\n   *   @param [tr] optional radius of top-right corner.\r\n   *   @param [br] optional radius of bottom-right \r\n   *   corner.\r\n   *   @param [bl] optional radius of bottom-left corner.\r\n   *   @chainable\r\n   */\r\n  rect(x: number, y: number, w: number, h: number, tl?: number, tr?: number, br?: number, bl?: number): p5\r\n  \r\n  /**\r\n   *   Draws a rectangle to the screen. A rectangle is a \r\n   *   four-sided shape with every angle at ninety \r\n   *   degrees. By default, the first two parameters set \r\n   *   the location of the upper-left corner, the third \r\n   *   sets the width, and the fourth sets the height. \r\n   *   The way these parameters are interpreted, however, \r\n   *   may be changed with the rectMode() function.  The \r\n   *   fifth, sixth, seventh and eighth parameters, if \r\n   *   specified, determine corner radius for the \r\n   *   top-right, top-left, lower-right and lower-left \r\n   *   corners, respectively. An omitted corner radius \r\n   *   parameter is set to the value of the previously \r\n   *   specified radius value in the parameter list.\r\n   *\r\n   *   @param x x-coordinate of the rectangle.\r\n   *   @param y y-coordinate of the rectangle.\r\n   *   @param w width of the rectangle.\r\n   *   @param h height of the rectangle.\r\n   *   @param [detailX] number of segments in the \r\n   *   x-direction\r\n   *   @param [detailY] number of segments in the \r\n   *   y-direction\r\n   *   @chainable\r\n   */\r\n  rect(x: number, y: number, w: number, h: number, detailX?: number, detailY?: number): p5\r\n  \r\n  /**\r\n   *   A triangle is a plane created by connecting three \r\n   *   points. The first two arguments specify the first \r\n   *   point, the middle two arguments specify the second \r\n   *   point, and the last two arguments specify the \r\n   *   third point.\r\n   *\r\n   *   @param x1 x-coordinate of the first point\r\n   *   @param y1 y-coordinate of the first point\r\n   *   @param x2 x-coordinate of the second point\r\n   *   @param y2 y-coordinate of the second point\r\n   *   @param x3 x-coordinate of the third point\r\n   *   @param y3 y-coordinate of the third point\r\n   *   @chainable\r\n   */\r\n  triangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): p5\r\n  \r\n  // src/core/attributes.js\r\n  \r\n  /**\r\n   *   Modifies the location from which ellipses are \r\n   *   drawn by changing the way in which parameters \r\n   *   given to ellipse() are interpreted.  The default \r\n   *   mode is ellipseMode(CENTER), which interprets the \r\n   *   first two parameters of ellipse() as the shape's \r\n   *   center point, while the third and fourth \r\n   *   parameters are its width and height. \r\n   * \r\n   *  \r\n   *   ellipseMode(RADIUS) also uses the first two \r\n   *   parameters of ellipse() as the shape's center \r\n   *   point, but uses the third and fourth parameters to \r\n   *   specify half of the shapes's width and height. \r\n   * \r\n   *  \r\n   *   ellipseMode(CORNER) interprets the first two \r\n   *   parameters of ellipse() as the upper-left corner \r\n   *   of the shape, while the third and fourth \r\n   *   parameters are its width and height. \r\n   * \r\n   *  \r\n   *   ellipseMode(CORNERS) interprets the first two \r\n   *   parameters of ellipse() as the location of one \r\n   *   corner of the ellipse's bounding box, and the \r\n   *   third and fourth parameters as the location of the \r\n   *   opposite corner. \r\n   * \r\n   *  \r\n   *   The parameter must be written in ALL CAPS because \r\n   *   Javascript is a case-sensitive language.\r\n   *\r\n   *   @param mode either CENTER, RADIUS, CORNER, or \r\n   *   CORNERS\r\n   *   @chainable\r\n   */\r\n  ellipseMode(mode: ELLIPSE_MODE): p5\r\n  \r\n  /**\r\n   *   Draws all geometry with jagged (aliased) edges. \r\n   *   Note that smooth() is active by default, so it is \r\n   *   necessary to call noSmooth() to disable smoothing \r\n   *   of geometry, images, and fonts.\r\n   *\r\n   *   @chainable\r\n   */\r\n  noSmooth(): p5\r\n  \r\n  /**\r\n   *   Modifies the location from which rectangles are \r\n   *   drawn by changing the way in which parameters \r\n   *   given to rect() are interpreted.  The default mode \r\n   *   is rectMode(CORNER), which interprets the first \r\n   *   two parameters of rect() as the upper-left corner \r\n   *   of the shape, while the third and fourth \r\n   *   parameters are its width and height. \r\n   * \r\n   *  \r\n   *   rectMode(CORNERS) interprets the first two \r\n   *   parameters of rect() as the location of one \r\n   *   corner, and the third and fourth parameters as the \r\n   *   location of the opposite corner. \r\n   * \r\n   *  \r\n   *   rectMode(CENTER) interprets the first two \r\n   *   parameters of rect() as the shape's center point, \r\n   *   while the third and fourth parameters are its \r\n   *   width and height. \r\n   * \r\n   *  \r\n   *   rectMode(RADIUS) also uses the first two \r\n   *   parameters of rect() as the shape's center point, \r\n   *   but uses the third and fourth parameters to \r\n   *   specify half of the shapes's width and height. \r\n   * \r\n   *  \r\n   *   The parameter must be written in ALL CAPS because \r\n   *   Javascript is a case-sensitive language.\r\n   *\r\n   *   @param mode either CORNER, CORNERS, CENTER, or \r\n   *   RADIUS\r\n   *   @chainable\r\n   */\r\n  rectMode(mode: RECT_MODE): p5\r\n  \r\n  /**\r\n   *   Draws all geometry with smooth (anti-aliased) \r\n   *   edges. smooth() will also improve image quality of \r\n   *   resized images. Note that smooth() is active by \r\n   *   default; noSmooth() can be used to disable \r\n   *   smoothing of geometry, images, and fonts.\r\n   *\r\n   *   @chainable\r\n   */\r\n  smooth(): p5\r\n  \r\n  /**\r\n   *   Sets the style for rendering line endings. These \r\n   *   ends are either squared, extended, or rounded, \r\n   *   each of which specified with the corresponding \r\n   *   parameters: SQUARE, PROJECT, and ROUND. The \r\n   *   default cap is ROUND.\r\n   *\r\n   *   @param cap either SQUARE, PROJECT, or ROUND\r\n   *   @chainable\r\n   */\r\n  strokeCap(cap: STROKE_CAP): p5\r\n  \r\n  /**\r\n   *   Sets the style of the joints which connect line \r\n   *   segments. These joints are either mitered, \r\n   *   beveled, or rounded and specified with the \r\n   *   corresponding parameters MITER, BEVEL, and ROUND. \r\n   *   The default joint is MITER.\r\n   *\r\n   *   @param join either MITER, BEVEL, ROUND\r\n   *   @chainable\r\n   */\r\n  strokeJoin(join: STROKE_JOIN): p5\r\n  \r\n  /**\r\n   *   Sets the width of the stroke used for lines, \r\n   *   points, and the border around shapes. All widths \r\n   *   are set in units of pixels.\r\n   *\r\n   *   @param weight the weight (in pixels) of the stroke\r\n   *   @chainable\r\n   */\r\n  strokeWeight(weight: number): p5\r\n  \r\n  // src/core/constants.js\r\n  \r\n  readonly P2D: 'p2d'\r\n  readonly WEBGL: 'webgl'\r\n  \r\n  /**\r\n   *   HALF_PI is a mathematical constant with the value \r\n   *   1.57079632679489661923. It is half the ratio of \r\n   *   the circumference of a circle to its diameter. It \r\n   *   is useful in combination with the trigonometric \r\n   *   functions sin() and cos().\r\n   *\r\n   */\r\n  readonly HALF_PI: number\r\n  \r\n  /**\r\n   *   PI is a mathematical constant with the value \r\n   *   3.14159265358979323846. It is the ratio of the \r\n   *   circumference of a circle to its diameter. It is \r\n   *   useful in combination with the trigonometric \r\n   *   functions sin() and cos().\r\n   *\r\n   */\r\n  readonly PI: number\r\n  \r\n  /**\r\n   *   QUARTER_PI is a mathematical constant with the \r\n   *   value 0.7853982. It is one quarter the ratio of \r\n   *   the circumference of a circle to its diameter. It \r\n   *   is useful in combination with the trigonometric \r\n   *   functions sin() and cos().\r\n   *\r\n   */\r\n  readonly QUARTER_PI: number\r\n  \r\n  /**\r\n   *   TAU is an alias for TWO_PI, a mathematical \r\n   *   constant with the value 6.28318530717958647693. It \r\n   *   is twice the ratio of the circumference of a \r\n   *   circle to its diameter. It is useful in \r\n   *   combination with the trigonometric functions sin() \r\n   *   and cos().\r\n   *\r\n   */\r\n  readonly TAU: number\r\n  \r\n  /**\r\n   *   TWO_PI is a mathematical constant with the value \r\n   *   6.28318530717958647693. It is twice the ratio of \r\n   *   the circumference of a circle to its diameter. It \r\n   *   is useful in combination with the trigonometric \r\n   *   functions sin() and cos().\r\n   *\r\n   */\r\n  readonly TWO_PI: number\r\n  \r\n  /**\r\n   *   Constant to be used with angleMode() function, to \r\n   *   set the mode which p5.js interprates and \r\n   *   calculates angles (either DEGREES or RADIANS).\r\n   *\r\n   */\r\n  readonly DEGREES: 'degrees'\r\n  \r\n  /**\r\n   *   Constant to be used with angleMode() function, to \r\n   *   set the mode which p5.js interprates and \r\n   *   calculates angles (either RADIANS or DEGREES).\r\n   *\r\n   */\r\n  readonly RADIANS: 'radians'\r\n  readonly CORNER: 'corner'\r\n  readonly CORNERS: 'corners'\r\n  readonly RADIUS: 'radius'\r\n  readonly RIGHT: 'right'\r\n  readonly LEFT: 'left'\r\n  readonly CENTER: 'center'\r\n  readonly TOP: 'top'\r\n  readonly BOTTOM: 'bottom'\r\n  readonly BASELINE: 'alphabetic'\r\n  readonly POINTS: 0x0000\r\n  readonly LINES: 0x0001\r\n  readonly LINE_STRIP: 0x0003\r\n  readonly LINE_LOOP: 0x0002\r\n  readonly TRIANGLES: 0x0004\r\n  readonly TRIANGLE_FAN: 0x0006\r\n  readonly TRIANGLE_STRIP: 0x0005\r\n  readonly QUADS: 'quads'\r\n  readonly QUAD_STRIP: 'quad_strip'\r\n  readonly CLOSE: 'close'\r\n  readonly OPEN: 'open'\r\n  readonly CHORD: 'chord'\r\n  readonly PIE: 'pie'\r\n  readonly PROJECT: 'square'\r\n  readonly SQUARE: 'butt'\r\n  readonly ROUND: 'round'\r\n  readonly BEVEL: 'bevel'\r\n  readonly MITER: 'miter'\r\n  readonly RGB: 'rgb'\r\n  readonly HSB: 'hsb'\r\n  readonly HSL: 'hsl'\r\n  readonly BLEND: 'source-over'\r\n  readonly ADD: 'lighter'\r\n  readonly DARKEST: 'darkest'\r\n  readonly LIGHTEST: 'lighten'\r\n  readonly DIFFERENCE: 'difference'\r\n  readonly EXCLUSION: 'exclusion'\r\n  readonly MULTIPLY: 'multiply'\r\n  readonly SCREEN: 'screen'\r\n  readonly REPLACE: 'copy'\r\n  readonly OVERLAY: 'overlay'\r\n  readonly HARD_LIGHT: 'hard-light'\r\n  readonly SOFT_LIGHT: 'soft-light'\r\n  readonly DODGE: 'color-dodge'\r\n  readonly BURN: 'color-burn'\r\n  readonly THRESHOLD: 'threshold'\r\n  readonly GRAY: 'gray'\r\n  readonly OPAQUE: 'opaque'\r\n  readonly INVERT: 'invert'\r\n  readonly POSTERIZE: 'posterize'\r\n  readonly DILATE: 'dilate'\r\n  readonly ERODE: 'erode'\r\n  readonly BLUR: 'blur'\r\n  readonly NORMAL: 'normal'\r\n  readonly ITALIC: 'italic'\r\n  readonly BOLD: 'bold'\r\n  readonly LANDSCAPE: 'landscape'\r\n  readonly PORTRAIT: 'portrait'\r\n  \r\n  // src/core/core.js\r\n  \r\n  /**\r\n   *   Called directly before setup(), the preload() \r\n   *   function is used to handle asynchronous loading of \r\n   *   external files in a blocking way. If a preload \r\n   *   function is defined, setup() will wait until any \r\n   *   load calls within have finished. Nothing besides \r\n   *   load calls (loadImage, loadJSON, loadFont, \r\n   *   loadStrings, etc.) should be inside preload \r\n   *   function. If asynchronous loading is preferred, \r\n   *   the load methods can instead be called in setup() \r\n   *   or anywhere else with the use of a callback \r\n   *   parameter.  By default the text \"loading...\" will \r\n   *   be displayed. To make your own loading page, \r\n   *   include an HTML element with id \"p5_loading\" in \r\n   *   your page. More information here.\r\n   *\r\n   */\r\n  preload(): void\r\n  \r\n  /**\r\n   *   The setup() function is called once when the \r\n   *   program starts. It's used to define initial \r\n   *   environment properties such as screen size and \r\n   *   background color and to load media such as images \r\n   *   and fonts as the program starts. There can only be \r\n   *   one setup() function for each program and it \r\n   *   shouldn't be called again after its initial \r\n   *   execution.  Note: Variables declared within \r\n   *   setup() are not accessible within other functions, \r\n   *   including draw().\r\n   *\r\n   */\r\n  setup(): void\r\n  \r\n  /**\r\n   *   Called directly after setup(), the draw() function \r\n   *   continuously executes the lines of code contained \r\n   *   inside its block until the program is stopped or \r\n   *   noLoop() is called. Note if noLoop() is called in \r\n   *   setup(), draw() will still be executed once before \r\n   *   stopping. draw() is called automatically and \r\n   *   should never be called explicitly.  It should \r\n   *   always be controlled with noLoop(), redraw() and \r\n   *   loop(). After noLoop() stops the code in draw() \r\n   *   from executing, redraw() causes the code inside \r\n   *   draw() to execute once, and loop() will cause the \r\n   *   code inside draw() to resume executing \r\n   *   continuously. \r\n   * \r\n   *  \r\n   *   The number of times draw() executes in each second \r\n   *   may be controlled with the frameRate() function. \r\n   * \r\n   *  \r\n   *   There can only be one draw() function for each \r\n   *   sketch, and draw() must exist if you want the code \r\n   *   to run continuously, or to process events such as \r\n   *   mousePressed(). Sometimes, you might have an empty \r\n   *   call to draw() in your program, as shown in the \r\n   *   above example. \r\n   * \r\n   *  \r\n   *   It is important to note that the drawing \r\n   *   coordinate system will be reset at the beginning \r\n   *   of each draw() call. If any transformations are \r\n   *   performed within draw() (ex: scale, rotate, \r\n   *   translate), their effects will be undone at the \r\n   *   beginning of draw(), so transformations will not \r\n   *   accumulate over time. On the other hand, styling \r\n   *   applied (ex: fill, stroke, etc) will remain in \r\n   *   effect.\r\n   *\r\n   */\r\n  draw(): void\r\n  \r\n  /**\r\n   *   Removes the entire p5 sketch. This will remove the \r\n   *   canvas and any elements created by p5.js. It will \r\n   *   also stop the draw loop and unbind any properties \r\n   *   or methods from the window global scope. It will \r\n   *   leave a variable p5 in case you wanted to create a \r\n   *   new p5 sketch. If you like, you can set p5 = null \r\n   *   to erase it. While all functions and variables and \r\n   *   objects created by the p5 library will be removed, \r\n   *   any other global variables created by your code \r\n   *   will remain.\r\n   *\r\n   */\r\n  remove(): void\r\n  \r\n  // src/core/curves.js\r\n  \r\n  /**\r\n   *   Draws a cubic Bezier curve on the screen. These \r\n   *   curves are defined by a series of anchor and \r\n   *   control points. The first two parameters specify \r\n   *   the first anchor point and the last two parameters \r\n   *   specify the other anchor point, which become the \r\n   *   first and last points on the curve. The middle \r\n   *   parameters specify the two control points which \r\n   *   define the shape of the curve. Approximately \r\n   *   speaking, control points \"pull\" the curve towards \r\n   *   them.Bezier curves were developed by French \r\n   *   automotive engineer Pierre Bezier, and are \r\n   *   commonly used in computer graphics to define \r\n   *   gently sloping curves. See also curve().\r\n   *\r\n   *   @param x1 x-coordinate for the first anchor point\r\n   *   @param y1 y-coordinate for the first anchor point\r\n   *   @param x2 x-coordinate for the first control point\r\n   *   @param y2 y-coordinate for the first control point\r\n   *   @param x3 x-coordinate for the second control \r\n   *   point\r\n   *   @param y3 y-coordinate for the second control \r\n   *   point\r\n   *   @param x4 x-coordinate for the second anchor point\r\n   *   @param y4 y-coordinate for the second anchor point\r\n   *   @chainable\r\n   */\r\n  bezier(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5\r\n  \r\n  /**\r\n   *   Draws a cubic Bezier curve on the screen. These \r\n   *   curves are defined by a series of anchor and \r\n   *   control points. The first two parameters specify \r\n   *   the first anchor point and the last two parameters \r\n   *   specify the other anchor point, which become the \r\n   *   first and last points on the curve. The middle \r\n   *   parameters specify the two control points which \r\n   *   define the shape of the curve. Approximately \r\n   *   speaking, control points \"pull\" the curve towards \r\n   *   them.Bezier curves were developed by French \r\n   *   automotive engineer Pierre Bezier, and are \r\n   *   commonly used in computer graphics to define \r\n   *   gently sloping curves. See also curve().\r\n   *\r\n   *   @param x1 x-coordinate for the first anchor point\r\n   *   @param y1 y-coordinate for the first anchor point\r\n   *   @param z1 z-coordinate for the first anchor point\r\n   *   @param x2 x-coordinate for the first control point\r\n   *   @param y2 y-coordinate for the first control point\r\n   *   @param z2 z-coordinate for the first control point\r\n   *   @param x3 x-coordinate for the second control \r\n   *   point\r\n   *   @param y3 y-coordinate for the second control \r\n   *   point\r\n   *   @param z3 z-coordinate for the second control \r\n   *   point\r\n   *   @param x4 x-coordinate for the second anchor point\r\n   *   @param y4 y-coordinate for the second anchor point\r\n   *   @param z4 z-coordinate for the second anchor point\r\n   *   @chainable\r\n   */\r\n  bezier(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number): p5\r\n  \r\n  /**\r\n   *   Sets the resolution at which Beziers display. The \r\n   *   default value is 20. \r\n   * \r\n   *   This function is only useful when using the WEBGL \r\n   *   renderer as the default canvas renderer does not \r\n   *   use this information.\r\n   *\r\n   *   @param detail resolution of the curves\r\n   *   @chainable\r\n   */\r\n  bezierDetail(detail: number): p5\r\n  \r\n  /**\r\n   *   Evaluates the Bezier at position t for points a, \r\n   *   b, c, d. The parameters a and d are the first and \r\n   *   last points on the curve, and b and c are the \r\n   *   control points. The final parameter t varies \r\n   *   between 0 and 1. This can be done once with the x \r\n   *   coordinates and a second time with the y \r\n   *   coordinates to get the location of a bezier curve \r\n   *   at t.\r\n   *\r\n   *   @param a coordinate of first point on the curve\r\n   *   @param b coordinate of first control point\r\n   *   @param c coordinate of second control point\r\n   *   @param d coordinate of second point on the curve\r\n   *   @param t value between 0 and 1\r\n   *   @return the value of the Bezier at position t\r\n   */\r\n  bezierPoint(a: number, b: number, c: number, d: number, t: number): number\r\n  \r\n  /**\r\n   *   Evaluates the tangent to the Bezier at position t \r\n   *   for points a, b, c, d. The parameters a and d are \r\n   *   the first and last points on the curve, and b and \r\n   *   c are the control points. The final parameter t \r\n   *   varies between 0 and 1.\r\n   *\r\n   *   @param a coordinate of first point on the curve\r\n   *   @param b coordinate of first control point\r\n   *   @param c coordinate of second control point\r\n   *   @param d coordinate of second point on the curve\r\n   *   @param t value between 0 and 1\r\n   *   @return the tangent at position t\r\n   */\r\n  bezierTangent(a: number, b: number, c: number, d: number, t: number): number\r\n  \r\n  /**\r\n   *   Draws a curved line on the screen between two \r\n   *   points, given as the middle four parameters. The \r\n   *   first two parameters are a control point, as if \r\n   *   the curve came from this point even though it's \r\n   *   not drawn. The last two parameters similarly \r\n   *   describe the other control point.  Longer curves \r\n   *   can be created by putting a series of curve() \r\n   *   functions together or using curveVertex(). An \r\n   *   additional function called curveTightness() \r\n   *   provides control for the visual quality of the \r\n   *   curve. The curve() function is an implementation \r\n   *   of Catmull-Rom splines.\r\n   *\r\n   *   @param x1 x-coordinate for the beginning control \r\n   *   point\r\n   *   @param y1 y-coordinate for the beginning control \r\n   *   point\r\n   *   @param x2 x-coordinate for the first point\r\n   *   @param y2 y-coordinate for the first point\r\n   *   @param x3 x-coordinate for the second point\r\n   *   @param y3 y-coordinate for the second point\r\n   *   @param x4 x-coordinate for the ending control \r\n   *   point\r\n   *   @param y4 y-coordinate for the ending control \r\n   *   point\r\n   *   @chainable\r\n   */\r\n  curve(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5\r\n  \r\n  /**\r\n   *   Draws a curved line on the screen between two \r\n   *   points, given as the middle four parameters. The \r\n   *   first two parameters are a control point, as if \r\n   *   the curve came from this point even though it's \r\n   *   not drawn. The last two parameters similarly \r\n   *   describe the other control point.  Longer curves \r\n   *   can be created by putting a series of curve() \r\n   *   functions together or using curveVertex(). An \r\n   *   additional function called curveTightness() \r\n   *   provides control for the visual quality of the \r\n   *   curve. The curve() function is an implementation \r\n   *   of Catmull-Rom splines.\r\n   *\r\n   *   @param x1 x-coordinate for the beginning control \r\n   *   point\r\n   *   @param y1 y-coordinate for the beginning control \r\n   *   point\r\n   *   @param z1 z-coordinate for the beginning control \r\n   *   point\r\n   *   @param x2 x-coordinate for the first point\r\n   *   @param y2 y-coordinate for the first point\r\n   *   @param z2 z-coordinate for the first point\r\n   *   @param x3 x-coordinate for the second point\r\n   *   @param y3 y-coordinate for the second point\r\n   *   @param z3 z-coordinate for the second point\r\n   *   @param x4 x-coordinate for the ending control \r\n   *   point\r\n   *   @param y4 y-coordinate for the ending control \r\n   *   point\r\n   *   @param z4 z-coordinate for the ending control \r\n   *   point\r\n   *   @chainable\r\n   */\r\n  curve(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number): p5\r\n  \r\n  /**\r\n   *   Sets the resolution at which curves display. The \r\n   *   default value is 20. \r\n   * \r\n   *   This function is only useful when using the WEBGL \r\n   *   renderer as the default canvas renderer does not \r\n   *   use this information.\r\n   *\r\n   *   @param resolution of the curves\r\n   *   @chainable\r\n   */\r\n  curveDetail(resolution: number): p5\r\n  \r\n  /**\r\n   *   Modifies the quality of forms created with curve() \r\n   *   and curveVertex(). The parameter tightness \r\n   *   determines how the curve fits to the vertex \r\n   *   points. The value 0.0 is the default value for \r\n   *   tightness (this value defines the curves to be \r\n   *   Catmull-Rom splines) and the value 1.0 connects \r\n   *   all the points with straight lines. Values within \r\n   *   the range -5.0 and 5.0 will deform the curves but \r\n   *   will leave them recognizable and as values \r\n   *   increase in magnitude, they will continue to \r\n   *   deform.\r\n   *\r\n   *   @param amount of deformation from the original \r\n   *   vertices\r\n   *   @chainable\r\n   */\r\n  curveTightness(amount: number): p5\r\n  \r\n  /**\r\n   *   Evaluates the curve at position t for points a, b, \r\n   *   c, d. The parameter t varies between 0 and 1, a \r\n   *   and d are points on the curve, and b and c are the \r\n   *   control points. This can be done once with the x \r\n   *   coordinates and a second time with the y \r\n   *   coordinates to get the location of a curve at t.\r\n   *\r\n   *   @param a coordinate of first point on the curve\r\n   *   @param b coordinate of first control point\r\n   *   @param c coordinate of second control point\r\n   *   @param d coordinate of second point on the curve\r\n   *   @param t value between 0 and 1\r\n   *   @return bezier value at position t\r\n   */\r\n  curvePoint(a: number, b: number, c: number, d: number, t: number): number\r\n  \r\n  /**\r\n   *   Evaluates the tangent to the curve at position t \r\n   *   for points a, b, c, d. The parameter t varies \r\n   *   between 0 and 1, a and d are points on the curve, \r\n   *   and b and c are the control points.\r\n   *\r\n   *   @param a coordinate of first point on the curve\r\n   *   @param b coordinate of first control point\r\n   *   @param c coordinate of second control point\r\n   *   @param d coordinate of second point on the curve\r\n   *   @param t value between 0 and 1\r\n   *   @return the tangent at position t\r\n   */\r\n  curveTangent(a: number, b: number, c: number, d: number, t: number): number\r\n  \r\n  // src/core/environment.js\r\n  \r\n  /**\r\n   *   The print() function writes to the console area of \r\n   *   your browser. This function is often helpful for \r\n   *   looking at the data a program is producing. This \r\n   *   function creates a new line of text for each call \r\n   *   to the function. Individual elements can be \r\n   *   separated with quotes (\"\") and joined with the \r\n   *   addition operator (+).\r\n   *\r\n   *   @param contents any combination of Number, String, \r\n   *   Object, Boolean, Array to print\r\n   */\r\n  print(contents: any): void\r\n  \r\n  /**\r\n   *   The system variable frameCount contains the number \r\n   *   of frames that have been displayed since the \r\n   *   program started. Inside setup() the value is 0, \r\n   *   after the first iteration of draw it is 1, etc.\r\n   *\r\n   */\r\n  frameCount: number\r\n  \r\n  /**\r\n   *   Confirms if the window a p5.js program is in is \r\n   *   \"focused,\" meaning that the sketch will accept \r\n   *   mouse or keyboard input. This variable is \"true\" \r\n   *   if the window is focused and \"false\" if not.\r\n   *\r\n   */\r\n  focused: boolean\r\n  \r\n  /**\r\n   *   Sets the cursor to a predefined symbol or an \r\n   *   image, or makes it visible if already hidden. If \r\n   *   you are trying to set an image as the cursor, the \r\n   *   recommended size is 16x16 or 32x32 pixels. It is \r\n   *   not possible to load an image as the cursor if you \r\n   *   are exporting your program for the Web, and not \r\n   *   all MODES work with all browsers. The values for \r\n   *   parameters x and y must be less than the \r\n   *   dimensions of the image.\r\n   *\r\n   *   @param type either ARROW, CROSS, HAND, MOVE, TEXT, \r\n   *   or WAIT, or path for image\r\n   *   @param [x] the horizontal active spot of the \r\n   *   cursor\r\n   *   @param [y] the vertical active spot of the cursor\r\n   */\r\n  cursor(type: string|any, x?: number, y?: number): void\r\n  \r\n  /**\r\n   *   Specifies the number of frames to be displayed \r\n   *   every second. For example, the function call \r\n   *   frameRate(30) will attempt to refresh 30 times a \r\n   *   second. If the processor is not fast enough to \r\n   *   maintain the specified rate, the frame rate will \r\n   *   not be achieved. Setting the frame rate within \r\n   *   setup() is recommended. The default rate is 60 \r\n   *   frames per second. This is the same as \r\n   *   setFrameRate(val).  Calling frameRate() with no \r\n   *   arguments returns the current framerate. The draw \r\n   *   function must run at least once before it will \r\n   *   return a value. This is the same as \r\n   *   getFrameRate(). \r\n   * \r\n   *  \r\n   *   Calling frameRate() with arguments that are not of \r\n   *   the type numbers or are non positive also returns \r\n   *   current framerate.\r\n   *\r\n   *   @param fps number of frames to be displayed every \r\n   *   second\r\n   *   @chainable\r\n   */\r\n  frameRate(fps: number): p5\r\n  \r\n  /**\r\n   *   Specifies the number of frames to be displayed \r\n   *   every second. For example, the function call \r\n   *   frameRate(30) will attempt to refresh 30 times a \r\n   *   second. If the processor is not fast enough to \r\n   *   maintain the specified rate, the frame rate will \r\n   *   not be achieved. Setting the frame rate within \r\n   *   setup() is recommended. The default rate is 60 \r\n   *   frames per second. This is the same as \r\n   *   setFrameRate(val).  Calling frameRate() with no \r\n   *   arguments returns the current framerate. The draw \r\n   *   function must run at least once before it will \r\n   *   return a value. This is the same as \r\n   *   getFrameRate(). \r\n   * \r\n   *  \r\n   *   Calling frameRate() with arguments that are not of \r\n   *   the type numbers or are non positive also returns \r\n   *   current framerate.\r\n   *\r\n   *   @return current frameRate\r\n   */\r\n  frameRate(): number\r\n  \r\n  /**\r\n   *   Hides the cursor from view.\r\n   *\r\n   */\r\n  noCursor(): void\r\n  \r\n  /**\r\n   *   System variable that stores the width of the \r\n   *   entire screen display. This is used to run a \r\n   *   full-screen program on any display size.\r\n   *\r\n   */\r\n  displayWidth: number\r\n  \r\n  /**\r\n   *   System variable that stores the height of the \r\n   *   entire screen display. This is used to run a \r\n   *   full-screen program on any display size.\r\n   *\r\n   */\r\n  displayHeight: number\r\n  \r\n  /**\r\n   *   System variable that stores the width of the inner \r\n   *   window, it maps to window.innerWidth.\r\n   *\r\n   */\r\n  windowWidth: number\r\n  \r\n  /**\r\n   *   System variable that stores the height of the \r\n   *   inner window, it maps to window.innerHeight.\r\n   *\r\n   */\r\n  windowHeight: number\r\n  \r\n  /**\r\n   *   The windowResized() function is called once every \r\n   *   time the browser window is resized. This is a good \r\n   *   place to resize the canvas or do any other \r\n   *   adjustments to accommodate the new window size.\r\n   *\r\n   */\r\n  windowResized(): void\r\n  \r\n  /**\r\n   *   System variable that stores the width of the \r\n   *   drawing canvas. This value is set by the first \r\n   *   parameter of the createCanvas() function. For \r\n   *   example, the function call createCanvas(320, 240) \r\n   *   sets the width variable to the value 320. The \r\n   *   value of width defaults to 100 if createCanvas() \r\n   *   is not used in a program.\r\n   *\r\n   */\r\n  width: number\r\n  \r\n  /**\r\n   *   System variable that stores the height of the \r\n   *   drawing canvas. This value is set by the second \r\n   *   parameter of the createCanvas() function. For \r\n   *   example, the function call createCanvas(320, 240) \r\n   *   sets the height variable to the value 240. The \r\n   *   value of height defaults to 100 if createCanvas() \r\n   *   is not used in a program.\r\n   *\r\n   */\r\n  height: number\r\n  \r\n  /**\r\n   *   If argument is given, sets the sketch to \r\n   *   fullscreen or not based on the value of the \r\n   *   argument. If no argument is given, returns the \r\n   *   current fullscreen state. Note that due to browser \r\n   *   restrictions this can only be called on user \r\n   *   input, for example, on mouse press like the \r\n   *   example below.\r\n   *\r\n   *   @param [val] whether the sketch should be in \r\n   *   fullscreen mode or not\r\n   *   @return current fullscreen state\r\n   */\r\n  fullscreen(val?: boolean): boolean\r\n  \r\n  /**\r\n   *   Sets the pixel scaling for high pixel density \r\n   *   displays. By default pixel density is set to match \r\n   *   display density, call pixelDensity(1) to turn this \r\n   *   off. Calling pixelDensity() with no arguments \r\n   *   returns the current pixel density of the sketch.\r\n   *\r\n   *   @param [val] whether or how much the sketch should \r\n   *   scale\r\n   *   @return current pixel density of the sketch\r\n   */\r\n  pixelDensity(val?: number): number\r\n  \r\n  /**\r\n   *   Returns the pixel density of the current display \r\n   *   the sketch is running on.\r\n   *\r\n   *   @return current pixel density of the display\r\n   */\r\n  displayDensity(): number\r\n  \r\n  /**\r\n   *   Gets the current URL.\r\n   *\r\n   *   @return url\r\n   */\r\n  getURL(): string\r\n  \r\n  /**\r\n   *   Gets the current URL path as an array.\r\n   *\r\n   *   @return path components\r\n   */\r\n  getURLPath(): string[]\r\n  \r\n  /**\r\n   *   Gets the current URL params as an Object.\r\n   *\r\n   *   @return URL params\r\n   */\r\n  getURLParams(): object\r\n  \r\n  // src/core/rendering.js\r\n  \r\n  /**\r\n   *   Creates a canvas element in the document, and sets \r\n   *   the dimensions of it in pixels. This method should \r\n   *   be called only once at the start of setup. Calling \r\n   *   createCanvas more than once in a sketch will \r\n   *   result in very unpredictable behavior. If you want \r\n   *   more than one drawing canvas you could use \r\n   *   createGraphics (hidden by default but it can be \r\n   *   shown).  The system variables width and height are \r\n   *   set by the parameters passed to this function. If \r\n   *   createCanvas() is not used, the window will be \r\n   *   given a default size of 100x100 pixels. \r\n   * \r\n   *  \r\n   *   For more ways to position the canvas, see the  \r\n   *   positioning the canvas wiki page.\r\n   *\r\n   *   @param w width of the canvas\r\n   *   @param h height of the canvas\r\n   *   @param [renderer] either P2D or WEBGL\r\n   */\r\n  createCanvas(w: number, h: number, renderer?: RENDERER): p5.Renderer\r\n  \r\n  /**\r\n   *   Resizes the canvas to given width and height. The \r\n   *   canvas will be cleared and draw will be called \r\n   *   immediately, allowing the sketch to re-render \r\n   *   itself in the resized canvas.\r\n   *\r\n   *   @param w width of the canvas\r\n   *   @param h height of the canvas\r\n   *   @param [noRedraw] don't redraw the canvas \r\n   *   immediately\r\n   */\r\n  resizeCanvas(w: number, h: number, noRedraw?: boolean): void\r\n  \r\n  /**\r\n   *   Removes the default canvas for a p5 sketch that \r\n   *   doesn't require a canvas\r\n   *\r\n   */\r\n  noCanvas(): void\r\n  \r\n  /**\r\n   *   Creates and returns a new p5.Renderer object. Use \r\n   *   this class if you need to draw into an off-screen \r\n   *   graphics buffer. The two parameters define the \r\n   *   width and height in pixels.\r\n   *\r\n   *   @param w width of the offscreen graphics buffer\r\n   *   @param h height of the offscreen graphics buffer\r\n   *   @param [renderer] either P2D or WEBGL undefined \r\n   *   defaults to p2d\r\n   *   @return offscreen graphics buffer\r\n   */\r\n  createGraphics(w: number, h: number, renderer?: RENDERER): p5.Graphics\r\n  \r\n  /**\r\n   *   Blends the pixels in the display window according \r\n   *   to the defined mode. There is a choice of the \r\n   *   following modes to blend the source pixels (A) \r\n   *   with the ones of pixels already in the display \r\n   *   window (B): - BLEND - linear interpolation of \r\n   *   colours: C = A*factor + B. This is the default \r\n   *   blending mode.\r\n   *   - ADD - sum of A and B\r\n   *   - DARKEST - only the darkest colour succeeds: C = \r\n   *   min(A*factor, B).\r\n   *   - LIGHTEST - only the lightest colour succeeds: C \r\n   *   = max(A*factor, B).\r\n   *   - DIFFERENCE - subtract colors from underlying \r\n   *   image.\r\n   *   - EXCLUSION - similar to DIFFERENCE, but less \r\n   *   extreme.\r\n   *   - MULTIPLY - multiply the colors, result will \r\n   *   always be darker.\r\n   *   - SCREEN - opposite multiply, uses inverse values \r\n   *   of the colors.\r\n   *   - REPLACE - the pixels entirely replace the others \r\n   *   and don't utilize alpha (transparency) values.\r\n   *   - OVERLAY - mix of MULTIPLY and SCREEN . \r\n   *   Multiplies dark values, and screens light values.\r\n   *   - HARD_LIGHT - SCREEN when greater than 50% gray, \r\n   *   MULTIPLY when lower.\r\n   *   - SOFT_LIGHT - mix of DARKEST and LIGHTEST. Works \r\n   *   like OVERLAY, but not as harsh. \r\n   *   - DODGE - lightens light tones and increases \r\n   *   contrast, ignores darks.\r\n   *   - BURN - darker areas are applied, increasing \r\n   *   contrast, ignores lights.\r\n   *\r\n   *   @param mode blend mode to set for canvas. either \r\n   *   BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \r\n   *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \r\n   *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL\r\n   */\r\n  blendMode(mode: BLEND_MODE): void\r\n  \r\n  // src/core/structure.js\r\n  \r\n  /**\r\n   *   Stops p5.js from continuously executing the code \r\n   *   within draw(). If loop() is called, the code in \r\n   *   draw() begins to run continuously again. If using \r\n   *   noLoop() in setup(), it should be the last line \r\n   *   inside the block.  When noLoop() is used, it's not \r\n   *   possible to manipulate or access the screen inside \r\n   *   event handling functions such as mousePressed() or \r\n   *   keyPressed(). Instead, use those functions to call \r\n   *   redraw() or loop(), which will run draw(), which \r\n   *   can update the screen properly. This means that \r\n   *   when noLoop() has been called, no drawing can \r\n   *   happen, and functions like saveFrame() or \r\n   *   loadPixels() may not be used. \r\n   * \r\n   *  \r\n   *   Note that if the sketch is resized, redraw() will \r\n   *   be called to update the sketch, even after \r\n   *   noLoop() has been specified. Otherwise, the sketch \r\n   *   would enter an odd state until loop() was called.\r\n   *\r\n   */\r\n  noLoop(): void\r\n  \r\n  /**\r\n   *   By default, p5.js loops through draw() \r\n   *   continuously, executing the code within it. \r\n   *   However, the draw() loop may be stopped by calling \r\n   *   noLoop(). In that case, the draw() loop can be \r\n   *   resumed with loop().\r\n   *\r\n   */\r\n  loop(): void\r\n  \r\n  /**\r\n   *   The push() function saves the current drawing \r\n   *   style settings and transformations, while pop() \r\n   *   restores these settings. Note that these functions \r\n   *   are always used together. They allow you to change \r\n   *   the style and transformation settings and later \r\n   *   return to what you had. When a new state is \r\n   *   started with push(), it builds on the current \r\n   *   style and transform information. The push() and \r\n   *   pop() functions can be embedded to provide more \r\n   *   control. (See the second example for a \r\n   *   demonstration.)  push() stores information related \r\n   *   to the current transformation state and style \r\n   *   settings controlled by the following functions: \r\n   *   fill(), stroke(), tint(), strokeWeight(), \r\n   *   strokeCap(), strokeJoin(), imageMode(), \r\n   *   rectMode(), ellipseMode(), colorMode(), \r\n   *   textAlign(), textFont(), textMode(), textSize(), \r\n   *   textLeading().\r\n   *\r\n   */\r\n  push(): void\r\n  \r\n  /**\r\n   *   The push() function saves the current drawing \r\n   *   style settings and transformations, while pop() \r\n   *   restores these settings. Note that these functions \r\n   *   are always used together. They allow you to change \r\n   *   the style and transformation settings and later \r\n   *   return to what you had. When a new state is \r\n   *   started with push(), it builds on the current \r\n   *   style and transform information. The push() and \r\n   *   pop() functions can be embedded to provide more \r\n   *   control. (See the second example for a \r\n   *   demonstration.)  push() stores information related \r\n   *   to the current transformation state and style \r\n   *   settings controlled by the following functions: \r\n   *   fill(), stroke(), tint(), strokeWeight(), \r\n   *   strokeCap(), strokeJoin(), imageMode(), \r\n   *   rectMode(), ellipseMode(), colorMode(), \r\n   *   textAlign(), textFont(), textMode(), textSize(), \r\n   *   textLeading().\r\n   *\r\n   */\r\n  pop(): void\r\n  \r\n  /**\r\n   *   Executes the code within draw() one time. This \r\n   *   functions allows the program to update the display \r\n   *   window only when necessary, for example when an \r\n   *   event registered by mousePressed() or keyPressed() \r\n   *   occurs.  In structuring a program, it only makes \r\n   *   sense to call redraw() within events such as \r\n   *   mousePressed(). This is because redraw() does not \r\n   *   run draw() immediately (it only sets a flag that \r\n   *   indicates an update is needed). \r\n   * \r\n   *  \r\n   *   The redraw() function does not work properly when \r\n   *   called inside draw(). To enable/disable \r\n   *   animations, use loop() and noLoop(). \r\n   * \r\n   *  \r\n   *   In addition you can set the number of redraws per \r\n   *   method call. Just add an integer as single \r\n   *   parameter for the number of redraws.\r\n   *\r\n   *   @param [n] Redraw for n-times. The default value \r\n   *   is 1.\r\n   */\r\n  redraw(n?: number): void\r\n  \r\n  // src/core/transform.js\r\n  \r\n  /**\r\n   *   Multiplies the current matrix by the one specified \r\n   *   through the parameters. This is a powerful \r\n   *   operation that can perform the equivalent of \r\n   *   translate, scale, shear and rotate all at once. \r\n   *   You can learn more about transformation matrices \r\n   *   on  Wikipedia. The naming of the arguments here \r\n   *   follows the naming of the  WHATWG specification \r\n   *   and corresponds to a transformation matrix of the \r\n   *   form:\r\n   *\r\n   *   @param a numbers which define the 2x3 matrix to be \r\n   *   multiplied\r\n   *   @param b numbers which define the 2x3 matrix to be \r\n   *   multiplied\r\n   *   @param c numbers which define the 2x3 matrix to be \r\n   *   multiplied\r\n   *   @param d numbers which define the 2x3 matrix to be \r\n   *   multiplied\r\n   *   @param e numbers which define the 2x3 matrix to be \r\n   *   multiplied\r\n   *   @param f numbers which define the 2x3 matrix to be \r\n   *   multiplied\r\n   *   @chainable\r\n   */\r\n  applyMatrix(a: number, b: number, c: number, d: number, e: number, f: number): p5\r\n  \r\n  /**\r\n   *   Replaces the current matrix with the identity \r\n   *   matrix.\r\n   *\r\n   *   @chainable\r\n   */\r\n  resetMatrix(): p5\r\n  \r\n  /**\r\n   *   Rotates a shape the amount specified by the angle \r\n   *   parameter. This function accounts for angleMode, \r\n   *   so angles can be entered in either RADIANS or \r\n   *   DEGREES.  Objects are always rotated around their \r\n   *   relative position to the origin and positive \r\n   *   numbers rotate objects in a clockwise direction. \r\n   *   Transformations apply to everything that happens \r\n   *   after and subsequent calls to the function \r\n   *   accumulates the effect. For example, calling \r\n   *   rotate(HALF_PI) and then rotate(HALF_PI) is the \r\n   *   same as rotate(PI). All tranformations are reset \r\n   *   when draw() begins again. \r\n   * \r\n   *  \r\n   *   Technically, rotate() multiplies the current \r\n   *   transformation matrix by a rotation matrix. This \r\n   *   function can be further controlled by the push() \r\n   *   and pop().\r\n   *\r\n   *   @param angle the angle of rotation, specified in \r\n   *   radians or degrees, depending on current angleMode\r\n   *   @param [axis] (in 3d) the axis to rotate around\r\n   *   @chainable\r\n   */\r\n  rotate(angle: number, axis?: p5.Vector|number[]): p5\r\n  \r\n  /**\r\n   *   Rotates around X axis.\r\n   *\r\n   *   @param angle the angle of rotation, specified in \r\n   *   radians or degrees, depending on current angleMode\r\n   *   @chainable\r\n   */\r\n  rotateX(angle: number): p5\r\n  \r\n  /**\r\n   *   Rotates around Y axis.\r\n   *\r\n   *   @param angle the angle of rotation, specified in \r\n   *   radians or degrees, depending on current angleMode\r\n   *   @chainable\r\n   */\r\n  rotateY(angle: number): p5\r\n  \r\n  /**\r\n   *   Rotates around Z axis. Webgl mode only.\r\n   *\r\n   *   @param angle the angle of rotation, specified in \r\n   *   radians or degrees, depending on current angleMode\r\n   *   @chainable\r\n   */\r\n  rotateZ(angle: number): p5\r\n  \r\n  /**\r\n   *   Increases or decreases the size of a shape by \r\n   *   expanding and contracting vertices. Objects always \r\n   *   scale from their relative origin to the coordinate \r\n   *   system. Scale values are specified as decimal \r\n   *   percentages. For example, the function call \r\n   *   scale(2.0) increases the dimension of a shape by \r\n   *   200%.  Transformations apply to everything that \r\n   *   happens after and subsequent calls to the function \r\n   *   multiply the effect. For example, calling \r\n   *   scale(2.0) and then scale(1.5) is the same as \r\n   *   scale(3.0). If scale() is called within draw(), \r\n   *   the transformation is reset when the loop begins \r\n   *   again. \r\n   * \r\n   *  \r\n   *   Using this function with the z parameter is only \r\n   *   available in WEBGL mode. This function can be \r\n   *   further controlled with push() and pop().\r\n   *\r\n   *   @param s percent to scale the object, or \r\n   *   percentage to scale the object in the x-axis if \r\n   *   multiple arguments are given\r\n   *   @param [y] percent to scale the object in the \r\n   *   y-axis\r\n   *   @param [z] percent to scale the object in the \r\n   *   z-axis (webgl only)\r\n   *   @chainable\r\n   */\r\n  scale(s: number|p5.Vector|number[], y?: number, z?: number): p5\r\n  \r\n  /**\r\n   *   Increases or decreases the size of a shape by \r\n   *   expanding and contracting vertices. Objects always \r\n   *   scale from their relative origin to the coordinate \r\n   *   system. Scale values are specified as decimal \r\n   *   percentages. For example, the function call \r\n   *   scale(2.0) increases the dimension of a shape by \r\n   *   200%.  Transformations apply to everything that \r\n   *   happens after and subsequent calls to the function \r\n   *   multiply the effect. For example, calling \r\n   *   scale(2.0) and then scale(1.5) is the same as \r\n   *   scale(3.0). If scale() is called within draw(), \r\n   *   the transformation is reset when the loop begins \r\n   *   again. \r\n   * \r\n   *  \r\n   *   Using this function with the z parameter is only \r\n   *   available in WEBGL mode. This function can be \r\n   *   further controlled with push() and pop().\r\n   *\r\n   *   @param scales per-axis percents to scale the \r\n   *   object\r\n   *   @chainable\r\n   */\r\n  scale(scales: p5.Vector|number[]): p5\r\n  \r\n  /**\r\n   *   Shears a shape around the x-axis the amount \r\n   *   specified by the angle parameter. Angles should be \r\n   *   specified in the current angleMode. Objects are \r\n   *   always sheared around their relative position to \r\n   *   the origin and positive numbers shear objects in a \r\n   *   clockwise direction.  Transformations apply to \r\n   *   everything that happens after and subsequent calls \r\n   *   to the function accumulates the effect. For \r\n   *   example, calling shearX(PI/2) and then \r\n   *   shearX(PI/2) is the same as shearX(PI). If \r\n   *   shearX() is called within the draw(), the \r\n   *   transformation is reset when the loop begins \r\n   *   again. \r\n   * \r\n   *  \r\n   *   Technically, shearX() multiplies the current \r\n   *   transformation matrix by a rotation matrix. This \r\n   *   function can be further controlled by the push() \r\n   *   and pop() functions.\r\n   *\r\n   *   @param angle angle of shear specified in radians \r\n   *   or degrees, depending on current angleMode\r\n   *   @chainable\r\n   */\r\n  shearX(angle: number): p5\r\n  \r\n  /**\r\n   *   Shears a shape around the y-axis the amount \r\n   *   specified by the angle parameter. Angles should be \r\n   *   specified in the current angleMode. Objects are \r\n   *   always sheared around their relative position to \r\n   *   the origin and positive numbers shear objects in a \r\n   *   clockwise direction.  Transformations apply to \r\n   *   everything that happens after and subsequent calls \r\n   *   to the function accumulates the effect. For \r\n   *   example, calling shearY(PI/2) and then \r\n   *   shearY(PI/2) is the same as shearY(PI). If \r\n   *   shearY() is called within the draw(), the \r\n   *   transformation is reset when the loop begins \r\n   *   again. \r\n   * \r\n   *  \r\n   *   Technically, shearY() multiplies the current \r\n   *   transformation matrix by a rotation matrix. This \r\n   *   function can be further controlled by the push() \r\n   *   and pop() functions.\r\n   *\r\n   *   @param angle angle of shear specified in radians \r\n   *   or degrees, depending on current angleMode\r\n   *   @chainable\r\n   */\r\n  shearY(angle: number): p5\r\n  \r\n  /**\r\n   *   Specifies an amount to displace objects within the \r\n   *   display window. The x parameter specifies \r\n   *   left/right translation, the y parameter specifies \r\n   *   up/down translation.  Transformations are \r\n   *   cumulative and apply to everything that happens \r\n   *   after and subsequent calls to the function \r\n   *   accumulates the effect. For example, calling \r\n   *   translate(50, 0) and then translate(20, 0) is the \r\n   *   same as translate(70, 0). If translate() is called \r\n   *   within draw(), the transformation is reset when \r\n   *   the loop begins again. This function can be \r\n   *   further controlled by using push() and pop().\r\n   *\r\n   *   @param x left/right translation\r\n   *   @param y up/down translation\r\n   *   @param [z] forward/backward translation (webgl \r\n   *   only)\r\n   *   @chainable\r\n   */\r\n  translate(x: number, y: number, z?: number): p5\r\n  \r\n  /**\r\n   *   Specifies an amount to displace objects within the \r\n   *   display window. The x parameter specifies \r\n   *   left/right translation, the y parameter specifies \r\n   *   up/down translation.  Transformations are \r\n   *   cumulative and apply to everything that happens \r\n   *   after and subsequent calls to the function \r\n   *   accumulates the effect. For example, calling \r\n   *   translate(50, 0) and then translate(20, 0) is the \r\n   *   same as translate(70, 0). If translate() is called \r\n   *   within draw(), the transformation is reset when \r\n   *   the loop begins again. This function can be \r\n   *   further controlled by using push() and pop().\r\n   *\r\n   *   @param vector the vector to translate by\r\n   *   @chainable\r\n   */\r\n  translate(vector: p5.Vector): p5\r\n  \r\n  // src/core/vertex.js\r\n  \r\n  /**\r\n   *   Use the beginContour() and endContour() functions \r\n   *   to create negative shapes within shapes such as \r\n   *   the center of the letter 'O'. beginContour() \r\n   *   begins recording vertices for the shape and \r\n   *   endContour() stops recording. The vertices that \r\n   *   define a negative shape must \"wind\" in the \r\n   *   opposite direction from the exterior shape. First \r\n   *   draw vertices for the exterior clockwise order, \r\n   *   then for internal shapes, draw vertices shape in \r\n   *   counter-clockwise.  These functions can only be \r\n   *   used within a beginShape()/endShape() pair and \r\n   *   transformations such as translate(), rotate(), and \r\n   *   scale() do not work within a \r\n   *   beginContour()/endContour() pair. It is also not \r\n   *   possible to use other shapes, such as ellipse() or \r\n   *   rect() within.\r\n   *\r\n   *   @chainable\r\n   */\r\n  beginContour(): p5\r\n  \r\n  /**\r\n   *   Using the beginShape() and endShape() functions \r\n   *   allow creating more complex forms. beginShape() \r\n   *   begins recording vertices for a shape and \r\n   *   endShape() stops recording. The value of the kind \r\n   *   parameter tells it which types of shapes to create \r\n   *   from the provided vertices. With no mode \r\n   *   specified, the shape can be any irregular polygon.  \r\n   *   The parameters available for beginShape() are \r\n   *   POINTS, LINES, TRIANGLES, TRIANGLE_FAN, \r\n   *   TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After \r\n   *   calling the beginShape() function, a series of \r\n   *   vertex() commands must follow. To stop drawing the \r\n   *   shape, call endShape(). Each shape will be \r\n   *   outlined with the current stroke color and filled \r\n   *   with the fill color. \r\n   * \r\n   *  \r\n   *   Transformations such as translate(), rotate(), and \r\n   *   scale() do not work within beginShape(). It is \r\n   *   also not possible to use other shapes, such as \r\n   *   ellipse() or rect() within beginShape().\r\n   *\r\n   *   @param [kind] either POINTS, LINES, TRIANGLES, \r\n   *   TRIANGLE_FAN TRIANGLE_STRIP, QUADS, or QUAD_STRIP\r\n   *   @chainable\r\n   */\r\n  beginShape(kind?: BEGIN_KIND): p5\r\n  \r\n  /**\r\n   *   Specifies vertex coordinates for Bezier curves. \r\n   *   Each call to bezierVertex() defines the position \r\n   *   of two control points and one anchor point of a \r\n   *   Bezier curve, adding a new segment to a line or \r\n   *   shape.  The first time bezierVertex() is used \r\n   *   within a beginShape() call, it must be prefaced \r\n   *   with a call to vertex() to set the first anchor \r\n   *   point. This function must be used between \r\n   *   beginShape() and endShape() and only when there is \r\n   *   no MODE parameter specified to beginShape().\r\n   *\r\n   *   @param x2 x-coordinate for the first control point\r\n   *   @param y2 y-coordinate for the first control point\r\n   *   @param x3 x-coordinate for the second control \r\n   *   point\r\n   *   @param y3 y-coordinate for the second control \r\n   *   point\r\n   *   @param x4 x-coordinate for the anchor point\r\n   *   @param y4 y-coordinate for the anchor point\r\n   *   @chainable\r\n   */\r\n  bezierVertex(x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5\r\n  \r\n  /**\r\n   *   Specifies vertex coordinates for curves. This \r\n   *   function may only be used between beginShape() and \r\n   *   endShape() and only when there is no MODE \r\n   *   parameter specified to beginShape().  The first \r\n   *   and last points in a series of curveVertex() lines \r\n   *   will be used to guide the beginning and end of a \r\n   *   the curve. A minimum of four points is required to \r\n   *   draw a tiny curve between the second and third \r\n   *   points. Adding a fifth point with curveVertex() \r\n   *   will draw the curve between the second, third, and \r\n   *   fourth points. The curveVertex() function is an \r\n   *   implementation of Catmull-Rom splines.\r\n   *\r\n   *   @param x x-coordinate of the vertex\r\n   *   @param y y-coordinate of the vertex\r\n   *   @chainable\r\n   */\r\n  curveVertex(x: number, y: number): p5\r\n  \r\n  /**\r\n   *   Use the beginContour() and endContour() functions \r\n   *   to create negative shapes within shapes such as \r\n   *   the center of the letter 'O'. beginContour() \r\n   *   begins recording vertices for the shape and \r\n   *   endContour() stops recording. The vertices that \r\n   *   define a negative shape must \"wind\" in the \r\n   *   opposite direction from the exterior shape. First \r\n   *   draw vertices for the exterior clockwise order, \r\n   *   then for internal shapes, draw vertices shape in \r\n   *   counter-clockwise.  These functions can only be \r\n   *   used within a beginShape()/endShape() pair and \r\n   *   transformations such as translate(), rotate(), and \r\n   *   scale() do not work within a \r\n   *   beginContour()/endContour() pair. It is also not \r\n   *   possible to use other shapes, such as ellipse() or \r\n   *   rect() within.\r\n   *\r\n   *   @chainable\r\n   */\r\n  endContour(): p5\r\n  \r\n  /**\r\n   *   The endShape() function is the companion to \r\n   *   beginShape() and may only be called after \r\n   *   beginShape(). When endshape() is called, all of \r\n   *   image data defined since the previous call to \r\n   *   beginShape() is written into the image buffer. The \r\n   *   constant CLOSE as the value for the MODE parameter \r\n   *   to close the shape (to connect the beginning and \r\n   *   the end).\r\n   *\r\n   *   @param [mode] use CLOSE to close the shape\r\n   *   @chainable\r\n   */\r\n  endShape(mode?: END_MODE): p5\r\n  \r\n  /**\r\n   *   Specifies vertex coordinates for quadratic Bezier \r\n   *   curves. Each call to quadraticVertex() defines the \r\n   *   position of one control points and one anchor \r\n   *   point of a Bezier curve, adding a new segment to a \r\n   *   line or shape. The first time quadraticVertex() is \r\n   *   used within a beginShape() call, it must be \r\n   *   prefaced with a call to vertex() to set the first \r\n   *   anchor point. This function must be used between \r\n   *   beginShape() and endShape() and only when there is \r\n   *   no MODE parameter specified to beginShape().\r\n   *\r\n   *   @param cx x-coordinate for the control point\r\n   *   @param cy y-coordinate for the control point\r\n   *   @param x3 x-coordinate for the anchor point\r\n   *   @param y3 y-coordinate for the anchor point\r\n   *   @chainable\r\n   */\r\n  quadraticVertex(cx: number, cy: number, x3: number, y3: number): p5\r\n  \r\n  /**\r\n   *   All shapes are constructed by connecting a series \r\n   *   of vertices. vertex() is used to specify the \r\n   *   vertex coordinates for points, lines, triangles, \r\n   *   quads, and polygons. It is used exclusively within \r\n   *   the beginShape() and endShape() functions.\r\n   *\r\n   *   @param x x-coordinate of the vertex\r\n   *   @param y y-coordinate of the vertex\r\n   *   @chainable\r\n   */\r\n  vertex(x: number, y: number): p5\r\n  \r\n  /**\r\n   *   All shapes are constructed by connecting a series \r\n   *   of vertices. vertex() is used to specify the \r\n   *   vertex coordinates for points, lines, triangles, \r\n   *   quads, and polygons. It is used exclusively within \r\n   *   the beginShape() and endShape() functions.\r\n   *\r\n   *   @param x x-coordinate of the vertex\r\n   *   @param y y-coordinate of the vertex\r\n   *   @param [z] z-coordinate of the vertex\r\n   *   @param [u] the vertex's texture u-coordinate\r\n   *   @param [v] the vertex's texture v-coordinate\r\n   */\r\n  vertex(x: number, y: number, z?: number, u?: number, v?: number): void\r\n  \r\n  // src/data/p5.TypedDict.js\r\n  \r\n  /**\r\n   *   Creates a new instance of p5.StringDict using the \r\n   *   key, value pair or object you provide.\r\n   *\r\n   */\r\n  createStringDict(key: string, value: string): p5.StringDict\r\n  \r\n  /**\r\n   *   Creates a new instance of p5.StringDict using the \r\n   *   key, value pair or object you provide.\r\n   *\r\n   *   @param object object\r\n   */\r\n  createStringDict(object: object): p5.StringDict\r\n  \r\n  /**\r\n   *   Creates a new instance of p5.NumberDict using the \r\n   *   key, value pair or object you provide.\r\n   *\r\n   */\r\n  createNumberDict(key: number, value: number): p5.NumberDict\r\n  \r\n  /**\r\n   *   Creates a new instance of p5.NumberDict using the \r\n   *   key, value pair or object you provide.\r\n   *\r\n   *   @param object object\r\n   */\r\n  createNumberDict(object: object): p5.NumberDict\r\n  \r\n  // src/events/acceleration.js\r\n  \r\n  /**\r\n   *   The system variable deviceOrientation always \r\n   *   contains the orientation of the device. The value \r\n   *   of this variable will either be set 'landscape' or \r\n   *   'portrait'. If no data is available it will be set \r\n   *   to 'undefined'. either LANDSCAPE or PORTRAIT.\r\n   *\r\n   */\r\n  deviceOrientation: any\r\n  \r\n  /**\r\n   *   The system variable accelerationX always contains \r\n   *   the acceleration of the device along the x axis. \r\n   *   Value is represented as meters per second squared.\r\n   *\r\n   */\r\n  accelerationX: number\r\n  \r\n  /**\r\n   *   The system variable accelerationY always contains \r\n   *   the acceleration of the device along the y axis. \r\n   *   Value is represented as meters per second squared.\r\n   *\r\n   */\r\n  accelerationY: number\r\n  \r\n  /**\r\n   *   The system variable accelerationZ always contains \r\n   *   the acceleration of the device along the z axis. \r\n   *   Value is represented as meters per second squared.\r\n   *\r\n   */\r\n  accelerationZ: number\r\n  \r\n  /**\r\n   *   The system variable pAccelerationX always contains \r\n   *   the acceleration of the device along the x axis in \r\n   *   the frame previous to the current frame. Value is \r\n   *   represented as meters per second squared.\r\n   *\r\n   */\r\n  pAccelerationX: number\r\n  \r\n  /**\r\n   *   The system variable pAccelerationY always contains \r\n   *   the acceleration of the device along the y axis in \r\n   *   the frame previous to the current frame. Value is \r\n   *   represented as meters per second squared.\r\n   *\r\n   */\r\n  pAccelerationY: number\r\n  \r\n  /**\r\n   *   The system variable pAccelerationZ always contains \r\n   *   the acceleration of the device along the z axis in \r\n   *   the frame previous to the current frame. Value is \r\n   *   represented as meters per second squared.\r\n   *\r\n   */\r\n  pAccelerationZ: number\r\n  \r\n  /**\r\n   *   The system variable rotationX always contains the \r\n   *   rotation of the device along the x axis. Value is \r\n   *   represented as 0 to +/-180 degrees.  Note: The \r\n   *   order the rotations are called is important, ie. \r\n   *   if used together, it must be called in the order \r\n   *   Z-X-Y or there might be unexpected behaviour.\r\n   *\r\n   */\r\n  rotationX: number\r\n  \r\n  /**\r\n   *   The system variable rotationY always contains the \r\n   *   rotation of the device along the y axis. Value is \r\n   *   represented as 0 to +/-90 degrees.  Note: The \r\n   *   order the rotations are called is important, ie. \r\n   *   if used together, it must be called in the order \r\n   *   Z-X-Y or there might be unexpected behaviour.\r\n   *\r\n   */\r\n  rotationY: number\r\n  \r\n  /**\r\n   *   The system variable rotationZ always contains the \r\n   *   rotation of the device along the z axis. Value is \r\n   *   represented as 0 to 359 degrees.  Unlike rotationX \r\n   *   and rotationY, this variable is available for \r\n   *   devices with a built-in compass only. \r\n   * \r\n   *  \r\n   *   Note: The order the rotations are called is \r\n   *   important, ie. if used together, it must be called \r\n   *   in the order Z-X-Y or there might be unexpected \r\n   *   behaviour.\r\n   *\r\n   */\r\n  rotationZ: number\r\n  \r\n  /**\r\n   *   The system variable pRotationX always contains the \r\n   *   rotation of the device along the x axis in the \r\n   *   frame previous to the current frame. Value is \r\n   *   represented as 0 to +/-180 degrees.  pRotationX \r\n   *   can also be used with rotationX to determine the \r\n   *   rotate direction of the device along the X-axis.\r\n   *\r\n   */\r\n  pRotationX: number\r\n  \r\n  /**\r\n   *   The system variable pRotationY always contains the \r\n   *   rotation of the device along the y axis in the \r\n   *   frame previous to the current frame. Value is \r\n   *   represented as 0 to +/-90 degrees.  pRotationY can \r\n   *   also be used with rotationY to determine the \r\n   *   rotate direction of the device along the Y-axis.\r\n   *\r\n   */\r\n  pRotationY: number\r\n  \r\n  /**\r\n   *   The system variable pRotationZ always contains the \r\n   *   rotation of the device along the z axis in the \r\n   *   frame previous to the current frame. Value is \r\n   *   represented as 0 to 359 degrees.  pRotationZ can \r\n   *   also be used with rotationZ to determine the \r\n   *   rotate direction of the device along the Z-axis.\r\n   *\r\n   */\r\n  pRotationZ: number\r\n  turnAxis: string\r\n  \r\n  /**\r\n   *   The setMoveThreshold() function is used to set the \r\n   *   movement threshold for the deviceMoved() function. \r\n   *   The default threshold is set to 0.5.\r\n   *\r\n   *   @param value The threshold value\r\n   */\r\n  setMoveThreshold(value: number): void\r\n  \r\n  /**\r\n   *   The setShakeThreshold() function is used to set \r\n   *   the movement threshold for the deviceShaken() \r\n   *   function. The default threshold is set to 30.\r\n   *\r\n   *   @param value The threshold value\r\n   */\r\n  setShakeThreshold(value: number): void\r\n  \r\n  /**\r\n   *   The deviceMoved() function is called when the \r\n   *   device is moved by more than the threshold value \r\n   *   along X, Y or Z axis. The default threshold is set \r\n   *   to 0.5.\r\n   *\r\n   */\r\n  deviceMoved(): void\r\n  \r\n  /**\r\n   *   The deviceTurned() function is called when the \r\n   *   device rotates by more than 90 degrees \r\n   *   continuously.  The axis that triggers the \r\n   *   deviceTurned() method is stored in the turnAxis \r\n   *   variable. The deviceTurned() method can be locked \r\n   *   to trigger on any axis: X, Y or Z by comparing the \r\n   *   turnAxis variable to 'X', 'Y' or 'Z'.\r\n   *\r\n   */\r\n  deviceTurned(): void\r\n  \r\n  /**\r\n   *   The deviceShaken() function is called when the \r\n   *   device total acceleration changes of accelerationX \r\n   *   and accelerationY values is more than the \r\n   *   threshold value. The default threshold is set to \r\n   *   30.\r\n   *\r\n   */\r\n  deviceShaken(): void\r\n  \r\n  // src/events/keyboard.js\r\n  \r\n  /**\r\n   *   The boolean system variable keyIsPressed is true \r\n   *   if any key is pressed and false if no keys are \r\n   *   pressed.\r\n   *\r\n   */\r\n  keyIsPressed: boolean\r\n  \r\n  /**\r\n   *   The system variable key always contains the value \r\n   *   of the most recent key on the keyboard that was \r\n   *   typed. To get the proper capitalization, it is \r\n   *   best to use it within keyTyped(). For non-ASCII \r\n   *   keys, use the keyCode variable.\r\n   *\r\n   */\r\n  key: string\r\n  \r\n  /**\r\n   *   The variable keyCode is used to detect special \r\n   *   keys such as BACKSPACE, DELETE, ENTER, RETURN, \r\n   *   TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, \r\n   *   UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. You \r\n   *   can also check for custom keys by looking up the \r\n   *   keyCode of any key on a site like this: \r\n   *   keycode.info.\r\n   *\r\n   */\r\n  keyCode: number\r\n  \r\n  /**\r\n   *   The keyPressed() function is called once every \r\n   *   time a key is pressed. The keyCode for the key \r\n   *   that was pressed is stored in the keyCode \r\n   *   variable.  For non-ASCII keys, use the keyCode \r\n   *   variable. You can check if the keyCode equals \r\n   *   BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, \r\n   *   SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, \r\n   *   LEFT_ARROW, RIGHT_ARROW. \r\n   * \r\n   *  \r\n   *   For ASCII keys that was pressed is stored in the \r\n   *   key variable. However, it does not distinguish \r\n   *   between uppercase and lowercase. For this reason, \r\n   *   it is recommended to use keyTyped() to read the \r\n   *   key variable, in which the case of the variable \r\n   *   will be distinguished. \r\n   * \r\n   *  \r\n   *   Because of how operating systems handle key \r\n   *   repeats, holding down a key may cause multiple \r\n   *   calls to keyTyped() (and keyReleased() as well). \r\n   *   The rate of repeat is set by the operating system \r\n   *   and how each computer is configured.\r\n   * \r\n   *  \r\n   *   Browsers may have different default behaviors \r\n   *   attached to various key events. To prevent any \r\n   *   default behavior for this event, add \"return \r\n   *   false\" to the end of the method.\r\n   *\r\n   */\r\n  keyPressed(): void\r\n  \r\n  /**\r\n   *   The keyReleased() function is called once every \r\n   *   time a key is released. See key and keyCode for \r\n   *   more information. Browsers may have different \r\n   *   default behaviors attached to various key events. \r\n   *   To prevent any default behavior for this event, \r\n   *   add \"return false\" to the end of the method.\r\n   *\r\n   */\r\n  keyReleased(): void\r\n  \r\n  /**\r\n   *   The keyTyped() function is called once every time \r\n   *   a key is pressed, but action keys such as Ctrl, \r\n   *   Shift, and Alt are ignored. The most recent key \r\n   *   pressed will be stored in the key variable.  \r\n   *   Because of how operating systems handle key \r\n   *   repeats, holding down a key will cause multiple \r\n   *   calls to keyTyped() (and keyReleased() as well). \r\n   *   The rate of repeat is set by the operating system \r\n   *   and how each computer is configured.\r\n   * \r\n   *  \r\n   *   Browsers may have different default behaviors \r\n   *   attached to various key events. To prevent any \r\n   *   default behavior for this event, add \"return \r\n   *   false\" to the end of the method.\r\n   *\r\n   */\r\n  keyTyped(): void\r\n  \r\n  /**\r\n   *   The keyIsDown() function checks if the key is \r\n   *   currently down, i.e. pressed. It can be used if \r\n   *   you have an object that moves, and you want \r\n   *   several keys to be able to affect its behaviour \r\n   *   simultaneously, such as moving a sprite \r\n   *   diagonally. You can put in any number representing \r\n   *   the keyCode of the key, or use any of the variable \r\n   *   keyCode names listed here.\r\n   *\r\n   *   @param code The key to check for.\r\n   *   @return whether key is down or not\r\n   */\r\n  keyIsDown(code: number): boolean\r\n  \r\n  // src/events/mouse.js\r\n  \r\n  /**\r\n   *   The system variable mouseX always contains the \r\n   *   current horizontal position of the mouse, relative \r\n   *   to (0, 0) of the canvas. If touch is used instead \r\n   *   of mouse input, mouseX will hold the x value of \r\n   *   the most recent touch point.\r\n   *\r\n   */\r\n  mouseX: number\r\n  \r\n  /**\r\n   *   The system variable mouseY always contains the \r\n   *   current vertical position of the mouse, relative \r\n   *   to (0, 0) of the canvas. If touch is used instead \r\n   *   of mouse input, mouseY will hold the y value of \r\n   *   the most recent touch point.\r\n   *\r\n   */\r\n  mouseY: number\r\n  \r\n  /**\r\n   *   The system variable pmouseX always contains the \r\n   *   horizontal position of the mouse or finger in the \r\n   *   frame previous to the current frame, relative to \r\n   *   (0, 0) of the canvas.\r\n   *\r\n   */\r\n  pmouseX: number\r\n  \r\n  /**\r\n   *   The system variable pmouseY always contains the \r\n   *   vertical position of the mouse or finger in the \r\n   *   frame previous to the current frame, relative to \r\n   *   (0, 0) of the canvas.\r\n   *\r\n   */\r\n  pmouseY: number\r\n  \r\n  /**\r\n   *   The system variable winMouseX always contains the \r\n   *   current horizontal position of the mouse, relative \r\n   *   to (0, 0) of the window.\r\n   *\r\n   */\r\n  winMouseX: number\r\n  \r\n  /**\r\n   *   The system variable winMouseY always contains the \r\n   *   current vertical position of the mouse, relative \r\n   *   to (0, 0) of the window.\r\n   *\r\n   */\r\n  winMouseY: number\r\n  \r\n  /**\r\n   *   The system variable pwinMouseX always contains the \r\n   *   horizontal position of the mouse in the frame \r\n   *   previous to the current frame, relative to (0, 0) \r\n   *   of the window.\r\n   *\r\n   */\r\n  pwinMouseX: number\r\n  \r\n  /**\r\n   *   The system variable pwinMouseY always contains the \r\n   *   vertical position of the mouse in the frame \r\n   *   previous to the current frame, relative to (0, 0) \r\n   *   of the window.\r\n   *\r\n   */\r\n  pwinMouseY: number\r\n  \r\n  /**\r\n   *   Processing automatically tracks if the mouse \r\n   *   button is pressed and which button is pressed. The \r\n   *   value of the system variable mouseButton is either \r\n   *   LEFT, RIGHT, or CENTER depending on which button \r\n   *   was pressed last. Warning: different browsers may \r\n   *   track mouseButton differently.\r\n   *\r\n   */\r\n  mouseButton: any\r\n  \r\n  /**\r\n   *   The boolean system variable mouseIsPressed is true \r\n   *   if the mouse is pressed and false if not.\r\n   *\r\n   */\r\n  mouseIsPressed: boolean\r\n  \r\n  /**\r\n   *   The mouseMoved() function is called every time the \r\n   *   mouse moves and a mouse button is not pressed. \r\n   *   Browsers may have different default behaviors \r\n   *   attached to various mouse events. To prevent any \r\n   *   default behavior for this event, add \"return \r\n   *   false\" to the end of the method.\r\n   *\r\n   */\r\n  mouseMoved(): void\r\n  \r\n  /**\r\n   *   The mouseDragged() function is called once every \r\n   *   time the mouse moves and a mouse button is \r\n   *   pressed. If no mouseDragged() function is defined, \r\n   *   the touchMoved() function will be called instead \r\n   *   if it is defined. Browsers may have different \r\n   *   default behaviors attached to various mouse \r\n   *   events. To prevent any default behavior for this \r\n   *   event, add \"return false\" to the end of the \r\n   *   method.\r\n   *\r\n   */\r\n  mouseDragged(): void\r\n  \r\n  /**\r\n   *   The mousePressed() function is called once after \r\n   *   every time a mouse button is pressed. The \r\n   *   mouseButton variable (see the related reference \r\n   *   entry) can be used to determine which button has \r\n   *   been pressed. If no mousePressed() function is \r\n   *   defined, the touchStarted() function will be \r\n   *   called instead if it is defined. Browsers may have \r\n   *   different default behaviors attached to various \r\n   *   mouse events. To prevent any default behavior for \r\n   *   this event, add \"return false\" to the end of the \r\n   *   method.\r\n   *\r\n   */\r\n  mousePressed(): void\r\n  \r\n  /**\r\n   *   The mouseReleased() function is called every time \r\n   *   a mouse button is released. If no mouseReleased() \r\n   *   function is defined, the touchEnded() function \r\n   *   will be called instead if it is defined. Browsers \r\n   *   may have different default behaviors attached to \r\n   *   various mouse events. To prevent any default \r\n   *   behavior for this event, add \"return false\" to the \r\n   *   end of the method.\r\n   *\r\n   */\r\n  mouseReleased(): void\r\n  \r\n  /**\r\n   *   The mouseClicked() function is called once after a \r\n   *   mouse button has been pressed and then released. \r\n   *   Browsers handle clicks differently, so this \r\n   *   function is only guaranteed to be run when the \r\n   *   left mouse button is clicked. To handle other \r\n   *   mouse buttons being pressed or released, see \r\n   *   mousePressed() or mouseReleased().\r\n   * \r\n   *  \r\n   *   Browsers may have different default behaviors \r\n   *   attached to various mouse events. To prevent any \r\n   *   default behavior for this event, add \"return \r\n   *   false\" to the end of the method.\r\n   *\r\n   */\r\n  mouseClicked(): void\r\n  \r\n  /**\r\n   *   The doubleClicked() function is executed every \r\n   *   time a event listener has detected a dblclick \r\n   *   event which is a part of the DOM L3 specification. \r\n   *   The doubleClicked event is fired when a pointing \r\n   *   device button (usually a mouse's primary button) \r\n   *   is clicked twice on a single element. For more \r\n   *   info on the dblclick event refer to mozilla's \r\n   *   documentation here: \r\n   *   https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\r\n   *\r\n   */\r\n  doubleClicked(): void\r\n  \r\n  /**\r\n   *   The function mouseWheel() is executed every time a \r\n   *   vertical mouse wheel event is detected either \r\n   *   triggered by an actual mouse wheel or by a \r\n   *   touchpad. The event.delta property returns the \r\n   *   amount the mouse wheel have scrolled. The values \r\n   *   can be positive or negative depending on the \r\n   *   scroll direction (on OS X with \"natural\" scrolling \r\n   *   enabled, the signs are inverted).\r\n   * \r\n   *  \r\n   *   Browsers may have different default behaviors \r\n   *   attached to various mouse events. To prevent any \r\n   *   default behavior for this event, add \"return \r\n   *   false\" to the end of the method.\r\n   * \r\n   *  \r\n   *   Due to the current support of the \"wheel\" event on \r\n   *   Safari, the function may only work as expected if \r\n   *   \"return false\" is included while using Safari.\r\n   *\r\n   */\r\n  mouseWheel(): void\r\n  \r\n  // src/events/touch.js\r\n  \r\n  /**\r\n   *   The system variable touches[] contains an array of \r\n   *   the positions of all current touch points, \r\n   *   relative to (0, 0) of the canvas, and IDs \r\n   *   identifying a unique touch as it moves. Each \r\n   *   element in the array is an object with x, y, and \r\n   *   id properties. The touches[] array is not \r\n   *   supported on Safari and IE on touch-based desktops \r\n   *   (laptops).\r\n   *\r\n   */\r\n  touches: object[]\r\n  \r\n  /**\r\n   *   The touchStarted() function is called once after \r\n   *   every time a touch is registered. If no \r\n   *   touchStarted() function is defined, the \r\n   *   mousePressed() function will be called instead if \r\n   *   it is defined. Browsers may have different default \r\n   *   behaviors attached to various touch events. To \r\n   *   prevent any default behavior for this event, add \r\n   *   \"return false\" to the end of the method.\r\n   *\r\n   */\r\n  touchStarted(): void\r\n  \r\n  /**\r\n   *   The touchMoved() function is called every time a \r\n   *   touch move is registered. If no touchMoved() \r\n   *   function is defined, the mouseDragged() function \r\n   *   will be called instead if it is defined. Browsers \r\n   *   may have different default behaviors attached to \r\n   *   various touch events. To prevent any default \r\n   *   behavior for this event, add \"return false\" to the \r\n   *   end of the method.\r\n   *\r\n   */\r\n  touchMoved(): void\r\n  \r\n  /**\r\n   *   The touchEnded() function is called every time a \r\n   *   touch ends. If no touchEnded() function is \r\n   *   defined, the mouseReleased() function will be \r\n   *   called instead if it is defined. Browsers may have \r\n   *   different default behaviors attached to various \r\n   *   touch events. To prevent any default behavior for \r\n   *   this event, add \"return false\" to the end of the \r\n   *   method.\r\n   *\r\n   */\r\n  touchEnded(): void\r\n  \r\n  // src/image/image.js\r\n  \r\n  /**\r\n   *   Creates a new p5.Image (the datatype for storing \r\n   *   images). This provides a fresh buffer of pixels to \r\n   *   play with. Set the size of the buffer with the \r\n   *   width and height parameters.  .pixels gives access \r\n   *   to an array containing the values for all the \r\n   *   pixels in the display window. These values are \r\n   *   numbers. This array is the size (including an \r\n   *   appropriate factor for the pixelDensity) of the \r\n   *   display window x4, representing the R, G, B, A \r\n   *   values in order for each pixel, moving from left \r\n   *   to right across each row, then down each column. \r\n   *   See .pixels for more info. It may also be simpler \r\n   *   to use set() or get(). \r\n   * \r\n   *  \r\n   *   Before accessing the pixels of an image, the data \r\n   *   must loaded with the loadPixels() function. After \r\n   *   the array data has been modified, the \r\n   *   updatePixels() function must be run to update the \r\n   *   changes.\r\n   *\r\n   *   @param width width in pixels\r\n   *   @param height height in pixels\r\n   *   @return the p5.Image object\r\n   */\r\n  createImage(width: number, height: number): p5.Image\r\n  \r\n  /**\r\n   *   Save the current canvas as an image. In Safari, \r\n   *   this will open the image in the window and the \r\n   *   user must provide their own filename on save-as. \r\n   *   Other browsers will either save the file \r\n   *   immediately, or prompt the user with a dialogue \r\n   *   window.\r\n   *\r\n   *   @param selectedCanvas a variable representing a \r\n   *   specific html5 canvas (optional)\r\n   *   @param [extension] 'jpg' or 'png'\r\n   */\r\n  saveCanvas(selectedCanvas: p5.Element|HTMLCanvasElement, filename?: string, extension?: string): void\r\n  \r\n  /**\r\n   *   Save the current canvas as an image. In Safari, \r\n   *   this will open the image in the window and the \r\n   *   user must provide their own filename on save-as. \r\n   *   Other browsers will either save the file \r\n   *   immediately, or prompt the user with a dialogue \r\n   *   window.\r\n   *\r\n   *   @param [extension] 'jpg' or 'png'\r\n   */\r\n  saveCanvas(filename?: string, extension?: string): void\r\n  \r\n  /**\r\n   *   Capture a sequence of frames that can be used to \r\n   *   create a movie. Accepts a callback. For example, \r\n   *   you may wish to send the frames to a server where \r\n   *   they can be stored or converted into a movie. If \r\n   *   no callback is provided, the browser will pop up \r\n   *   save dialogues in an attempt to download all of \r\n   *   the images that have just been created. With the \r\n   *   callback provided the image data isn't saved by \r\n   *   default but instead passed as an argument to the \r\n   *   callback function as an array of objects, with the \r\n   *   size of array equal to the total number of frames. \r\n   *   Note that saveFrames() will only save the first 15 \r\n   *   frames of an animation. To export longer \r\n   *   animations, you might look into a library like \r\n   *   ccapture.js.\r\n   *\r\n   *   @param extension 'jpg' or 'png'\r\n   *   @param duration Duration in seconds to save the \r\n   *   frames for.\r\n   *   @param framerate Framerate to save the frames in.\r\n   *   @param [callback] A callback function that will be \r\n   *   executed to handle the image data. This function \r\n   *   should accept an array as argument. The array will \r\n   *   contain the specified number of frames of objects. \r\n   *   Each object has three properties: imageData - an \r\n   *   image/octet-stream, filename and extension.\r\n   */\r\n  saveFrames(filename: string, extension: string, duration: number, framerate: number, callback?: (p1: any[]) => any): void\r\n  \r\n  // src/image/loading_displaying.js\r\n  \r\n  /**\r\n   *   Loads an image from a path and creates a p5.Image \r\n   *   from it.  The image may not be immediately \r\n   *   available for rendering If you want to ensure that \r\n   *   the image is ready before doing anything with it, \r\n   *   place the loadImage() call in preload(). You may \r\n   *   also supply a callback function to handle the \r\n   *   image when it's ready. \r\n   * \r\n   *  \r\n   *   The path to the image should be relative to the \r\n   *   HTML file that links in your sketch. Loading an \r\n   *   image from a URL or other remote location may be \r\n   *   blocked due to your browser's built-in security.\r\n   *\r\n   *   @param path Path of the image to be loaded\r\n   *   @param [successCallback] Function to be called \r\n   *   once the image is loaded. Will be passed the \r\n   *   p5.Image.\r\n   *   @param [failureCallback] called with event error \r\n   *   if the image fails to load.\r\n   *   @return the p5.Image object\r\n   */\r\n  loadImage(path: string, successCallback?: (p1: p5.Image) => any, failureCallback?: (p1: Event) => any): p5.Image\r\n  \r\n  /**\r\n   *   Draw an image to the p5.js canvas. This function \r\n   *   can be used with different numbers of parameters. \r\n   *   The simplest use requires only three parameters: \r\n   *   img, x, and y—where (x, y) is the position of the \r\n   *   image. Two more parameters can optionally be added \r\n   *   to specify the width and height of the image. \r\n   * \r\n   *   This function can also be used with all eight \r\n   *   Number parameters. To differentiate between all \r\n   *   these parameters, p5.js uses the language of \r\n   *   \"destination rectangle\" (which corresponds to \r\n   *   \"dx\", \"dy\", etc.) and \"source image\" (which \r\n   *   corresponds to \"sx\", \"sy\", etc.) below. Specifying \r\n   *   the \"source image\" dimensions can be useful when \r\n   *   you want to display a subsection of the source \r\n   *   image instead of the whole thing. Here's a diagram \r\n   *   to explain further:\r\n   *\r\n   *   @param img the image to display\r\n   *   @param x the x-coordinate of the top-left corner \r\n   *   of the image\r\n   *   @param y the y-coordinate of the top-left corner \r\n   *   of the image\r\n   *   @param [width] the width to draw the image\r\n   *   @param [height] the height to draw the image\r\n   */\r\n  image(img: p5.Image|p5.Element, x: number, y: number, width?: number, height?: number): void\r\n  \r\n  /**\r\n   *   Draw an image to the p5.js canvas. This function \r\n   *   can be used with different numbers of parameters. \r\n   *   The simplest use requires only three parameters: \r\n   *   img, x, and y—where (x, y) is the position of the \r\n   *   image. Two more parameters can optionally be added \r\n   *   to specify the width and height of the image. \r\n   * \r\n   *   This function can also be used with all eight \r\n   *   Number parameters. To differentiate between all \r\n   *   these parameters, p5.js uses the language of \r\n   *   \"destination rectangle\" (which corresponds to \r\n   *   \"dx\", \"dy\", etc.) and \"source image\" (which \r\n   *   corresponds to \"sx\", \"sy\", etc.) below. Specifying \r\n   *   the \"source image\" dimensions can be useful when \r\n   *   you want to display a subsection of the source \r\n   *   image instead of the whole thing. Here's a diagram \r\n   *   to explain further:\r\n   *\r\n   *   @param img the image to display\r\n   *   @param dx the x-coordinate of the destination \r\n   *   rectangle in which to draw the source image\r\n   *   @param dy the y-coordinate of the destination \r\n   *   rectangle in which to draw the source image\r\n   *   @param dWidth the width of the destination \r\n   *   rectangle\r\n   *   @param dHeight the height of the destination \r\n   *   rectangle\r\n   *   @param sx the x-coordinate of the subsection of \r\n   *   the source image to draw into the destination \r\n   *   rectangle\r\n   *   @param sy the y-coordinate of the subsection of \r\n   *   the source image to draw into the destination \r\n   *   rectangle\r\n   *   @param [sWidth] the width of the subsection of the \r\n   *   source image to draw into the destination \r\n   *   rectangle\r\n   *   @param [sHeight] the height of the subsection of \r\n   *   the source image to draw into the destination \r\n   *   rectangle\r\n   */\r\n  image(img: p5.Image|p5.Element, dx: number, dy: number, dWidth: number, dHeight: number, sx: number, sy: number, sWidth?: number, sHeight?: number): void\r\n  \r\n  /**\r\n   *   Sets the fill value for displaying images. Images \r\n   *   can be tinted to specified colors or made \r\n   *   transparent by including an alpha value.  To apply \r\n   *   transparency to an image without affecting its \r\n   *   color, use white as the tint color and specify an \r\n   *   alpha value. For instance, tint(255, 128) will \r\n   *   make an image 50% transparent (assuming the \r\n   *   default alpha range of 0-255, which can be changed \r\n   *   with colorMode()). \r\n   * \r\n   *  \r\n   *   The value for the gray parameter must be less than \r\n   *   or equal to the current maximum value as specified \r\n   *   by colorMode(). The default maximum value is 255.\r\n   *\r\n   *   @param v1 red or hue value relative to the current \r\n   *   color range\r\n   *   @param v2 green or saturation value relative to \r\n   *   the current color range\r\n   *   @param v3 blue or brightness value relative to the \r\n   *   current color range\r\n   */\r\n  tint(v1: number, v2: number, v3: number, alpha?: number): void\r\n  \r\n  /**\r\n   *   Sets the fill value for displaying images. Images \r\n   *   can be tinted to specified colors or made \r\n   *   transparent by including an alpha value.  To apply \r\n   *   transparency to an image without affecting its \r\n   *   color, use white as the tint color and specify an \r\n   *   alpha value. For instance, tint(255, 128) will \r\n   *   make an image 50% transparent (assuming the \r\n   *   default alpha range of 0-255, which can be changed \r\n   *   with colorMode()). \r\n   * \r\n   *  \r\n   *   The value for the gray parameter must be less than \r\n   *   or equal to the current maximum value as specified \r\n   *   by colorMode(). The default maximum value is 255.\r\n   *\r\n   *   @param value a color string\r\n   */\r\n  tint(value: string): void\r\n  \r\n  /**\r\n   *   Sets the fill value for displaying images. Images \r\n   *   can be tinted to specified colors or made \r\n   *   transparent by including an alpha value.  To apply \r\n   *   transparency to an image without affecting its \r\n   *   color, use white as the tint color and specify an \r\n   *   alpha value. For instance, tint(255, 128) will \r\n   *   make an image 50% transparent (assuming the \r\n   *   default alpha range of 0-255, which can be changed \r\n   *   with colorMode()). \r\n   * \r\n   *  \r\n   *   The value for the gray parameter must be less than \r\n   *   or equal to the current maximum value as specified \r\n   *   by colorMode(). The default maximum value is 255.\r\n   *\r\n   *   @param gray a gray value\r\n   */\r\n  tint(gray: number, alpha?: number): void\r\n  \r\n  /**\r\n   *   Sets the fill value for displaying images. Images \r\n   *   can be tinted to specified colors or made \r\n   *   transparent by including an alpha value.  To apply \r\n   *   transparency to an image without affecting its \r\n   *   color, use white as the tint color and specify an \r\n   *   alpha value. For instance, tint(255, 128) will \r\n   *   make an image 50% transparent (assuming the \r\n   *   default alpha range of 0-255, which can be changed \r\n   *   with colorMode()). \r\n   * \r\n   *  \r\n   *   The value for the gray parameter must be less than \r\n   *   or equal to the current maximum value as specified \r\n   *   by colorMode(). The default maximum value is 255.\r\n   *\r\n   *   @param values an array containing the \r\n   *   red,green,blue & and alpha components of the color\r\n   */\r\n  tint(values: number[]): void\r\n  \r\n  /**\r\n   *   Sets the fill value for displaying images. Images \r\n   *   can be tinted to specified colors or made \r\n   *   transparent by including an alpha value.  To apply \r\n   *   transparency to an image without affecting its \r\n   *   color, use white as the tint color and specify an \r\n   *   alpha value. For instance, tint(255, 128) will \r\n   *   make an image 50% transparent (assuming the \r\n   *   default alpha range of 0-255, which can be changed \r\n   *   with colorMode()). \r\n   * \r\n   *  \r\n   *   The value for the gray parameter must be less than \r\n   *   or equal to the current maximum value as specified \r\n   *   by colorMode(). The default maximum value is 255.\r\n   *\r\n   *   @param color the tint color\r\n   */\r\n  tint(color: p5.Color): void\r\n  \r\n  /**\r\n   *   Removes the current fill value for displaying \r\n   *   images and reverts to displaying images with their \r\n   *   original hues.\r\n   *\r\n   */\r\n  noTint(): void\r\n  \r\n  /**\r\n   *   Set image mode. Modifies the location from which \r\n   *   images are drawn by changing the way in which \r\n   *   parameters given to image() are interpreted. The \r\n   *   default mode is imageMode(CORNER), which \r\n   *   interprets the second and third parameters of \r\n   *   image() as the upper-left corner of the image. If \r\n   *   two additional parameters are specified, they are \r\n   *   used to set the image's width and height.  \r\n   *   imageMode(CORNERS) interprets the second and third \r\n   *   parameters of image() as the location of one \r\n   *   corner, and the fourth and fifth parameters as the \r\n   *   opposite corner. \r\n   * \r\n   *  \r\n   *   imageMode(CENTER) interprets the second and third \r\n   *   parameters of image() as the image's center point. \r\n   *   If two additional parameters are specified, they \r\n   *   are used to set the image's width and height.\r\n   *\r\n   *   @param mode either CORNER, CORNERS, or CENTER\r\n   */\r\n  imageMode(mode: IMAGE_MODE): void\r\n  \r\n  // src/image/pixels.js\r\n  \r\n  /**\r\n   *   Uint8ClampedArray containing the values for all \r\n   *   the pixels in the display window. These values are \r\n   *   numbers. This array is the size (include an \r\n   *   appropriate factor for pixelDensity) of the \r\n   *   display window x4, representing the R, G, B, A \r\n   *   values in order for each pixel, moving from left \r\n   *   to right across each row, then down each column. \r\n   *   Retina and other high density displays will have \r\n   *   more pixels[] (by a factor of pixelDensity^2). For \r\n   *   example, if the image is 100x100 pixels, there \r\n   *   will be 40,000. On a retina display, there will be \r\n   *   160,000.  The first four values (indices 0-3) in \r\n   *   the array will be the R, G, B, A values of the \r\n   *   pixel at (0, 0). The second four values (indices \r\n   *   4-7) will contain the R, G, B, A values of the \r\n   *   pixel at (1, 0). More generally, to set values for \r\n   *   a pixel at (x, y): \r\n   * \r\n   *   var d = pixelDensity(); for (var i = 0; i < d; \r\n   *   i++) { for (var j = 0; j < d; j++) { // loop over \r\n   *   idx = 4 * ((y * d + j) * width * d + (x * d + i)); \r\n   *   pixels[idx] = r; pixels[idx+1] = g; pixels[idx+2] \r\n   *   = b; pixels[idx+3] = a; } }  \r\n   * \r\n   *   While the above method is complex, it is flexible \r\n   *   enough to work with any pixelDensity. Note that \r\n   *   set() will automatically take care of setting all \r\n   *   the appropriate values in pixels[] for a given (x, \r\n   *   y) at any pixelDensity, but the performance may \r\n   *   not be as fast when lots of modifications are made \r\n   *   to the pixel array. \r\n   * \r\n   *  \r\n   *   Before accessing this array, the data must loaded \r\n   *   with the loadPixels() function. After the array \r\n   *   data has been modified, the updatePixels() \r\n   *   function must be run to update the changes. \r\n   * \r\n   *  \r\n   *   Note that this is not a standard javascript array. \r\n   *   This means that standard javascript functions such \r\n   *   as slice() or arrayCopy() do not work.\r\n   *\r\n   */\r\n  pixels: number[]\r\n  \r\n  /**\r\n   *   Copies a region of pixels from one image to \r\n   *   another, using a specified blend mode to do the \r\n   *   operation.\r\n   *\r\n   *   @param srcImage source image\r\n   *   @param sx X coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sy Y coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sw source image width\r\n   *   @param sh source image height\r\n   *   @param dx X coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dy Y coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dw destination image width\r\n   *   @param dh destination image height\r\n   *   @param blendMode the blend mode. either BLEND, \r\n   *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \r\n   *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \r\n   *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\r\n   */\r\n  blend(srcImage: p5.Image, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number, blendMode: BLEND_MODE): void\r\n  \r\n  /**\r\n   *   Copies a region of pixels from one image to \r\n   *   another, using a specified blend mode to do the \r\n   *   operation.\r\n   *\r\n   *   @param sx X coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sy Y coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sw source image width\r\n   *   @param sh source image height\r\n   *   @param dx X coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dy Y coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dw destination image width\r\n   *   @param dh destination image height\r\n   *   @param blendMode the blend mode. either BLEND, \r\n   *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \r\n   *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \r\n   *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\r\n   */\r\n  blend(sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number, blendMode: any): void\r\n  \r\n  /**\r\n   *   Copies a region of the canvas to another region of \r\n   *   the canvas and copies a region of pixels from an \r\n   *   image used as the srcImg parameter into the canvas \r\n   *   srcImage is specified this is used as the source. \r\n   *   If the source and destination regions aren't the \r\n   *   same size, it will automatically resize source \r\n   *   pixels to fit the specified target region.\r\n   *\r\n   *   @param srcImage source image\r\n   *   @param sx X coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sy Y coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sw source image width\r\n   *   @param sh source image height\r\n   *   @param dx X coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dy Y coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dw destination image width\r\n   *   @param dh destination image height\r\n   */\r\n  copy(srcImage: p5.Image|p5.Element, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void\r\n  \r\n  /**\r\n   *   Copies a region of the canvas to another region of \r\n   *   the canvas and copies a region of pixels from an \r\n   *   image used as the srcImg parameter into the canvas \r\n   *   srcImage is specified this is used as the source. \r\n   *   If the source and destination regions aren't the \r\n   *   same size, it will automatically resize source \r\n   *   pixels to fit the specified target region.\r\n   *\r\n   *   @param sx X coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sy Y coordinate of the source's upper left \r\n   *   corner\r\n   *   @param sw source image width\r\n   *   @param sh source image height\r\n   *   @param dx X coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dy Y coordinate of the destination's upper \r\n   *   left corner\r\n   *   @param dw destination image width\r\n   *   @param dh destination image height\r\n   */\r\n  copy(sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void\r\n  \r\n  /**\r\n   *   Applies a filter to the canvas.  \r\n   * \r\n   *   The presets options are: \r\n   * \r\n   *  \r\n   * \r\n   *   THRESHOLD Converts the image to black and white \r\n   *   pixels depending if they are above or below the \r\n   *   threshold defined by the level parameter. The \r\n   *   parameter must be between 0.0 (black) and 1.0 \r\n   *   (white). If no level is specified, 0.5 is used. \r\n   * \r\n   *  \r\n   * \r\n   *   GRAY Converts any colors in the image to grayscale \r\n   *   equivalents. No parameter is used. \r\n   * \r\n   *  \r\n   * \r\n   *   OPAQUE Sets the alpha channel to entirely opaque. \r\n   *   No parameter is used. \r\n   * \r\n   *  \r\n   * \r\n   *   INVERT Sets each pixel to its inverse value. No \r\n   *   parameter is used. \r\n   * \r\n   *  \r\n   * \r\n   *   POSTERIZE Limits each channel of the image to the \r\n   *   number of colors specified as the parameter. The \r\n   *   parameter can be set to values between 2 and 255, \r\n   *   but results are most noticeable in the lower \r\n   *   ranges. \r\n   * \r\n   *  \r\n   * \r\n   *   BLUR Executes a Gaussian blur with the level \r\n   *   parameter specifying the extent of the blurring. \r\n   *   If no parameter is used, the blur is equivalent to \r\n   *   Gaussian blur of radius 1. Larger values increase \r\n   *   the blur. \r\n   * \r\n   *  \r\n   * \r\n   *   ERODE Reduces the light areas. No parameter is \r\n   *   used. \r\n   * \r\n   *  \r\n   * \r\n   *   DILATE Increases the light areas. No parameter is \r\n   *   used.\r\n   *\r\n   *   @param filterType either THRESHOLD, GRAY, OPAQUE, \r\n   *   INVERT, POSTERIZE, BLUR, ERODE, DILATE or BLUR. \r\n   *   See Filters.js for docs on each available filter\r\n   *   @param [filterParam] an optional parameter unique \r\n   *   to each filter, see above\r\n   */\r\n  filter(filterType: FILTER_TYPE, filterParam?: number): void\r\n  \r\n  /**\r\n   *   Returns an array of [R,G,B,A] values for any pixel \r\n   *   or grabs a section of an image. If no parameters \r\n   *   are specified, the entire image is returned. Use \r\n   *   the x and y parameters to get the value of one \r\n   *   pixel. Get a section of the display window by \r\n   *   specifying additional w and h parameters. When \r\n   *   getting an image, the x and y parameters define \r\n   *   the coordinates for the upper-left corner of the \r\n   *   image, regardless of the current imageMode().  If \r\n   *   the pixel requested is outside of the image \r\n   *   window, [0,0,0,255] is returned. To get the \r\n   *   numbers scaled according to the current color \r\n   *   ranges and taking into account colorMode, use \r\n   *   getColor instead of get. \r\n   * \r\n   *  \r\n   *   Getting the color of a single pixel with get(x, y) \r\n   *   is easy, but not as fast as grabbing the data \r\n   *   directly from pixels[]. The equivalent statement \r\n   *   to get(x, y) using pixels[] with pixel density d \r\n   *   is  var x, y, d; // set these to the coordinates \r\n   *   var off = (y  width + x)  d * 4; var components = \r\n   *   [ pixels[off], pixels[off + 1], pixels[off + 2], \r\n   *   pixels[off + 3] ]; print(components);  \r\n   * \r\n   *  \r\n   *   See the reference for pixels[] for more \r\n   *   information.\r\n   *\r\n   *   @param [x] x-coordinate of the pixel\r\n   *   @param [y] y-coordinate of the pixel\r\n   *   @param [w] width\r\n   *   @param [h] height\r\n   *   @return values of pixel at x,y in array format [R, \r\n   *   G, B, A] or p5.Image\r\n   */\r\n  get(x?: number, y?: number, w?: number, h?: number): number[]|p5.Image\r\n  \r\n  /**\r\n   *   Loads the pixel data for the display window into \r\n   *   the pixels[] array. This function must always be \r\n   *   called before reading from or writing to pixels[]. \r\n   *   Note that only changes made with set() or direct \r\n   *   manipulation of pixels[] will occur.\r\n   *\r\n   */\r\n  loadPixels(): void\r\n  \r\n  /**\r\n   *   Changes the color of any pixel, or writes an image \r\n   *   directly to the display window. The x and y \r\n   *   parameters specify the pixel to change and the c \r\n   *   parameter specifies the color value. This can be a \r\n   *   p5.Color object, or [R, G, B, A] pixel array. It \r\n   *   can also be a single grayscale value. When setting \r\n   *   an image, the x and y parameters define the \r\n   *   coordinates for the upper-left corner of the \r\n   *   image, regardless of the current imageMode().  \r\n   * \r\n   *  \r\n   *   After using set(), you must call updatePixels() \r\n   *   for your changes to appear. This should be called \r\n   *   once all pixels have been set, and must be called \r\n   *   before calling .get() or drawing the image.  \r\n   * \r\n   *   Setting the color of a single pixel with set(x, y) \r\n   *   is easy, but not as fast as putting the data \r\n   *   directly into pixels[]. Setting the pixels[] \r\n   *   values directly may be complicated when working \r\n   *   with a retina display, but will perform better \r\n   *   when lots of pixels need to be set directly on \r\n   *   every loop. \r\n   * \r\n   *   See the reference for pixels[] for more \r\n   *   information.\r\n   *\r\n   *   @param x x-coordinate of the pixel\r\n   *   @param y y-coordinate of the pixel\r\n   *   @param c insert a grayscale value | a pixel array \r\n   *   | a p5.Color object | a p5.Image to copy\r\n   */\r\n  set(x: number, y: number, c: number|number[]|object): void\r\n  \r\n  /**\r\n   *   Updates the display window with the data in the \r\n   *   pixels[] array. Use in conjunction with \r\n   *   loadPixels(). If you're only reading pixels from \r\n   *   the array, there's no need to call updatePixels() \r\n   *   — updating is only necessary to apply changes. \r\n   *   updatePixels() should be called anytime the pixels \r\n   *   array is manipulated or set() is called, and only \r\n   *   changes made with set() or direct changes to \r\n   *   pixels[] will occur.\r\n   *\r\n   *   @param [x] x-coordinate of the upper-left corner \r\n   *   of region to update\r\n   *   @param [y] y-coordinate of the upper-left corner \r\n   *   of region to update\r\n   *   @param [w] width of region to update\r\n   *   @param [h] height of region to update\r\n   */\r\n  updatePixels(x?: number, y?: number, w?: number, h?: number): void\r\n  \r\n  // src/io/files.js\r\n  \r\n  /**\r\n   *   Loads a JSON file from a file or a URL, and \r\n   *   returns an Object. Note that even if the JSON file \r\n   *   contains an Array, an Object will be returned with \r\n   *   index numbers as keys. This method is \r\n   *   asynchronous, meaning it may not finish before the \r\n   *   next line in your sketch is executed. JSONP is \r\n   *   supported via a polyfill and you can pass in as \r\n   *   the second argument an object with definitions of \r\n   *   the json callback following the syntax specified \r\n   *   here.\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param [jsonpOptions] options object for jsonp \r\n   *   related settings\r\n   *   @param [datatype] \"json\" or \"jsonp\"\r\n   *   @param [callback] function to be executed after \r\n   *   loadJSON() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   *   @return JSON data\r\n   */\r\n  loadJSON(path: string, jsonpOptions?: object, datatype?: string, callback?: Function, errorCallback?: Function): object|any[]\r\n  \r\n  /**\r\n   *   Loads a JSON file from a file or a URL, and \r\n   *   returns an Object. Note that even if the JSON file \r\n   *   contains an Array, an Object will be returned with \r\n   *   index numbers as keys. This method is \r\n   *   asynchronous, meaning it may not finish before the \r\n   *   next line in your sketch is executed. JSONP is \r\n   *   supported via a polyfill and you can pass in as \r\n   *   the second argument an object with definitions of \r\n   *   the json callback following the syntax specified \r\n   *   here.\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param datatype \"json\" or \"jsonp\"\r\n   *   @param [callback] function to be executed after \r\n   *   loadJSON() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  loadJSON(path: string, datatype: string, callback?: Function, errorCallback?: Function): object|any[]\r\n  \r\n  /**\r\n   *   Loads a JSON file from a file or a URL, and \r\n   *   returns an Object. Note that even if the JSON file \r\n   *   contains an Array, an Object will be returned with \r\n   *   index numbers as keys. This method is \r\n   *   asynchronous, meaning it may not finish before the \r\n   *   next line in your sketch is executed. JSONP is \r\n   *   supported via a polyfill and you can pass in as \r\n   *   the second argument an object with definitions of \r\n   *   the json callback following the syntax specified \r\n   *   here.\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param callback function to be executed after \r\n   *   loadJSON() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  loadJSON(path: string, callback: Function, errorCallback?: Function): object|any[]\r\n  \r\n  /**\r\n   *   Reads the contents of a file and creates a String \r\n   *   array of its individual lines. If the name of the \r\n   *   file is used as the parameter, as in the above \r\n   *   example, the file must be located in the sketch \r\n   *   directory/folder.  Alternatively, the file maybe \r\n   *   be loaded from anywhere on the local computer \r\n   *   using an absolute path (something that starts with \r\n   *   / on Unix and Linux, or a drive letter on \r\n   *   Windows), or the filename parameter can be a URL \r\n   *   for a file found on a network. \r\n   * \r\n   *  \r\n   *   This method is asynchronous, meaning it may not \r\n   *   finish before the next line in your sketch is \r\n   *   executed.\r\n   *\r\n   *   @param filename name of the file or url to load\r\n   *   @param [callback] function to be executed after \r\n   *   loadStrings() completes, Array is passed in as \r\n   *   first argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   *   @return Array of Strings\r\n   */\r\n  loadStrings(filename: string, callback?: Function, errorCallback?: Function): string[]\r\n  \r\n  /**\r\n   *   Reads the contents of a file or URL and creates a \r\n   *   p5.Table object with its values. If a file is \r\n   *   specified, it must be located in the sketch's \r\n   *   \"data\" folder. The filename parameter can also be \r\n   *   a URL to a file found online. By default, the file \r\n   *   is assumed to be comma-separated (in CSV format). \r\n   *   Table only looks for a header row if the 'header' \r\n   *   option is included. Possible options include: \r\n   * \r\n   *   - csv - parse the table as comma-separated values\r\n   *   - tsv - parse the table as tab-separated values\r\n   *   - header - this table has a header (title) row  \r\n   * \r\n   *   When passing in multiple options, pass them in as \r\n   *   separate parameters, seperated by commas. For \r\n   *   example: \r\n   * \r\n   *   \r\n   *   loadTable('my_csv_file.csv', 'csv', 'header');   \r\n   * \r\n   *  \r\n   *   All files loaded and saved use UTF-8 encoding. \r\n   * \r\n   *   This method is asynchronous, meaning it may not \r\n   *   finish before the next line in your sketch is \r\n   *   executed. Calling loadTable() inside preload() \r\n   *   guarantees to complete the operation before \r\n   *   setup() and draw() are called. \r\n   * \r\n   *   Outside of preload(), you may supply a callback \r\n   *   function to handle the object:\r\n   *\r\n   *   @param filename name of the file or URL to load\r\n   *   @param options \"header\" \"csv\" \"tsv\"\r\n   *   @param [callback] function to be executed after \r\n   *   loadTable() completes. On success, the Table \r\n   *   object is passed in as the first argument.\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   *   @return Table object containing data\r\n   */\r\n  loadTable(filename: string, options: string, callback?: Function, errorCallback?: Function): object\r\n  \r\n  /**\r\n   *   Reads the contents of a file or URL and creates a \r\n   *   p5.Table object with its values. If a file is \r\n   *   specified, it must be located in the sketch's \r\n   *   \"data\" folder. The filename parameter can also be \r\n   *   a URL to a file found online. By default, the file \r\n   *   is assumed to be comma-separated (in CSV format). \r\n   *   Table only looks for a header row if the 'header' \r\n   *   option is included. Possible options include: \r\n   * \r\n   *   - csv - parse the table as comma-separated values\r\n   *   - tsv - parse the table as tab-separated values\r\n   *   - header - this table has a header (title) row  \r\n   * \r\n   *   When passing in multiple options, pass them in as \r\n   *   separate parameters, seperated by commas. For \r\n   *   example: \r\n   * \r\n   *   \r\n   *   loadTable('my_csv_file.csv', 'csv', 'header');   \r\n   * \r\n   *  \r\n   *   All files loaded and saved use UTF-8 encoding. \r\n   * \r\n   *   This method is asynchronous, meaning it may not \r\n   *   finish before the next line in your sketch is \r\n   *   executed. Calling loadTable() inside preload() \r\n   *   guarantees to complete the operation before \r\n   *   setup() and draw() are called. \r\n   * \r\n   *   Outside of preload(), you may supply a callback \r\n   *   function to handle the object:\r\n   *\r\n   *   @param filename name of the file or URL to load\r\n   *   @param [callback] function to be executed after \r\n   *   loadTable() completes. On success, the Table \r\n   *   object is passed in as the first argument.\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  loadTable(filename: string, callback?: Function, errorCallback?: Function): object\r\n  \r\n  /**\r\n   *   Reads the contents of a file and creates an XML \r\n   *   object with its values. If the name of the file is \r\n   *   used as the parameter, as in the above example, \r\n   *   the file must be located in the sketch \r\n   *   directory/folder. Alternatively, the file maybe be \r\n   *   loaded from anywhere on the local computer using \r\n   *   an absolute path (something that starts with / on \r\n   *   Unix and Linux, or a drive letter on Windows), or \r\n   *   the filename parameter can be a URL for a file \r\n   *   found on a network. \r\n   * \r\n   *   This method is asynchronous, meaning it may not \r\n   *   finish before the next line in your sketch is \r\n   *   executed. Calling loadXML() inside preload() \r\n   *   guarantees to complete the operation before \r\n   *   setup() and draw() are called. \r\n   * \r\n   *   Outside of preload(), you may supply a callback \r\n   *   function to handle the object.\r\n   *\r\n   *   @param filename name of the file or URL to load\r\n   *   @param [callback] function to be executed after \r\n   *   loadXML() completes, XML object is passed in as \r\n   *   first argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   *   @return XML object containing data\r\n   */\r\n  loadXML(filename: string, callback?: Function, errorCallback?: Function): object\r\n  loadBytes(file: string, callback?: Function, errorCallback?: Function): object\r\n  \r\n  /**\r\n   *   Method for executing an HTTP GET request. If data \r\n   *   type is not specified, p5 will try to guess based \r\n   *   on the URL, defaulting to text. This is equivalent \r\n   *   to calling httpDo(path, 'GET'). The 'binary' \r\n   *   datatype will return a Blob object, and the \r\n   *   'arrayBuffer' datatype will return an ArrayBuffer \r\n   *   which can be used to initialize typed arrays (such \r\n   *   as Uint8Array).\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param [datatype] \"json\", \"jsonp\", \"binary\", \r\n   *   \"arrayBuffer\", \"xml\", or \"text\"\r\n   *   @param [data] param data passed sent with request\r\n   *   @param [callback] function to be executed after \r\n   *   httpGet() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpGet(path: string, datatype?: string, data?: object|boolean, callback?: Function, errorCallback?: Function): void\r\n  \r\n  /**\r\n   *   Method for executing an HTTP GET request. If data \r\n   *   type is not specified, p5 will try to guess based \r\n   *   on the URL, defaulting to text. This is equivalent \r\n   *   to calling httpDo(path, 'GET'). The 'binary' \r\n   *   datatype will return a Blob object, and the \r\n   *   'arrayBuffer' datatype will return an ArrayBuffer \r\n   *   which can be used to initialize typed arrays (such \r\n   *   as Uint8Array).\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param data param data passed sent with request\r\n   *   @param [callback] function to be executed after \r\n   *   httpGet() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpGet(path: string, data: object|boolean, callback?: Function, errorCallback?: Function): void\r\n  \r\n  /**\r\n   *   Method for executing an HTTP GET request. If data \r\n   *   type is not specified, p5 will try to guess based \r\n   *   on the URL, defaulting to text. This is equivalent \r\n   *   to calling httpDo(path, 'GET'). The 'binary' \r\n   *   datatype will return a Blob object, and the \r\n   *   'arrayBuffer' datatype will return an ArrayBuffer \r\n   *   which can be used to initialize typed arrays (such \r\n   *   as Uint8Array).\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param callback function to be executed after \r\n   *   httpGet() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpGet(path: string, callback: Function, errorCallback?: Function): void\r\n  \r\n  /**\r\n   *   Method for executing an HTTP POST request. If data \r\n   *   type is not specified, p5 will try to guess based \r\n   *   on the URL, defaulting to text. This is equivalent \r\n   *   to calling httpDo(path, 'POST').\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param [datatype] \"json\", \"jsonp\", \"xml\", or \r\n   *   \"text\". If omitted, httpPost() will guess.\r\n   *   @param [data] param data passed sent with request\r\n   *   @param [callback] function to be executed after \r\n   *   httpPost() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpPost(path: string, datatype?: string, data?: object|boolean, callback?: Function, errorCallback?: Function): void\r\n  \r\n  /**\r\n   *   Method for executing an HTTP POST request. If data \r\n   *   type is not specified, p5 will try to guess based \r\n   *   on the URL, defaulting to text. This is equivalent \r\n   *   to calling httpDo(path, 'POST').\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param data param data passed sent with request\r\n   *   @param [callback] function to be executed after \r\n   *   httpPost() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpPost(path: string, data: object|boolean, callback?: Function, errorCallback?: Function): void\r\n  \r\n  /**\r\n   *   Method for executing an HTTP POST request. If data \r\n   *   type is not specified, p5 will try to guess based \r\n   *   on the URL, defaulting to text. This is equivalent \r\n   *   to calling httpDo(path, 'POST').\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param callback function to be executed after \r\n   *   httpPost() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpPost(path: string, callback: Function, errorCallback?: Function): void\r\n  \r\n  /**\r\n   *   Method for executing an HTTP request. If data type \r\n   *   is not specified, p5 will try to guess based on \r\n   *   the URL, defaulting to text. For more advanced \r\n   *   use, you may also pass in the path as the first \r\n   *   argument and a object as the second argument, the \r\n   *   signature follows the one specified in the Fetch \r\n   *   API specification.\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param [method] either \"GET\", \"POST\", or \"PUT\", \r\n   *   defaults to \"GET\"\r\n   *   @param [datatype] \"json\", \"jsonp\", \"xml\", or \r\n   *   \"text\"\r\n   *   @param [data] param data passed sent with request\r\n   *   @param [callback] function to be executed after \r\n   *   httpGet() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpDo(path: string, method?: string, datatype?: string, data?: object, callback?: Function, errorCallback?: Function): void\r\n  \r\n  /**\r\n   *   Method for executing an HTTP request. If data type \r\n   *   is not specified, p5 will try to guess based on \r\n   *   the URL, defaulting to text. For more advanced \r\n   *   use, you may also pass in the path as the first \r\n   *   argument and a object as the second argument, the \r\n   *   signature follows the one specified in the Fetch \r\n   *   API specification.\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param options Request object options as \r\n   *   documented in the \"fetch\" API reference\r\n   *   @param [callback] function to be executed after \r\n   *   httpGet() completes, data is passed in as first \r\n   *   argument\r\n   *   @param [errorCallback] function to be executed if \r\n   *   there is an error, response is passed in as first \r\n   *   argument\r\n   */\r\n  httpDo(path: string, options: object, callback?: Function, errorCallback?: Function): void\r\n  createWriter(name: string, extension?: string): p5.PrintWriter\r\n  \r\n  /**\r\n   *   Save an image, text, json, csv, wav, or html. \r\n   *   Prompts download to the client's computer. Note \r\n   *   that it is not recommended to call save() within \r\n   *   draw if it's looping, as the save() function will \r\n   *   open a new save dialog every frame. The default \r\n   *   behavior is to save the canvas as an image. You \r\n   *   can optionally specify a filename. For example: \r\n   * \r\n   *  \r\n   *   save(); save('myCanvas.jpg'); // save a specific \r\n   *   canvas with a filename  \r\n   * \r\n   *   Alternately, the first parameter can be a pointer \r\n   *   to a canvas p5.Element, an Array of Strings, an \r\n   *   Array of JSON, a JSON object, a p5.Table, a \r\n   *   p5.Image, or a p5.SoundFile (requires p5.sound). \r\n   *   The second parameter is a filename (including \r\n   *   extension). The third parameter is for options \r\n   *   specific to this type of object. This method will \r\n   *   save a file that fits the given paramaters. For \r\n   *   example: \r\n   * \r\n   *  \r\n   *   // Saves canvas as an image save('myCanvas.jpg'); \r\n   *   // Saves pImage as a png image var img = \r\n   *   createImage(10, 10); save(img, 'my.png'); // Saves \r\n   *   canvas as an image var cnv = createCanvas(100, \r\n   *   100); save(cnv, 'myCanvas.jpg'); // Saves \r\n   *   p5.Renderer object as an image var gb = \r\n   *   createGraphics(100, 100); save(gb, \r\n   *   'myGraphics.jpg'); var myTable = new p5.Table(); \r\n   *   // Saves table as html file save(myTable, \r\n   *   'myTable.html'); // Comma Separated Values \r\n   *   save(myTable, 'myTable.csv'); // Tab Separated \r\n   *   Values save(myTable, 'myTable.tsv'); var myJSON = \r\n   *   { a: 1, b: true }; // Saves pretty JSON \r\n   *   save(myJSON, 'my.json'); // Optimizes JSON \r\n   *   filesize save(myJSON, 'my.json', true); // Saves \r\n   *   array of strings to a text file with line breaks \r\n   *   after each item var arrayOfStrings = ['a', 'b']; \r\n   *   save(arrayOfStrings, 'my.txt');\r\n   *\r\n   *   @param [objectOrFilename] If filename is provided, \r\n   *   will save canvas as an image with either png or \r\n   *   jpg extension depending on the filename. If object \r\n   *   is provided, will save depending on the object and \r\n   *   filename (see examples above).\r\n   *   @param [filename] If an object is provided as the \r\n   *   first parameter, then the second parameter \r\n   *   indicates the filename, and should include an \r\n   *   appropriate file extension (see examples above).\r\n   *   @param [options] Additional options depend on \r\n   *   filetype. For example, when saving JSON, true \r\n   *   indicates that the output will be optimized for \r\n   *   filesize, rather than readability.\r\n   */\r\n  save(objectOrFilename?: object|string, filename?: string, options?: boolean|string): void\r\n  \r\n  /**\r\n   *   Writes the contents of an Array or a JSON object \r\n   *   to a .json file. The file saving process and \r\n   *   location of the saved file will vary between web \r\n   *   browsers.\r\n   *\r\n   *   @param [optimize] If true, removes line breaks and \r\n   *   spaces from the output file to optimize filesize \r\n   *   (but not readability).\r\n   */\r\n  saveJSON(json: any[]|object, filename: string, optimize?: boolean): void\r\n  \r\n  /**\r\n   *   Writes an array of Strings to a text file, one \r\n   *   line per String. The file saving process and \r\n   *   location of the saved file will vary between web \r\n   *   browsers.\r\n   *\r\n   *   @param list string array to be written\r\n   *   @param filename filename for output\r\n   *   @param [extension] the filename's extension\r\n   */\r\n  saveStrings(list: string[], filename: string, extension?: string): void\r\n  \r\n  /**\r\n   *   Writes the contents of a Table object to a file. \r\n   *   Defaults to a text file with \r\n   *   comma-separated-values ('csv') but can also use \r\n   *   tab separation ('tsv'), or generate an HTML table \r\n   *   ('html'). The file saving process and location of \r\n   *   the saved file will vary between web browsers.\r\n   *\r\n   *   @param Table the Table object to save to a file\r\n   *   @param filename the filename to which the Table \r\n   *   should be saved\r\n   *   @param [options] can be one of \"tsv\", \"csv\", or \r\n   *   \"html\"\r\n   */\r\n  saveTable(Table: p5.Table, filename: string, options?: string): void\r\n  \r\n  // src/math/calculation.js\r\n  \r\n  /**\r\n   *   Calculates the absolute value (magnitude) of a \r\n   *   number. Maps to Math.abs(). The absolute value of \r\n   *   a number is always positive.\r\n   *\r\n   *   @param n number to compute\r\n   *   @return absolute value of given number\r\n   */\r\n  abs(n: number): number\r\n  \r\n  /**\r\n   *   Calculates the closest int value that is greater \r\n   *   than or equal to the value of the parameter. Maps \r\n   *   to Math.ceil(). For example, ceil(9.03) returns \r\n   *   the value 10.\r\n   *\r\n   *   @param n number to round up\r\n   *   @return rounded up number\r\n   */\r\n  ceil(n: number): number\r\n  \r\n  /**\r\n   *   Constrains a value between a minimum and maximum \r\n   *   value.\r\n   *\r\n   *   @param n number to constrain\r\n   *   @param low minimum limit\r\n   *   @param high maximum limit\r\n   *   @return constrained number\r\n   */\r\n  constrain(n: number, low: number, high: number): number\r\n  \r\n  /**\r\n   *   Calculates the distance between two points.\r\n   *\r\n   *   @param x1 x-coordinate of the first point\r\n   *   @param y1 y-coordinate of the first point\r\n   *   @param x2 x-coordinate of the second point\r\n   *   @param y2 y-coordinate of the second point\r\n   *   @return distance between the two points\r\n   */\r\n  dist(x1: number, y1: number, x2: number, y2: number): number\r\n  \r\n  /**\r\n   *   Calculates the distance between two points.\r\n   *\r\n   *   @param x1 x-coordinate of the first point\r\n   *   @param y1 y-coordinate of the first point\r\n   *   @param z1 z-coordinate of the first point\r\n   *   @param x2 x-coordinate of the second point\r\n   *   @param y2 y-coordinate of the second point\r\n   *   @param z2 z-coordinate of the second point\r\n   *   @return distance between the two points\r\n   */\r\n  dist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number\r\n  \r\n  /**\r\n   *   Returns Euler's number e (2.71828...) raised to \r\n   *   the power of the n parameter. Maps to Math.exp().\r\n   *\r\n   *   @param n exponent to raise\r\n   *   @return e^n\r\n   */\r\n  exp(n: number): number\r\n  \r\n  /**\r\n   *   Calculates the closest int value that is less than \r\n   *   or equal to the value of the parameter. Maps to \r\n   *   Math.floor().\r\n   *\r\n   *   @param n number to round down\r\n   *   @return rounded down number\r\n   */\r\n  floor(n: number): number\r\n  \r\n  /**\r\n   *   Calculates a number between two numbers at a \r\n   *   specific increment. The amt parameter is the \r\n   *   amount to interpolate between the two values where \r\n   *   0.0 equal to the first point, 0.1 is very near the \r\n   *   first point, 0.5 is half-way in between, etc. The \r\n   *   lerp function is convenient for creating motion \r\n   *   along a straight path and for drawing dotted \r\n   *   lines.\r\n   *\r\n   *   @param start first value\r\n   *   @param stop second value\r\n   *   @param amt number between 0.0 and 1.0\r\n   *   @return lerped value\r\n   */\r\n  lerp(start: number, stop: number, amt: number): number\r\n  \r\n  /**\r\n   *   Calculates the natural logarithm (the base-e \r\n   *   logarithm) of a number. This function expects the \r\n   *   n parameter to be a value greater than 0.0. Maps \r\n   *   to Math.log().\r\n   *\r\n   *   @param n number greater than 0\r\n   *   @return natural logarithm of n\r\n   */\r\n  log(n: number): number\r\n  \r\n  /**\r\n   *   Calculates the magnitude (or length) of a vector. \r\n   *   A vector is a direction in space commonly used in \r\n   *   computer graphics and linear algebra. Because it \r\n   *   has no \"start\" position, the magnitude of a vector \r\n   *   can be thought of as the distance from the \r\n   *   coordinate 0,0 to its x,y value. Therefore, mag() \r\n   *   is a shortcut for writing dist(0, 0, x, y).\r\n   *\r\n   *   @param a first value\r\n   *   @param b second value\r\n   *   @return magnitude of vector from (0,0) to (a,b)\r\n   */\r\n  mag(a: number, b: number): number\r\n  \r\n  /**\r\n   *   Re-maps a number from one range to another.  In \r\n   *   the first example above, the number 25 is \r\n   *   converted from a value in the range of 0 to 100 \r\n   *   into a value that ranges from the left edge of the \r\n   *   window (0) to the right edge (width).\r\n   *\r\n   *   @param value the incoming value to be converted\r\n   *   @param start1 lower bound of the value's current \r\n   *   range\r\n   *   @param stop1 upper bound of the value's current \r\n   *   range\r\n   *   @param start2 lower bound of the value's target \r\n   *   range\r\n   *   @param stop2 upper bound of the value's target \r\n   *   range\r\n   *   @param [withinBounds] constrain the value to the \r\n   *   newly mapped range\r\n   *   @return remapped number\r\n   */\r\n  map(value: number, start1: number, stop1: number, start2: number, stop2: number, withinBounds?: boolean): number\r\n  \r\n  /**\r\n   *   Determines the largest value in a sequence of \r\n   *   numbers, and then returns that value. max() \r\n   *   accepts any number of Number parameters, or an \r\n   *   Array of any length.\r\n   *\r\n   *   @param n0 Number to compare\r\n   *   @param n1 Number to compare\r\n   *   @return maximum Number\r\n   */\r\n  max(n0: number, n1: number): number\r\n  \r\n  /**\r\n   *   Determines the largest value in a sequence of \r\n   *   numbers, and then returns that value. max() \r\n   *   accepts any number of Number parameters, or an \r\n   *   Array of any length.\r\n   *\r\n   *   @param nums Numbers to compare\r\n   */\r\n  max(nums: number[]): number\r\n  \r\n  /**\r\n   *   Determines the smallest value in a sequence of \r\n   *   numbers, and then returns that value. min() \r\n   *   accepts any number of Number parameters, or an \r\n   *   Array of any length.\r\n   *\r\n   *   @param n0 Number to compare\r\n   *   @param n1 Number to compare\r\n   *   @return minimum Number\r\n   */\r\n  min(n0: number, n1: number): number\r\n  \r\n  /**\r\n   *   Determines the smallest value in a sequence of \r\n   *   numbers, and then returns that value. min() \r\n   *   accepts any number of Number parameters, or an \r\n   *   Array of any length.\r\n   *\r\n   *   @param nums Numbers to compare\r\n   */\r\n  min(nums: number[]): number\r\n  \r\n  /**\r\n   *   Normalizes a number from another range into a \r\n   *   value between 0 and 1. Identical to map(value, \r\n   *   low, high, 0, 1). Numbers outside of the range are \r\n   *   not clamped to 0 and 1, because out-of-range \r\n   *   values are often intentional and useful. (See the \r\n   *   second example above.)\r\n   *\r\n   *   @param value incoming value to be normalized\r\n   *   @param start lower bound of the value's current \r\n   *   range\r\n   *   @param stop upper bound of the value's current \r\n   *   range\r\n   *   @return normalized number\r\n   */\r\n  norm(value: number, start: number, stop: number): number\r\n  \r\n  /**\r\n   *   Facilitates exponential expressions. The pow() \r\n   *   function is an efficient way of multiplying \r\n   *   numbers by themselves (or their reciprocals) in \r\n   *   large quantities. For example, pow(3, 5) is \r\n   *   equivalent to the expression 33333 and pow(3, -5) \r\n   *   is equivalent to 1 / 33333. Maps to Math.pow().\r\n   *\r\n   *   @param n base of the exponential expression\r\n   *   @param e power by which to raise the base\r\n   *   @return n^e\r\n   */\r\n  pow(n: number, e: number): number\r\n  \r\n  /**\r\n   *   Calculates the integer closest to the n parameter. \r\n   *   For example, round(133.8) returns the value 134. \r\n   *   Maps to Math.round().\r\n   *\r\n   *   @param n number to round\r\n   *   @return rounded number\r\n   */\r\n  round(n: number): number\r\n  \r\n  /**\r\n   *   Squares a number (multiplies a number by itself). \r\n   *   The result is always a positive number, as \r\n   *   multiplying two negative numbers always yields a \r\n   *   positive result. For example, -1 * -1 = 1.\r\n   *\r\n   *   @param n number to square\r\n   *   @return squared number\r\n   */\r\n  sq(n: number): number\r\n  \r\n  /**\r\n   *   Calculates the square root of a number. The square \r\n   *   root of a number is always positive, even though \r\n   *   there may be a valid negative root. The square \r\n   *   root s of number a is such that s*s = a. It is the \r\n   *   opposite of squaring. Maps to Math.sqrt().\r\n   *\r\n   *   @param n non-negative number to square root\r\n   *   @return square root of number\r\n   */\r\n  sqrt(n: number): number\r\n  \r\n  // src/math/math.js\r\n  \r\n  /**\r\n   *   Creates a new p5.Vector (the datatype for storing \r\n   *   vectors). This provides a two or three dimensional \r\n   *   vector, specifically a Euclidean (also known as \r\n   *   geometric) vector. A vector is an entity that has \r\n   *   both magnitude and direction.\r\n   *\r\n   *   @param [x] x component of the vector\r\n   *   @param [y] y component of the vector\r\n   *   @param [z] z component of the vector\r\n   */\r\n  createVector(x?: number, y?: number, z?: number): p5.Vector\r\n  \r\n  // src/math/noise.js\r\n  \r\n  /**\r\n   *   Returns the Perlin noise value at specified \r\n   *   coordinates. Perlin noise is a random sequence \r\n   *   generator producing a more natural ordered, \r\n   *   harmonic succession of numbers compared to the \r\n   *   standard random() function. It was invented by Ken \r\n   *   Perlin in the 1980s and been used since in \r\n   *   graphical applications to produce procedural \r\n   *   textures, natural motion, shapes, terrains etc. \r\n   *   The main difference to the random() function is \r\n   *   that Perlin noise is defined in an infinite \r\n   *   n-dimensional space where each pair of coordinates \r\n   *   corresponds to a fixed semi-random value (fixed \r\n   *   only for the lifespan of the program; see the \r\n   *   noiseSeed() function). p5.js can compute 1D, 2D \r\n   *   and 3D noise, depending on the number of \r\n   *   coordinates given. The resulting value will always \r\n   *   be between 0.0 and 1.0. The noise value can be \r\n   *   animated by moving through the noise space as \r\n   *   demonstrated in the example above. The 2nd and 3rd \r\n   *   dimension can also be interpreted as time.\r\n   * \r\n   *   The actual noise is structured similar to an audio \r\n   *   signal, in respect to the function's use of \r\n   *   frequencies. Similar to the concept of harmonics \r\n   *   in physics, perlin noise is computed over several \r\n   *   octaves which are added together for the final \r\n   *   result. \r\n   * \r\n   *   Another way to adjust the character of the \r\n   *   resulting sequence is the scale of the input \r\n   *   coordinates. As the function works within an \r\n   *   infinite space the value of the coordinates \r\n   *   doesn't matter as such, only the distance between \r\n   *   successive coordinates does (eg. when using \r\n   *   noise() within a loop). As a general rule the \r\n   *   smaller the difference between coordinates, the \r\n   *   smoother the resulting noise sequence will be. \r\n   *   Steps of 0.005-0.03 work best for most \r\n   *   applications, but this will differ depending on \r\n   *   use.\r\n   *\r\n   *   @param x x-coordinate in noise space\r\n   *   @param [y] y-coordinate in noise space\r\n   *   @param [z] z-coordinate in noise space\r\n   *   @return Perlin noise value (between 0 and 1) at \r\n   *   specified coordinates\r\n   */\r\n  noise(x: number, y?: number, z?: number): number\r\n  \r\n  /**\r\n   *   Adjusts the character and level of detail produced \r\n   *   by the Perlin noise function. Similar to harmonics \r\n   *   in physics, noise is computed over several \r\n   *   octaves. Lower octaves contribute more to the \r\n   *   output signal and as such define the overall \r\n   *   intensity of the noise, whereas higher octaves \r\n   *   create finer grained details in the noise \r\n   *   sequence.  By default, noise is computed over 4 \r\n   *   octaves with each octave contributing exactly half \r\n   *   than its predecessor, starting at 50% strength for \r\n   *   the 1st octave. This falloff amount can be changed \r\n   *   by adding an additional function parameter. Eg. a \r\n   *   falloff factor of 0.75 means each octave will now \r\n   *   have 75% impact (25% less) of the previous lower \r\n   *   octave. Any value between 0.0 and 1.0 is valid, \r\n   *   however note that values greater than 0.5 might \r\n   *   result in greater than 1.0 values returned by \r\n   *   noise(). \r\n   * \r\n   *  \r\n   *   By changing these parameters, the signal created \r\n   *   by the noise() function can be adapted to fit very \r\n   *   specific needs and characteristics.\r\n   *\r\n   *   @param lod number of octaves to be used by the \r\n   *   noise\r\n   *   @param falloff falloff factor for each octave\r\n   */\r\n  noiseDetail(lod: number, falloff: number): void\r\n  \r\n  /**\r\n   *   Sets the seed value for noise(). By default, \r\n   *   noise() produces different results each time the \r\n   *   program is run. Set the value parameter to a \r\n   *   constant to return the same pseudo-random numbers \r\n   *   each time the software is run.\r\n   *\r\n   *   @param seed the seed value\r\n   */\r\n  noiseSeed(seed: number): void\r\n  \r\n  // src/math/random.js\r\n  \r\n  /**\r\n   *   Sets the seed value for random(). By default, \r\n   *   random() produces different results each time the \r\n   *   program is run. Set the seed parameter to a \r\n   *   constant to return the same pseudo-random numbers \r\n   *   each time the software is run.\r\n   *\r\n   *   @param seed the seed value\r\n   */\r\n  randomSeed(seed: number): void\r\n  \r\n  /**\r\n   *   Return a random floating-point number. Takes \r\n   *   either 0, 1 or 2 arguments. \r\n   * \r\n   *   If no argument is given, returns a random number \r\n   *   from 0 up to (but not including) 1. \r\n   * \r\n   *   If one argument is given and it is a number, \r\n   *   returns a random number from 0 up to (but not \r\n   *   including) the number. \r\n   * \r\n   *   If one argument is given and it is an array, \r\n   *   returns a random element from that array. \r\n   * \r\n   *   If two arguments are given, returns a random \r\n   *   number from the first argument up to (but not \r\n   *   including) the second argument.\r\n   *\r\n   *   @param [min] the lower bound (inclusive)\r\n   *   @param [max] the upper bound (exclusive)\r\n   *   @return the random number\r\n   */\r\n  random(min?: number, max?: number): number\r\n  \r\n  /**\r\n   *   Return a random floating-point number. Takes \r\n   *   either 0, 1 or 2 arguments. \r\n   * \r\n   *   If no argument is given, returns a random number \r\n   *   from 0 up to (but not including) 1. \r\n   * \r\n   *   If one argument is given and it is a number, \r\n   *   returns a random number from 0 up to (but not \r\n   *   including) the number. \r\n   * \r\n   *   If one argument is given and it is an array, \r\n   *   returns a random element from that array. \r\n   * \r\n   *   If two arguments are given, returns a random \r\n   *   number from the first argument up to (but not \r\n   *   including) the second argument.\r\n   *\r\n   *   @param choices the array to choose from\r\n   *   @return the random element from the array\r\n   */\r\n  random(choices: any[]): any\r\n  \r\n  /**\r\n   *   Returns a random number fitting a Gaussian, or \r\n   *   normal, distribution. There is theoretically no \r\n   *   minimum or maximum value that randomGaussian() \r\n   *   might return. Rather, there is just a very low \r\n   *   probability that values far from the mean will be \r\n   *   returned; and a higher probability that numbers \r\n   *   near the mean will be returned.  Takes either 0, 1 \r\n   *   or 2 arguments.\r\n   *  \r\n   *   If no args, returns a mean of 0 and standard \r\n   *   deviation of 1.\r\n   *  \r\n   *   If one arg, that arg is the mean (standard \r\n   *   deviation is 1).\r\n   *  \r\n   *   If two args, first is mean, second is standard \r\n   *   deviation.\r\n   *\r\n   *   @param mean the mean\r\n   *   @param sd the standard deviation\r\n   *   @return the random number\r\n   */\r\n  randomGaussian(mean: number, sd: number): number\r\n  \r\n  // src/math/trigonometry.js\r\n  \r\n  /**\r\n   *   The inverse of cos(), returns the arc cosine of a \r\n   *   value. This function expects the values in the \r\n   *   range of -1 to 1 and values are returned in the \r\n   *   range 0 to PI (3.1415927).\r\n   *\r\n   *   @param value the value whose arc cosine is to be \r\n   *   returned\r\n   *   @return the arc cosine of the given value\r\n   */\r\n  acos(value: number): number\r\n  \r\n  /**\r\n   *   The inverse of sin(), returns the arc sine of a \r\n   *   value. This function expects the values in the \r\n   *   range of -1 to 1 and values are returned in the \r\n   *   range -PI/2 to PI/2.\r\n   *\r\n   *   @param value the value whose arc sine is to be \r\n   *   returned\r\n   *   @return the arc sine of the given value\r\n   */\r\n  asin(value: number): number\r\n  \r\n  /**\r\n   *   The inverse of tan(), returns the arc tangent of a \r\n   *   value. This function expects the values in the \r\n   *   range of -Infinity to Infinity (exclusive) and \r\n   *   values are returned in the range -PI/2 to PI/2.\r\n   *\r\n   *   @param value the value whose arc tangent is to be \r\n   *   returned\r\n   *   @return the arc tangent of the given value\r\n   */\r\n  atan(value: number): number\r\n  \r\n  /**\r\n   *   Calculates the angle (in radians) from a specified \r\n   *   point to the coordinate origin as measured from \r\n   *   the positive x-axis. Values are returned as a \r\n   *   float in the range from PI to -PI. The atan2() \r\n   *   function is most often used for orienting geometry \r\n   *   to the position of the cursor.  Note: The \r\n   *   y-coordinate of the point is the first parameter, \r\n   *   and the x-coordinate is the second parameter, due \r\n   *   the the structure of calculating the tangent.\r\n   *\r\n   *   @param y y-coordinate of the point\r\n   *   @param x x-coordinate of the point\r\n   *   @return the arc tangent of the given point\r\n   */\r\n  atan2(y: number, x: number): number\r\n  \r\n  /**\r\n   *   Calculates the cosine of an angle. This function \r\n   *   takes into account the current angleMode. Values \r\n   *   are returned in the range -1 to 1.\r\n   *\r\n   *   @param angle the angle\r\n   *   @return the cosine of the angle\r\n   */\r\n  cos(angle: number): number\r\n  \r\n  /**\r\n   *   Calculates the sine of an angle. This function \r\n   *   takes into account the current angleMode. Values \r\n   *   are returned in the range -1 to 1.\r\n   *\r\n   *   @param angle the angle\r\n   *   @return the sine of the angle\r\n   */\r\n  sin(angle: number): number\r\n  \r\n  /**\r\n   *   Calculates the tangent of an angle. This function \r\n   *   takes into account the current angleMode. Values \r\n   *   are returned in the range -1 to 1.\r\n   *\r\n   *   @param angle the angle\r\n   *   @return the tangent of the angle\r\n   */\r\n  tan(angle: number): number\r\n  \r\n  /**\r\n   *   Converts a radian measurement to its corresponding \r\n   *   value in degrees. Radians and degrees are two ways \r\n   *   of measuring the same thing. There are 360 degrees \r\n   *   in a circle and 2*PI radians in a circle. For \r\n   *   example, 90° = PI/2 = 1.5707964. This function \r\n   *   does not take into account the current angleMode.\r\n   *\r\n   *   @param radians the radians value to convert to \r\n   *   degrees\r\n   *   @return the converted angle\r\n   */\r\n  degrees(radians: number): number\r\n  \r\n  /**\r\n   *   Converts a degree measurement to its corresponding \r\n   *   value in radians. Radians and degrees are two ways \r\n   *   of measuring the same thing. There are 360 degrees \r\n   *   in a circle and 2*PI radians in a circle. For \r\n   *   example, 90° = PI/2 = 1.5707964. This function \r\n   *   does not take into account the current angleMode.\r\n   *\r\n   *   @param degrees the degree value to convert to \r\n   *   radians\r\n   *   @return the converted angle\r\n   */\r\n  radians(degrees: number): number\r\n  \r\n  /**\r\n   *   Sets the current mode of p5 to given mode. Default \r\n   *   mode is RADIANS.\r\n   *\r\n   *   @param mode either RADIANS or DEGREES\r\n   */\r\n  angleMode(mode: ANGLE_MODE): void\r\n  \r\n  // src/typography/attributes.js\r\n  \r\n  /**\r\n   *   Sets the current alignment for drawing text. \r\n   *   Accepts two arguments: horizAlign (LEFT, CENTER, \r\n   *   or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or \r\n   *   BASELINE). The horizAlign parameter is in \r\n   *   reference to the x value of the text() function, \r\n   *   while the vertAlign parameter is in reference to \r\n   *   the y value. \r\n   * \r\n   *   So if you write textAlign(LEFT), you are aligning \r\n   *   the left edge of your text to the x value you give \r\n   *   in text(). If you write textAlign(RIGHT, TOP), you \r\n   *   are aligning the right edge of your text to the x \r\n   *   value and the top of edge of the text to the y \r\n   *   value.\r\n   *\r\n   *   @param horizAlign horizontal alignment, either \r\n   *   LEFT, CENTER, or RIGHT\r\n   *   @param [vertAlign] vertical alignment, either TOP, \r\n   *   BOTTOM, CENTER, or BASELINE\r\n   *   @chainable\r\n   */\r\n  textAlign(horizAlign: HORIZ_ALIGN, vertAlign?: VERT_ALIGN): p5\r\n  \r\n  /**\r\n   *   Sets the current alignment for drawing text. \r\n   *   Accepts two arguments: horizAlign (LEFT, CENTER, \r\n   *   or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or \r\n   *   BASELINE). The horizAlign parameter is in \r\n   *   reference to the x value of the text() function, \r\n   *   while the vertAlign parameter is in reference to \r\n   *   the y value. \r\n   * \r\n   *   So if you write textAlign(LEFT), you are aligning \r\n   *   the left edge of your text to the x value you give \r\n   *   in text(). If you write textAlign(RIGHT, TOP), you \r\n   *   are aligning the right edge of your text to the x \r\n   *   value and the top of edge of the text to the y \r\n   *   value.\r\n   *\r\n   */\r\n  textAlign(): object\r\n  \r\n  /**\r\n   *   Sets/gets the spacing, in pixels, between lines of \r\n   *   text. This setting will be used in all subsequent \r\n   *   calls to the text() function.\r\n   *\r\n   *   @param leading the size in pixels for spacing \r\n   *   between lines\r\n   *   @chainable\r\n   */\r\n  textLeading(leading: number): p5\r\n  \r\n  /**\r\n   *   Sets/gets the spacing, in pixels, between lines of \r\n   *   text. This setting will be used in all subsequent \r\n   *   calls to the text() function.\r\n   *\r\n   */\r\n  textLeading(): number\r\n  \r\n  /**\r\n   *   Sets/gets the current font size. This size will be \r\n   *   used in all subsequent calls to the text() \r\n   *   function. Font size is measured in pixels.\r\n   *\r\n   *   @param theSize the size of the letters in units of \r\n   *   pixels\r\n   *   @chainable\r\n   */\r\n  textSize(theSize: number): p5\r\n  \r\n  /**\r\n   *   Sets/gets the current font size. This size will be \r\n   *   used in all subsequent calls to the text() \r\n   *   function. Font size is measured in pixels.\r\n   *\r\n   */\r\n  textSize(): number\r\n  \r\n  /**\r\n   *   Sets/gets the style of the text for system fonts \r\n   *   to NORMAL, ITALIC, or BOLD. Note: this may be is \r\n   *   overridden by CSS styling. For non-system fonts \r\n   *   (opentype, truetype, etc.) please load styled \r\n   *   fonts instead.\r\n   *\r\n   *   @param theStyle styling for text, either NORMAL, \r\n   *   ITALIC, or BOLD\r\n   *   @chainable\r\n   */\r\n  textStyle(theStyle: THE_STYLE): p5\r\n  \r\n  /**\r\n   *   Sets/gets the style of the text for system fonts \r\n   *   to NORMAL, ITALIC, or BOLD. Note: this may be is \r\n   *   overridden by CSS styling. For non-system fonts \r\n   *   (opentype, truetype, etc.) please load styled \r\n   *   fonts instead.\r\n   *\r\n   */\r\n  textStyle(): string\r\n  \r\n  /**\r\n   *   Calculates and returns the width of any character \r\n   *   or text string.\r\n   *\r\n   *   @param theText the String of characters to measure\r\n   */\r\n  textWidth(theText: string): number\r\n  \r\n  /**\r\n   *   Returns the ascent of the current font at its \r\n   *   current size. The ascent represents the distance, \r\n   *   in pixels, of the tallest character above the \r\n   *   baseline.\r\n   *\r\n   */\r\n  textAscent(): number\r\n  \r\n  /**\r\n   *   Returns the descent of the current font at its \r\n   *   current size. The descent represents the distance, \r\n   *   in pixels, of the character with the longest \r\n   *   descender below the baseline.\r\n   *\r\n   */\r\n  textDescent(): number\r\n  \r\n  // src/typography/loading_displaying.js\r\n  \r\n  /**\r\n   *   Loads an opentype font file (.otf, .ttf) from a \r\n   *   file or a URL, and returns a PFont Object. This \r\n   *   method is asynchronous, meaning it may not finish \r\n   *   before the next line in your sketch is executed.  \r\n   *   The path to the font should be relative to the \r\n   *   HTML file that links in your sketch. Loading an \r\n   *   from a URL or other remote location may be blocked \r\n   *   due to your browser's built-in security.\r\n   *\r\n   *   @param path name of the file or url to load\r\n   *   @param [callback] function to be executed after \r\n   *   loadFont() completes\r\n   *   @param [onError] function to be executed if an \r\n   *   error occurs\r\n   *   @return p5.Font object\r\n   */\r\n  loadFont(path: string, callback?: Function, onError?: Function): p5.Font\r\n  \r\n  /**\r\n   *   Draws text to the screen. Displays the information \r\n   *   specified in the first parameter on the screen in \r\n   *   the position specified by the additional \r\n   *   parameters. A default font will be used unless a \r\n   *   font is set with the textFont() function and a \r\n   *   default size will be used unless a font is set \r\n   *   with textSize(). Change the color of the text with \r\n   *   the fill() function. Change the outline of the \r\n   *   text with the stroke() and strokeWeight() \r\n   *   functions.  The text displays in relation to the \r\n   *   textAlign() function, which gives the option to \r\n   *   draw to the left, right, and center of the \r\n   *   coordinates. \r\n   * \r\n   *  \r\n   *   The x2 and y2 parameters define a rectangular area \r\n   *   to display within and may only be used with string \r\n   *   data. When these parameters are specified, they \r\n   *   are interpreted based on the current rectMode() \r\n   *   setting. Text that does not fit completely within \r\n   *   the rectangle specified will not be drawn to the \r\n   *   screen.\r\n   *\r\n   *   @param str the alphanumeric symbols to be \r\n   *   displayed\r\n   *   @param x x-coordinate of text\r\n   *   @param y y-coordinate of text\r\n   *   @param [x2] by default, the width of the text box, \r\n   *   see rectMode() for more info\r\n   *   @param [y2] by default, the height of the text \r\n   *   box, see rectMode() for more info\r\n   *   @chainable\r\n   */\r\n  text(str: string|object|any[]|number|boolean, x: number, y: number, x2?: number, y2?: number): p5\r\n  \r\n  /**\r\n   *   Sets the current font that will be drawn with the \r\n   *   text() function.\r\n   *\r\n   *   @return the current font\r\n   */\r\n  textFont(): object\r\n  \r\n  /**\r\n   *   Sets the current font that will be drawn with the \r\n   *   text() function.\r\n   *\r\n   *   @param font a font loaded via loadFont(), or a \r\n   *   String representing a web safe font (a font that \r\n   *   is generally available across all systems)\r\n   *   @param [size] the font size to use\r\n   *   @chainable\r\n   */\r\n  textFont(font: object|string, size?: number): p5\r\n  \r\n  // src/utilities/array_functions.js\r\n  \r\n  /**\r\n   *   Adds a value to the end of an array. Extends the \r\n   *   length of the array by one. Maps to Array.push().\r\n   *\r\n   *   @param array Array to append\r\n   *   @param value to be added to the Array\r\n   */\r\n  append(array: any[], value: any): void\r\n  \r\n  /**\r\n   *   Copies an array (or part of an array) to another \r\n   *   array. The src array is copied to the dst array, \r\n   *   beginning at the position specified by srcPosition \r\n   *   and into the position specified by dstPosition. \r\n   *   The number of elements to copy is determined by \r\n   *   length. Note that copying values overwrites \r\n   *   existing values in the destination array. To \r\n   *   append values instead of overwriting them, use \r\n   *   concat().  The simplified version with only two \r\n   *   arguments, arrayCopy(src, dst), copies an entire \r\n   *   array to another of the same size. It is \r\n   *   equivalent to arrayCopy(src, 0, dst, 0, \r\n   *   src.length). \r\n   * \r\n   *  \r\n   *   Using this function is far more efficient for \r\n   *   copying array data than iterating through a for() \r\n   *   loop and copying each element individually.\r\n   *\r\n   *   @param src the source Array\r\n   *   @param srcPosition starting position in the source \r\n   *   Array\r\n   *   @param dst the destination Array\r\n   *   @param dstPosition starting position in the \r\n   *   destination Array\r\n   *   @param length number of Array elements to be \r\n   *   copied\r\n   */\r\n  arrayCopy(src: any[], srcPosition: number, dst: any[], dstPosition: number, length: number): void\r\n  \r\n  /**\r\n   *   Copies an array (or part of an array) to another \r\n   *   array. The src array is copied to the dst array, \r\n   *   beginning at the position specified by srcPosition \r\n   *   and into the position specified by dstPosition. \r\n   *   The number of elements to copy is determined by \r\n   *   length. Note that copying values overwrites \r\n   *   existing values in the destination array. To \r\n   *   append values instead of overwriting them, use \r\n   *   concat().  The simplified version with only two \r\n   *   arguments, arrayCopy(src, dst), copies an entire \r\n   *   array to another of the same size. It is \r\n   *   equivalent to arrayCopy(src, 0, dst, 0, \r\n   *   src.length). \r\n   * \r\n   *  \r\n   *   Using this function is far more efficient for \r\n   *   copying array data than iterating through a for() \r\n   *   loop and copying each element individually.\r\n   *\r\n   *   @param src the source Array\r\n   *   @param dst the destination Array\r\n   *   @param [length] number of Array elements to be \r\n   *   copied\r\n   */\r\n  arrayCopy(src: any[], dst: any[], length?: number): void\r\n  \r\n  /**\r\n   *   Concatenates two arrays, maps to Array.concat(). \r\n   *   Does not modify the input arrays.\r\n   *\r\n   *   @param a first Array to concatenate\r\n   *   @param b second Array to concatenate\r\n   *   @return concatenated array\r\n   */\r\n  concat(a: any[], b: any[]): any[]\r\n  \r\n  /**\r\n   *   Reverses the order of an array, maps to \r\n   *   Array.reverse()\r\n   *\r\n   *   @param list Array to reverse\r\n   */\r\n  reverse(list: any[]): void\r\n  \r\n  /**\r\n   *   Decreases an array by one element and returns the \r\n   *   shortened array, maps to Array.pop().\r\n   *\r\n   *   @param list Array to shorten\r\n   *   @return shortened Array\r\n   */\r\n  shorten(list: any[]): any[]\r\n  \r\n  /**\r\n   *   Randomizes the order of the elements of an array. \r\n   *   Implements  Fisher-Yates Shuffle Algorithm.\r\n   *\r\n   *   @param array Array to shuffle\r\n   *   @param [bool] modify passed array\r\n   *   @return shuffled Array\r\n   */\r\n  shuffle(array: any[], bool?: boolean): any[]\r\n  \r\n  /**\r\n   *   Sorts an array of numbers from smallest to \r\n   *   largest, or puts an array of words in alphabetical \r\n   *   order. The original array is not modified; a \r\n   *   re-ordered array is returned. The count parameter \r\n   *   states the number of elements to sort. For \r\n   *   example, if there are 12 elements in an array and \r\n   *   count is set to 5, only the first 5 elements in \r\n   *   the array will be sorted.\r\n   *\r\n   *   @param list Array to sort\r\n   *   @param [count] number of elements to sort, \r\n   *   starting from 0\r\n   */\r\n  sort(list: any[], count?: number): void\r\n  \r\n  /**\r\n   *   Inserts a value or an array of values into an \r\n   *   existing array. The first parameter specifies the \r\n   *   initial array to be modified, and the second \r\n   *   parameter defines the data to be inserted. The \r\n   *   third parameter is an index value which specifies \r\n   *   the array position from which to insert data. \r\n   *   (Remember that array index numbering starts at \r\n   *   zero, so the first position is 0, the second \r\n   *   position is 1, and so on.)\r\n   *\r\n   *   @param list Array to splice into\r\n   *   @param value value to be spliced in\r\n   *   @param position in the array from which to insert \r\n   *   data\r\n   */\r\n  splice(list: any[], value: any, position: number): void\r\n  \r\n  /**\r\n   *   Extracts an array of elements from an existing \r\n   *   array. The list parameter defines the array from \r\n   *   which the elements will be copied, and the start \r\n   *   and count parameters specify which elements to \r\n   *   extract. If no count is given, elements will be \r\n   *   extracted from the start to the end of the array. \r\n   *   When specifying the start, remember that the first \r\n   *   array element is 0. This function does not change \r\n   *   the source array.\r\n   *\r\n   *   @param list Array to extract from\r\n   *   @param start position to begin\r\n   *   @param [count] number of values to extract\r\n   *   @return Array of extracted elements\r\n   */\r\n  subset(list: any[], start: number, count?: number): any[]\r\n  \r\n  // src/utilities/conversion.js\r\n  \r\n  /**\r\n   *   Converts a string to its floating point \r\n   *   representation. The contents of a string must \r\n   *   resemble a number, or NaN (not a number) will be \r\n   *   returned. For example, float(\"1234.56\") evaluates \r\n   *   to 1234.56, but float(\"giraffe\") will return NaN. \r\n   *   When an array of values is passed in, then an \r\n   *   array of floats of the same length is returned.\r\n   *\r\n   *   @param str float string to parse\r\n   *   @return floating point representation of string\r\n   */\r\n  float(str: string): number\r\n  \r\n  /**\r\n   *   Converts a boolean, string, or float to its \r\n   *   integer representation. When an array of values is \r\n   *   passed in, then an int array of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @param [radix] the radix to convert to (default: \r\n   *   10)\r\n   *   @return integer representation of value\r\n   */\r\n  int(n: string|boolean|number, radix?: number): number\r\n  \r\n  /**\r\n   *   Converts a boolean, string, or float to its \r\n   *   integer representation. When an array of values is \r\n   *   passed in, then an int array of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param ns values to parse\r\n   *   @return integer representation of values\r\n   */\r\n  int(ns: any[]): number[]\r\n  \r\n  /**\r\n   *   Converts a boolean, string or number to its string \r\n   *   representation. When an array of values is passed \r\n   *   in, then an array of strings of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @return string representation of value\r\n   */\r\n  str(n: string|boolean|number|any[]): string\r\n  \r\n  /**\r\n   *   Converts a number or string to its boolean \r\n   *   representation. For a number, any non-zero value \r\n   *   (positive or negative) evaluates to true, while \r\n   *   zero evaluates to false. For a string, the value \r\n   *   \"true\" evaluates to true, while any other value \r\n   *   evaluates to false. When an array of number or \r\n   *   string values is passed in, then a array of \r\n   *   booleans of the same length is returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @return boolean representation of value\r\n   */\r\n  boolean(n: string|boolean|number|any[]): boolean\r\n  \r\n  /**\r\n   *   Converts a number, string representation of a \r\n   *   number, or boolean to its byte representation. A \r\n   *   byte can be only a whole number between -128 and \r\n   *   127, so when a value outside of this range is \r\n   *   converted, it wraps around to the corresponding \r\n   *   byte representation. When an array of number, \r\n   *   string or boolean values is passed in, then an \r\n   *   array of bytes the same length is returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @return byte representation of value\r\n   */\r\n  byte(n: string|boolean|number): number\r\n  \r\n  /**\r\n   *   Converts a number, string representation of a \r\n   *   number, or boolean to its byte representation. A \r\n   *   byte can be only a whole number between -128 and \r\n   *   127, so when a value outside of this range is \r\n   *   converted, it wraps around to the corresponding \r\n   *   byte representation. When an array of number, \r\n   *   string or boolean values is passed in, then an \r\n   *   array of bytes the same length is returned.\r\n   *\r\n   *   @param ns values to parse\r\n   *   @return array of byte representation of values\r\n   */\r\n  byte(ns: any[]): number[]\r\n  \r\n  /**\r\n   *   Converts a number or string to its corresponding \r\n   *   single-character string representation. If a \r\n   *   string parameter is provided, it is first parsed \r\n   *   as an integer and then translated into a \r\n   *   single-character string. When an array of number \r\n   *   or string values is passed in, then an array of \r\n   *   single-character strings of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @return string representation of value\r\n   */\r\n  char(n: string|number): string\r\n  \r\n  /**\r\n   *   Converts a number or string to its corresponding \r\n   *   single-character string representation. If a \r\n   *   string parameter is provided, it is first parsed \r\n   *   as an integer and then translated into a \r\n   *   single-character string. When an array of number \r\n   *   or string values is passed in, then an array of \r\n   *   single-character strings of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param ns values to parse\r\n   *   @return array of string representation of values\r\n   */\r\n  char(ns: any[]): string[]\r\n  \r\n  /**\r\n   *   Converts a single-character string to its \r\n   *   corresponding integer representation. When an \r\n   *   array of single-character string values is passed \r\n   *   in, then an array of integers of the same length \r\n   *   is returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @return integer representation of value\r\n   */\r\n  unchar(n: string): number\r\n  \r\n  /**\r\n   *   Converts a single-character string to its \r\n   *   corresponding integer representation. When an \r\n   *   array of single-character string values is passed \r\n   *   in, then an array of integers of the same length \r\n   *   is returned.\r\n   *\r\n   *   @param ns values to parse\r\n   *   @return integer representation of values\r\n   */\r\n  unchar(ns: any[]): number[]\r\n  \r\n  /**\r\n   *   Converts a number to a string in its equivalent \r\n   *   hexadecimal notation. If a second parameter is \r\n   *   passed, it is used to set the number of characters \r\n   *   to generate in the hexadecimal notation. When an \r\n   *   array is passed in, an array of strings in \r\n   *   hexadecimal notation of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @return hexadecimal string representation of value\r\n   */\r\n  hex(n: number, digits?: number): string\r\n  \r\n  /**\r\n   *   Converts a number to a string in its equivalent \r\n   *   hexadecimal notation. If a second parameter is \r\n   *   passed, it is used to set the number of characters \r\n   *   to generate in the hexadecimal notation. When an \r\n   *   array is passed in, an array of strings in \r\n   *   hexadecimal notation of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param ns array of values to parse\r\n   *   @return hexadecimal string representation of \r\n   *   values\r\n   */\r\n  hex(ns: number[], digits?: number): string[]\r\n  \r\n  /**\r\n   *   Converts a string representation of a hexadecimal \r\n   *   number to its equivalent integer value. When an \r\n   *   array of strings in hexadecimal notation is passed \r\n   *   in, an array of integers of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param n value to parse\r\n   *   @return integer representation of hexadecimal \r\n   *   value\r\n   */\r\n  unhex(n: string): number\r\n  \r\n  /**\r\n   *   Converts a string representation of a hexadecimal \r\n   *   number to its equivalent integer value. When an \r\n   *   array of strings in hexadecimal notation is passed \r\n   *   in, an array of integers of the same length is \r\n   *   returned.\r\n   *\r\n   *   @param ns values to parse\r\n   *   @return integer representations of hexadecimal \r\n   *   value\r\n   */\r\n  unhex(ns: any[]): number[]\r\n  \r\n  // src/utilities/string_functions.js\r\n  \r\n  /**\r\n   *   Combines an array of Strings into one String, each \r\n   *   separated by the character(s) used for the \r\n   *   separator parameter. To join arrays of ints or \r\n   *   floats, it's necessary to first convert them to \r\n   *   Strings using nf() or nfs().\r\n   *\r\n   *   @param list array of Strings to be joined\r\n   *   @param separator String to be placed between each \r\n   *   item\r\n   *   @return joined String\r\n   */\r\n  join(list: any[], separator: string): string\r\n  \r\n  /**\r\n   *   This function is used to apply a regular \r\n   *   expression to a piece of text, and return matching \r\n   *   groups (elements found inside parentheses) as a \r\n   *   String array. If there are no matches, a null \r\n   *   value will be returned. If no groups are specified \r\n   *   in the regular expression, but the sequence \r\n   *   matches, an array of length 1 (with the matched \r\n   *   text as the first element of the array) will be \r\n   *   returned.  To use the function, first check to see \r\n   *   if the result is null. If the result is null, then \r\n   *   the sequence did not match at all. If the sequence \r\n   *   did match, an array is returned. \r\n   * \r\n   *  \r\n   *   If there are groups (specified by sets of \r\n   *   parentheses) in the regular expression, then the \r\n   *   contents of each will be returned in the array. \r\n   *   Element [0] of a regular expression match returns \r\n   *   the entire matching string, and the match groups \r\n   *   start at element [1] (the first group is [1], the \r\n   *   second [2], and so on).\r\n   *\r\n   *   @param str the String to be searched\r\n   *   @param regexp the regexp to be used for matching\r\n   *   @return Array of Strings found\r\n   */\r\n  match(str: string, regexp: string): string[]\r\n  \r\n  /**\r\n   *   This function is used to apply a regular \r\n   *   expression to a piece of text, and return a list \r\n   *   of matching groups (elements found inside \r\n   *   parentheses) as a two-dimensional String array. If \r\n   *   there are no matches, a null value will be \r\n   *   returned. If no groups are specified in the \r\n   *   regular expression, but the sequence matches, a \r\n   *   two dimensional array is still returned, but the \r\n   *   second dimension is only of length one.  To use \r\n   *   the function, first check to see if the result is \r\n   *   null. If the result is null, then the sequence did \r\n   *   not match at all. If the sequence did match, a 2D \r\n   *   array is returned. \r\n   * \r\n   *  \r\n   *   If there are groups (specified by sets of \r\n   *   parentheses) in the regular expression, then the \r\n   *   contents of each will be returned in the array. \r\n   *   Assuming a loop with counter variable i, element \r\n   *   [i][0] of a regular expression match returns the \r\n   *   entire matching string, and the match groups start \r\n   *   at element [i][1] (the first group is [i][1], the \r\n   *   second [i][2], and so on).\r\n   *\r\n   *   @param str the String to be searched\r\n   *   @param regexp the regexp to be used for matching\r\n   *   @return 2d Array of Strings found\r\n   */\r\n  matchAll(str: string, regexp: string): string[]\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings. There are two versions: one for \r\n   *   formatting floats, and one for formatting ints. \r\n   *   The values for the digits, left, and right \r\n   *   parameters should always be positive integers.\r\n   *\r\n   *   @param num the Number to format\r\n   *   @param [left] number of digits to the left of the \r\n   *   decimal point\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted String\r\n   */\r\n  nf(num: number|string, left?: number|string, right?: number|string): string\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings. There are two versions: one for \r\n   *   formatting floats, and one for formatting ints. \r\n   *   The values for the digits, left, and right \r\n   *   parameters should always be positive integers.\r\n   *\r\n   *   @param nums the Numbers to format\r\n   *   @param [left] number of digits to the left of the \r\n   *   decimal point\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted Strings\r\n   */\r\n  nf(nums: any[], left?: number|string, right?: number|string): string[]\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings and placing appropriate commas to mark \r\n   *   units of 1000. There are two versions: one for \r\n   *   formatting ints, and one for formatting an array \r\n   *   of ints. The value for the right parameter should \r\n   *   always be a positive integer.\r\n   *\r\n   *   @param num the Number to format\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted String\r\n   */\r\n  nfc(num: number|string, right?: number|string): string\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings and placing appropriate commas to mark \r\n   *   units of 1000. There are two versions: one for \r\n   *   formatting ints, and one for formatting an array \r\n   *   of ints. The value for the right parameter should \r\n   *   always be a positive integer.\r\n   *\r\n   *   @param nums the Numbers to format\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted Strings\r\n   */\r\n  nfc(nums: any[], right?: number|string): string[]\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings. Similar to nf() but puts a \"+\" in front \r\n   *   of positive numbers and a \"-\" in front of negative \r\n   *   numbers. There are two versions: one for \r\n   *   formatting floats, and one for formatting ints. \r\n   *   The values for left, and right parameters should \r\n   *   always be positive integers.\r\n   *\r\n   *   @param num the Number to format\r\n   *   @param [left] number of digits to the left of the \r\n   *   decimal point\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted String\r\n   */\r\n  nfp(num: number, left?: number, right?: number): string\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings. Similar to nf() but puts a \"+\" in front \r\n   *   of positive numbers and a \"-\" in front of negative \r\n   *   numbers. There are two versions: one for \r\n   *   formatting floats, and one for formatting ints. \r\n   *   The values for left, and right parameters should \r\n   *   always be positive integers.\r\n   *\r\n   *   @param nums the Numbers to format\r\n   *   @param [left] number of digits to the left of the \r\n   *   decimal point\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted Strings\r\n   */\r\n  nfp(nums: number[], left?: number, right?: number): string[]\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings. Similar to nf() but puts a \" \" (space) in \r\n   *   front of positive numbers and a \"-\" in front of \r\n   *   negative numbers. There are two versions: one for \r\n   *   formatting floats, and one for formatting ints. \r\n   *   The values for the digits, left, and right \r\n   *   parameters should always be positive integers.\r\n   *\r\n   *   @param num the Number to format\r\n   *   @param [left] number of digits to the left of the \r\n   *   decimal point\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted String\r\n   */\r\n  nfs(num: number, left?: number, right?: number): string\r\n  \r\n  /**\r\n   *   Utility function for formatting numbers into \r\n   *   strings. Similar to nf() but puts a \" \" (space) in \r\n   *   front of positive numbers and a \"-\" in front of \r\n   *   negative numbers. There are two versions: one for \r\n   *   formatting floats, and one for formatting ints. \r\n   *   The values for the digits, left, and right \r\n   *   parameters should always be positive integers.\r\n   *\r\n   *   @param nums the Numbers to format\r\n   *   @param [left] number of digits to the left of the \r\n   *   decimal point\r\n   *   @param [right] number of digits to the right of \r\n   *   the decimal point\r\n   *   @return formatted Strings\r\n   */\r\n  nfs(nums: any[], left?: number, right?: number): string[]\r\n  \r\n  /**\r\n   *   The split() function maps to String.split(), it \r\n   *   breaks a String into pieces using a character or \r\n   *   string as the delimiter. The delim parameter \r\n   *   specifies the character or characters that mark \r\n   *   the boundaries between each piece. A String[] \r\n   *   array is returned that contains each of the \r\n   *   pieces. The splitTokens() function works in a \r\n   *   similar fashion, except that it splits using a \r\n   *   range of characters instead of a specific \r\n   *   character or sequence.\r\n   *\r\n   *   @param value the String to be split\r\n   *   @param delim the String used to separate the data\r\n   *   @return Array of Strings\r\n   */\r\n  split(value: string, delim: string): string[]\r\n  \r\n  /**\r\n   *   The splitTokens() function splits a String at one \r\n   *   or many character delimiters or \"tokens.\" The \r\n   *   delim parameter specifies the character or \r\n   *   characters to be used as a boundary.  If no delim \r\n   *   characters are specified, any whitespace character \r\n   *   is used to split. Whitespace characters include \r\n   *   tab (\\t), line feed (\\n), carriage return (\\r), \r\n   *   form feed (\\f), and space.\r\n   *\r\n   *   @param value the String to be split\r\n   *   @param [delim] list of individual Strings that \r\n   *   will be used as separators\r\n   *   @return Array of Strings\r\n   */\r\n  splitTokens(value: string, delim?: string): string[]\r\n  \r\n  /**\r\n   *   Removes whitespace characters from the beginning \r\n   *   and end of a String. In addition to standard \r\n   *   whitespace characters such as space, carriage \r\n   *   return, and tab, this function also removes the \r\n   *   Unicode \"nbsp\" character.\r\n   *\r\n   *   @param str a String to be trimmed\r\n   *   @return a trimmed String\r\n   */\r\n  trim(str: string): string\r\n  \r\n  /**\r\n   *   Removes whitespace characters from the beginning \r\n   *   and end of a String. In addition to standard \r\n   *   whitespace characters such as space, carriage \r\n   *   return, and tab, this function also removes the \r\n   *   Unicode \"nbsp\" character.\r\n   *\r\n   *   @param strs an Array of Strings to be trimmed\r\n   *   @return an Array of trimmed Strings\r\n   */\r\n  trim(strs: any[]): string[]\r\n  \r\n  // src/utilities/time_date.js\r\n  \r\n  /**\r\n   *   p5.js communicates with the clock on your \r\n   *   computer. The day() function returns the current \r\n   *   day as a value from 1 - 31.\r\n   *\r\n   *   @return the current day\r\n   */\r\n  day(): number\r\n  \r\n  /**\r\n   *   p5.js communicates with the clock on your \r\n   *   computer. The hour() function returns the current \r\n   *   hour as a value from 0 - 23.\r\n   *\r\n   *   @return the current hour\r\n   */\r\n  hour(): number\r\n  \r\n  /**\r\n   *   p5.js communicates with the clock on your \r\n   *   computer. The minute() function returns the \r\n   *   current minute as a value from 0 - 59.\r\n   *\r\n   *   @return the current minute\r\n   */\r\n  minute(): number\r\n  \r\n  /**\r\n   *   Returns the number of milliseconds (thousandths of \r\n   *   a second) since starting the program. This \r\n   *   information is often used for timing events and \r\n   *   animation sequences.\r\n   *\r\n   *   @return the number of milliseconds since starting \r\n   *   the program\r\n   */\r\n  millis(): number\r\n  \r\n  /**\r\n   *   p5.js communicates with the clock on your \r\n   *   computer. The month() function returns the current \r\n   *   month as a value from 1 - 12.\r\n   *\r\n   *   @return the current month\r\n   */\r\n  month(): number\r\n  \r\n  /**\r\n   *   p5.js communicates with the clock on your \r\n   *   computer. The second() function returns the \r\n   *   current second as a value from 0 - 59.\r\n   *\r\n   *   @return the current second\r\n   */\r\n  second(): number\r\n  \r\n  /**\r\n   *   p5.js communicates with the clock on your \r\n   *   computer. The year() function returns the current \r\n   *   year as an integer (2014, 2015, 2016, etc).\r\n   *\r\n   *   @return the current year\r\n   */\r\n  year(): number\r\n  \r\n  // src/webgl/camera.js\r\n  \r\n  /**\r\n   *   Sets camera position for a 3D sketch. The function \r\n   *   behaves similarly gluLookAt, except that it \r\n   *   replaces the existing modelview matrix instead of \r\n   *   applying any transformations calculated here on \r\n   *   top of the existing model view. When called with \r\n   *   no arguments, this function sets a default camera \r\n   *   equivalent to calling camera(0, 0, (height/2.0) / \r\n   *   tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);\r\n   *\r\n   *   @param [x] camera position value on x axis\r\n   *   @param [y] camera position value on y axis\r\n   *   @param [z] camera position value on z axis\r\n   *   @param [centerX] x coordinate representing center \r\n   *   of the sketch\r\n   *   @param [centerY] y coordinate representing center \r\n   *   of the sketch\r\n   *   @param [centerZ] z coordinate representing center \r\n   *   of the sketch\r\n   *   @param [upX] x component of direction 'up' from \r\n   *   camera\r\n   *   @param [upY] y component of direction 'up' from \r\n   *   camera\r\n   *   @param [upZ] z component of direction 'up' from \r\n   *   camera\r\n   *   @chainable\r\n   */\r\n  camera(x?: number, y?: number, z?: number, centerX?: number, centerY?: number, centerZ?: number, upX?: number, upY?: number, upZ?: number): p5\r\n  \r\n  /**\r\n   *   Sets perspective camera. When called with no \r\n   *   arguments, the defaults provided are equivalent to \r\n   *   perspective(PI/3.0, width/height, cameraZ/10.0, \r\n   *   cameraZ10.0) where cameraZ is ((height/2.0) / \r\n   *   tan(PI60.0/360.0));\r\n   *\r\n   *   @param [fovy] camera frustum vertical field of \r\n   *   view, from bottom to top of view, in angleMode \r\n   *   units\r\n   *   @param [aspect] camera frustum aspect ratio\r\n   *   @param [near] frustum near plane length\r\n   *   @param [far] frustum far plane length\r\n   *   @chainable\r\n   */\r\n  perspective(fovy?: number, aspect?: number, near?: number, far?: number): p5\r\n  \r\n  /**\r\n   *   Setup ortho camera\r\n   *\r\n   *   @param [left] camera frustum left plane\r\n   *   @param [right] camera frustum right plane\r\n   *   @param [bottom] camera frustum bottom plane\r\n   *   @param [top] camera frustum top plane\r\n   *   @param [near] camera frustum near plane\r\n   *   @param [far] camera frustum far plane\r\n   *   @chainable\r\n   */\r\n  ortho(left?: number, right?: number, bottom?: number, top?: number, near?: number, far?: number): p5\r\n  \r\n  // src/webgl/interaction.js\r\n  \r\n  orbitControl(): p5\r\n  \r\n  // src/webgl/light.js\r\n  \r\n  /**\r\n   *   Creates an ambient light with a color\r\n   *\r\n   *   @param v1 red or hue value relative to the current \r\n   *   color range\r\n   *   @param v2 green or saturation value relative to \r\n   *   the current color range\r\n   *   @param v3 blue or brightness value relative to the \r\n   *   current color range\r\n   *   @chainable\r\n   */\r\n  ambientLight(v1: number, v2: number, v3: number, alpha?: number): p5\r\n  \r\n  /**\r\n   *   Creates an ambient light with a color\r\n   *\r\n   *   @param value a color string\r\n   *   @chainable\r\n   */\r\n  ambientLight(value: string): p5\r\n  \r\n  /**\r\n   *   Creates an ambient light with a color\r\n   *\r\n   *   @param gray a gray value\r\n   *   @chainable\r\n   */\r\n  ambientLight(gray: number, alpha?: number): p5\r\n  \r\n  /**\r\n   *   Creates an ambient light with a color\r\n   *\r\n   *   @param values an array containing the \r\n   *   red,green,blue & and alpha components of the color\r\n   *   @chainable\r\n   */\r\n  ambientLight(values: number[]): p5\r\n  \r\n  /**\r\n   *   Creates an ambient light with a color\r\n   *\r\n   *   @param color the ambient light color\r\n   *   @chainable\r\n   */\r\n  ambientLight(color: p5.Color): p5\r\n  \r\n  /**\r\n   *   Creates a directional light with a color and a \r\n   *   direction\r\n   *\r\n   *   @param v1 red or hue value (depending on the \r\n   *   current color mode),\r\n   *   @param v2 green or saturation value\r\n   *   @param v3 blue or brightness value\r\n   *   @param position the direction of the light\r\n   *   @chainable\r\n   */\r\n  directionalLight(v1: number, v2: number, v3: number, position: p5.Vector): p5\r\n  \r\n  /**\r\n   *   Creates a directional light with a color and a \r\n   *   direction\r\n   *\r\n   *   @param color color Array, CSS color string, or \r\n   *   p5.Color value\r\n   *   @param x x axis direction\r\n   *   @param y y axis direction\r\n   *   @param z z axis direction\r\n   *   @chainable\r\n   */\r\n  directionalLight(color: number[]|string|p5.Color, x: number, y: number, z: number): p5\r\n  \r\n  /**\r\n   *   Creates a directional light with a color and a \r\n   *   direction\r\n   *\r\n   *   @param color color Array, CSS color string, or \r\n   *   p5.Color value\r\n   *   @param position the direction of the light\r\n   *   @chainable\r\n   */\r\n  directionalLight(color: number[]|string|p5.Color, position: p5.Vector): p5\r\n  \r\n  /**\r\n   *   Creates a directional light with a color and a \r\n   *   direction\r\n   *\r\n   *   @param v1 red or hue value (depending on the \r\n   *   current color mode),\r\n   *   @param v2 green or saturation value\r\n   *   @param v3 blue or brightness value\r\n   *   @param x x axis direction\r\n   *   @param y y axis direction\r\n   *   @param z z axis direction\r\n   *   @chainable\r\n   */\r\n  directionalLight(v1: number, v2: number, v3: number, x: number, y: number, z: number): p5\r\n  \r\n  /**\r\n   *   Creates a point light with a color and a light \r\n   *   position\r\n   *\r\n   *   @param v1 red or hue value (depending on the \r\n   *   current color mode),\r\n   *   @param v2 green or saturation value\r\n   *   @param v3 blue or brightness value\r\n   *   @param x x axis position\r\n   *   @param y y axis position\r\n   *   @param z z axis position\r\n   *   @chainable\r\n   */\r\n  pointLight(v1: number, v2: number, v3: number, x: number, y: number, z: number): p5\r\n  \r\n  /**\r\n   *   Creates a point light with a color and a light \r\n   *   position\r\n   *\r\n   *   @param v1 red or hue value (depending on the \r\n   *   current color mode),\r\n   *   @param v2 green or saturation value\r\n   *   @param v3 blue or brightness value\r\n   *   @param position the position of the light\r\n   *   @chainable\r\n   */\r\n  pointLight(v1: number, v2: number, v3: number, position: p5.Vector): p5\r\n  \r\n  /**\r\n   *   Creates a point light with a color and a light \r\n   *   position\r\n   *\r\n   *   @param color color Array, CSS color string, or \r\n   *   p5.Color value\r\n   *   @param x x axis position\r\n   *   @param y y axis position\r\n   *   @param z z axis position\r\n   *   @chainable\r\n   */\r\n  pointLight(color: number[]|string|p5.Color, x: number, y: number, z: number): p5\r\n  \r\n  /**\r\n   *   Creates a point light with a color and a light \r\n   *   position\r\n   *\r\n   *   @param color color Array, CSS color string, or \r\n   *   p5.Color value\r\n   *   @param position the position of the light\r\n   *   @chainable\r\n   */\r\n  pointLight(color: number[]|string|p5.Color, position: p5.Vector): p5\r\n  \r\n  // src/webgl/loading.js\r\n  \r\n  /**\r\n   *   Load a 3d model from an OBJ file.  One of the \r\n   *   limitations of the OBJ format is that it doesn't \r\n   *   have a built-in sense of scale. This means that \r\n   *   models exported from different programs might be \r\n   *   very different sizes. If your model isn't \r\n   *   displaying, try calling loadModel() with the \r\n   *   normalized parameter set to true. This will resize \r\n   *   the model to a scale appropriate for p5. You can \r\n   *   also make additional changes to the final size of \r\n   *   your model with the scale() function.\r\n   *\r\n   *   @param path Path of the model to be loaded\r\n   *   @param normalize If true, scale the model to a \r\n   *   standardized size when loading\r\n   *   @param [successCallback] Function to be called \r\n   *   once the model is loaded. Will be passed the 3D \r\n   *   model object.\r\n   *   @param [failureCallback] called with event error \r\n   *   if the image fails to load.\r\n   *   @return the p5.Geometry object\r\n   */\r\n  loadModel(path: string, normalize: boolean, successCallback?: (p1: p5.Geometry) => any, failureCallback?: (p1: Event) => any): p5.Geometry\r\n  \r\n  /**\r\n   *   Load a 3d model from an OBJ file.  One of the \r\n   *   limitations of the OBJ format is that it doesn't \r\n   *   have a built-in sense of scale. This means that \r\n   *   models exported from different programs might be \r\n   *   very different sizes. If your model isn't \r\n   *   displaying, try calling loadModel() with the \r\n   *   normalized parameter set to true. This will resize \r\n   *   the model to a scale appropriate for p5. You can \r\n   *   also make additional changes to the final size of \r\n   *   your model with the scale() function.\r\n   *\r\n   *   @param path Path of the model to be loaded\r\n   *   @param [successCallback] Function to be called \r\n   *   once the model is loaded. Will be passed the 3D \r\n   *   model object.\r\n   *   @param [failureCallback] called with event error \r\n   *   if the image fails to load.\r\n   *   @return the p5.Geometry object\r\n   */\r\n  loadModel(path: string, successCallback?: (p1: p5.Geometry) => any, failureCallback?: (p1: Event) => any): p5.Geometry\r\n  \r\n  /**\r\n   *   Render a 3d model to the screen.\r\n   *\r\n   *   @param model Loaded 3d model to be rendered\r\n   */\r\n  model(model: p5.Geometry): void\r\n  \r\n  // src/webgl/material.js\r\n  \r\n  /**\r\n   *   Loads a custom shader from the provided vertex and \r\n   *   fragment shader paths. The shader files are loaded \r\n   *   asynchronously in the background, so this method \r\n   *   should be used in preload(). For now, there are \r\n   *   three main types of shaders. p5 will automatically \r\n   *   supply appropriate vertices, normals, colors, and \r\n   *   lighting attributes if the parameters defined in \r\n   *   the shader match the names.\r\n   *\r\n   *   @param [vertFilename] path to file containing \r\n   *   vertex shader source code\r\n   *   @param [fragFilename] path to file containing \r\n   *   fragment shader source code\r\n   *   @return a shader object created from the provided \r\n   *   vertex and fragment shader files.\r\n   */\r\n  loadShader(vertFilename?: string, fragFilename?: string): p5.Shader\r\n  createShader(vertSrc: string, fragSrc: string): p5.Shader\r\n  \r\n  /**\r\n   *   The shader() function lets the user provide a \r\n   *   custom shader to fill in shapes in WEBGL mode. \r\n   *   Users can create their own shaders by loading \r\n   *   vertex and fragment shaders with loadShader().\r\n   *\r\n   *   @param [s] the desired p5.Shader to use for \r\n   *   rendering shapes.\r\n   *   @chainable\r\n   */\r\n  shader(s?: p5.Shader): p5\r\n  \r\n  /**\r\n   *   Normal material for geometry. You can view all \r\n   *   possible materials in this example.\r\n   *\r\n   *   @chainable\r\n   */\r\n  normalMaterial(): p5\r\n  \r\n  /**\r\n   *   Texture for geometry. You can view other possible \r\n   *   materials in this example.\r\n   *\r\n   *   @param tex 2-dimensional graphics to render as \r\n   *   texture\r\n   *   @chainable\r\n   */\r\n  texture(tex: p5.Image|p5.MediaElement|p5.Graphics): p5\r\n  \r\n  /**\r\n   *   Ambient material for geometry with a given color. \r\n   *   You can view all possible materials in this \r\n   *   example.\r\n   *\r\n   *   @param v1 gray value, red or hue value (depending \r\n   *   on the current color mode),\r\n   *   @param [v2] green or saturation value\r\n   *   @param [v3] blue or brightness value\r\n   *   @param [a] opacity\r\n   *   @chainable\r\n   */\r\n  ambientMaterial(v1: number, v2?: number, v3?: number, a?: number): p5\r\n  \r\n  /**\r\n   *   Ambient material for geometry with a given color. \r\n   *   You can view all possible materials in this \r\n   *   example.\r\n   *\r\n   *   @param color color, color Array, or CSS color \r\n   *   string\r\n   *   @chainable\r\n   */\r\n  ambientMaterial(color: number[]|string|p5.Color): p5\r\n  \r\n  /**\r\n   *   Specular material for geometry with a given color. \r\n   *   You can view all possible materials in this \r\n   *   example.\r\n   *\r\n   *   @param v1 gray value, red or hue value (depending \r\n   *   on the current color mode),\r\n   *   @param [v2] green or saturation value\r\n   *   @param [v3] blue or brightness value\r\n   *   @param [a] opacity\r\n   *   @chainable\r\n   */\r\n  specularMaterial(v1: number, v2?: number, v3?: number, a?: number): p5\r\n  \r\n  /**\r\n   *   Specular material for geometry with a given color. \r\n   *   You can view all possible materials in this \r\n   *   example.\r\n   *\r\n   *   @param color color Array, or CSS color string\r\n   *   @chainable\r\n   */\r\n  specularMaterial(color: number[]|string|p5.Color): p5\r\n  \r\n  // src/webgl/p5.RendererGL.js\r\n  \r\n  /**\r\n   *   Set attributes for the WebGL Drawing context. This \r\n   *   is a way of adjusting ways that the WebGL renderer \r\n   *   works to fine-tune the display and performance. \r\n   *   This should be put in setup(). The available \r\n   *   attributes are:  alpha - indicates if the canvas \r\n   *   contains an alpha buffer default is true \r\n   * \r\n   *  \r\n   *   depth - indicates whether the drawing buffer has a \r\n   *   depth buffer of at least 16 bits - default is true \r\n   * \r\n   *  \r\n   *   stencil - indicates whether the drawing buffer has \r\n   *   a stencil buffer of at least 8 bits \r\n   * \r\n   *  \r\n   *   antialias - indicates whether or not to perform \r\n   *   anti-aliasing default is false \r\n   * \r\n   *  \r\n   *   premultipliedAlpha - indicates that the page \r\n   *   compositor will assume the drawing buffer contains \r\n   *   colors with pre-multiplied alpha default is false \r\n   * \r\n   *  \r\n   *   preserveDrawingBuffer - if true the buffers will \r\n   *   not be cleared and and will preserve their values \r\n   *   until cleared or overwritten by author (note that \r\n   *   p5 clears automatically on draw loop) default is \r\n   *   true \r\n   * \r\n   *  \r\n   *   perPixelLighting - if true, per-pixel lighting \r\n   *   will be used in the lighting shader. default is \r\n   *   false\r\n   *\r\n   *   @param key Name of attribute\r\n   *   @param value New value of named attribute\r\n   */\r\n  setAttributes(key: string, value: boolean): void\r\n  \r\n  /**\r\n   *   Set attributes for the WebGL Drawing context. This \r\n   *   is a way of adjusting ways that the WebGL renderer \r\n   *   works to fine-tune the display and performance. \r\n   *   This should be put in setup(). The available \r\n   *   attributes are:  alpha - indicates if the canvas \r\n   *   contains an alpha buffer default is true \r\n   * \r\n   *  \r\n   *   depth - indicates whether the drawing buffer has a \r\n   *   depth buffer of at least 16 bits - default is true \r\n   * \r\n   *  \r\n   *   stencil - indicates whether the drawing buffer has \r\n   *   a stencil buffer of at least 8 bits \r\n   * \r\n   *  \r\n   *   antialias - indicates whether or not to perform \r\n   *   anti-aliasing default is false \r\n   * \r\n   *  \r\n   *   premultipliedAlpha - indicates that the page \r\n   *   compositor will assume the drawing buffer contains \r\n   *   colors with pre-multiplied alpha default is false \r\n   * \r\n   *  \r\n   *   preserveDrawingBuffer - if true the buffers will \r\n   *   not be cleared and and will preserve their values \r\n   *   until cleared or overwritten by author (note that \r\n   *   p5 clears automatically on draw loop) default is \r\n   *   true \r\n   * \r\n   *  \r\n   *   perPixelLighting - if true, per-pixel lighting \r\n   *   will be used in the lighting shader. default is \r\n   *   false\r\n   *\r\n   *   @param obj object with key-value pairs\r\n   */\r\n  setAttributes(obj: object): void\r\n  \r\n  // src/webgl/primitives.js\r\n  \r\n  /**\r\n   *   Draw a plane with given a width and height\r\n   *\r\n   *   @param [width] width of the plane\r\n   *   @param [height] height of the plane\r\n   *   @param [detailX] Optional number of triangle \r\n   *   subdivisions in x-dimension\r\n   *   @param [detailY] Optional number of triangle \r\n   *   subdivisions in y-dimension\r\n   *   @chainable\r\n   */\r\n  plane(width?: number, height?: number, detailX?: number, detailY?: number): p5\r\n  \r\n  /**\r\n   *   Draw a box with given width, height and depth\r\n   *\r\n   *   @param [width] width of the box\r\n   *   @param [Height] height of the box\r\n   *   @param [depth] depth of the box\r\n   *   @param [detailX] Optional number of triangle \r\n   *   subdivisions in x-dimension\r\n   *   @param [detailY] Optional number of triangle \r\n   *   subdivisions in y-dimension\r\n   *   @chainable\r\n   */\r\n  box(width?: number, Height?: number, depth?: number, detailX?: number, detailY?: number): p5\r\n  \r\n  /**\r\n   *   Draw a sphere with given radius\r\n   *\r\n   *   @param [radius] radius of circle\r\n   *   @param [detailX] number of segments, the more \r\n   *   segments the smoother geometry default is 24\r\n   *   @param [detailY] number of segments, the more \r\n   *   segments the smoother geometry default is 16\r\n   *   @chainable\r\n   */\r\n  sphere(radius?: number, detailX?: number, detailY?: number): p5\r\n  \r\n  /**\r\n   *   Draw a cylinder with given radius and height\r\n   *\r\n   *   @param [radius] radius of the surface\r\n   *   @param [height] height of the cylinder\r\n   *   @param [detailX] number of segments, the more \r\n   *   segments the smoother geometry default is 24\r\n   *   @param [detailY] number of segments in \r\n   *   y-dimension, the more segments the smoother \r\n   *   geometry default is 1\r\n   *   @param [bottomCap] whether to draw the bottom of \r\n   *   the cylinder\r\n   *   @param [topCap] whether to draw the top of the \r\n   *   cylinder\r\n   *   @chainable\r\n   */\r\n  cylinder(radius?: number, height?: number, detailX?: number, detailY?: number, bottomCap?: boolean, topCap?: boolean): p5\r\n  \r\n  /**\r\n   *   Draw a cone with given radius and height\r\n   *\r\n   *   @param [radius] radius of the bottom surface\r\n   *   @param [height] height of the cone\r\n   *   @param [detailX] number of segments, the more \r\n   *   segments the smoother geometry default is 24\r\n   *   @param [detailY] number of segments, the more \r\n   *   segments the smoother geometry default is 1\r\n   *   @param [cap] whether to draw the base of the cone\r\n   *   @chainable\r\n   */\r\n  cone(radius?: number, height?: number, detailX?: number, detailY?: number, cap?: boolean): p5\r\n  \r\n  /**\r\n   *   Draw an ellipsoid with given radius\r\n   *\r\n   *   @param [radiusx] xradius of circle\r\n   *   @param [radiusy] yradius of circle\r\n   *   @param [radiusz] zradius of circle\r\n   *   @param [detailX] number of segments, the more \r\n   *   segments the smoother geometry default is 24. \r\n   *   Avoid detail number above 150, it may crash the \r\n   *   browser.\r\n   *   @param [detailY] number of segments, the more \r\n   *   segments the smoother geometry default is 16. \r\n   *   Avoid detail number above 150, it may crash the \r\n   *   browser.\r\n   *   @chainable\r\n   */\r\n  ellipsoid(radiusx?: number, radiusy?: number, radiusz?: number, detailX?: number, detailY?: number): p5\r\n  \r\n  /**\r\n   *   Draw a torus with given radius and tube radius\r\n   *\r\n   *   @param [radius] radius of the whole ring\r\n   *   @param [tubeRadius] radius of the tube\r\n   *   @param [detailX] number of segments in \r\n   *   x-dimension, the more segments the smoother \r\n   *   geometry default is 24\r\n   *   @param [detailY] number of segments in \r\n   *   y-dimension, the more segments the smoother \r\n   *   geometry default is 16\r\n   *   @chainable\r\n   */\r\n  torus(radius?: number, tubeRadius?: number, detailX?: number, detailY?: number): p5\r\n  \r\n  // lib/addons/p5.sound.js\r\n  \r\n  /**\r\n   *   Returns a number representing the sample rate, in \r\n   *   samples per second, of all sound objects in this \r\n   *   audio context. It is determined by the sampling \r\n   *   rate of your operating system's sound card, and it \r\n   *   is not currently possile to change. It is often \r\n   *   44100, or twice the range of human hearing.\r\n   *\r\n   *   @return samplerate samples per second\r\n   */\r\n  sampleRate(): number\r\n  \r\n  /**\r\n   *   Returns the closest MIDI note value for a given \r\n   *   frequency.\r\n   *\r\n   *   @param frequency A freqeuncy, for example, the \"A\" \r\n   *   above Middle C is 440Hz\r\n   *   @return MIDI note value\r\n   */\r\n  freqToMidi(frequency: number): number\r\n  \r\n  /**\r\n   *   Returns the frequency value of a MIDI note value. \r\n   *   General MIDI treats notes as integers where middle \r\n   *   C is 60, C# is 61, D is 62 etc. Useful for \r\n   *   generating musical frequencies with oscillators.\r\n   *\r\n   *   @param midiNote The number of a MIDI note\r\n   *   @return Frequency value of the given MIDI note\r\n   */\r\n  midiToFreq(midiNote: number): number\r\n  \r\n  /**\r\n   *   List the SoundFile formats that you will include. \r\n   *   LoadSound will search your directory for these \r\n   *   extensions, and will pick a format that is \r\n   *   compatable with the client's web browser. Here is \r\n   *   a free online file converter.\r\n   *\r\n   *   @param [formats] i.e. 'mp3', 'wav', 'ogg'\r\n   */\r\n  soundFormats(formats?: string): void\r\n  \r\n  // Properties from p5.dom\r\n  \r\n  // lib/addons/p5.dom.js\r\n  \r\n  /**\r\n   *   Searches the page for an element with the given \r\n   *   ID, class, or tag name (using the '#' or '.' \r\n   *   prefixes to specify an ID or class respectively, \r\n   *   and none for a tag) and returns it as a \r\n   *   p5.Element. If a class or tag name is given with \r\n   *   more than 1 element, only the first element will \r\n   *   be returned. The DOM node itself can be accessed \r\n   *   with .elt. Returns null if none found. You can \r\n   *   also specify a container to search within.\r\n   *\r\n   *   @param name id, class, or tag name of element to \r\n   *   search for\r\n   *   @param [container] id, p5.Element, or HTML element \r\n   *   to search within\r\n   *   @return p5.Element containing node found\r\n   */\r\n  select(name: string, container?: string|p5.Element|HTMLElement): object|p5.Element|any\r\n  \r\n  /**\r\n   *   Searches the page for elements with the given \r\n   *   class or tag name (using the '.' prefix to specify \r\n   *   a class and no prefix for a tag) and returns them \r\n   *   as p5.Elements in an array. The DOM node itself \r\n   *   can be accessed with .elt. Returns an empty array \r\n   *   if none found. You can also specify a container to \r\n   *   search within.\r\n   *\r\n   *   @param name class or tag name of elements to \r\n   *   search for\r\n   *   @param [container] id, p5.Element, or HTML element \r\n   *   to search within\r\n   *   @return Array of p5.Elements containing nodes \r\n   *   found\r\n   */\r\n  selectAll(name: string, container?: string): any[]\r\n  \r\n  /**\r\n   *   Removes all elements created by p5, except any \r\n   *   canvas / graphics elements created by createCanvas \r\n   *   or createGraphics. Event handlers are removed, and \r\n   *   element is removed from the DOM.\r\n   *\r\n   */\r\n  removeElements(): void\r\n  \r\n  /**\r\n   *   Creates a <div></div> element in the DOM with \r\n   *   given inner HTML. Appends to the container node if \r\n   *   one is specified, otherwise appends to body.\r\n   *\r\n   *   @param [html] inner HTML for element created\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createDiv(html?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates a <p></p> element in the DOM with given \r\n   *   inner HTML. Used for paragraph length text. \r\n   *   Appends to the container node if one is specified, \r\n   *   otherwise appends to body.\r\n   *\r\n   *   @param [html] inner HTML for element created\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createP(html?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates a <span></span> element in the DOM with \r\n   *   given inner HTML. Appends to the container node if \r\n   *   one is specified, otherwise appends to body.\r\n   *\r\n   *   @param [html] inner HTML for element created\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createSpan(html?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates an <img> element in the DOM with given src \r\n   *   and alternate text. Appends to the container node \r\n   *   if one is specified, otherwise appends to body.\r\n   *\r\n   *   @param src src path or url for image\r\n   *   @param [alt] alternate text to be used if image \r\n   *   does not load\r\n   *   @param [successCallback] callback to be called \r\n   *   once image data is loaded\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createImg(src: string, alt?: string, successCallback?: Function): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates an <a></a> element in the DOM for \r\n   *   including a hyperlink. Appends to the container \r\n   *   node if one is specified, otherwise appends to \r\n   *   body.\r\n   *\r\n   *   @param href url of page to link to\r\n   *   @param html inner html of link element to display\r\n   *   @param [target] target where new link should open, \r\n   *   could be _blank, _self, _parent, _top.\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createA(href: string, html: string, target?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates a slider <input></input> element in the \r\n   *   DOM. Use .size() to set the display length of the \r\n   *   slider. Appends to the container node if one is \r\n   *   specified, otherwise appends to body.\r\n   *\r\n   *   @param min minimum value of the slider\r\n   *   @param max maximum value of the slider\r\n   *   @param [value] default value of the slider\r\n   *   @param [step] step size for each tick of the \r\n   *   slider (if step is set to 0, the slider will move \r\n   *   continuously from the minimum to the maximum \r\n   *   value)\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createSlider(min: number, max: number, value?: number, step?: number): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates a <button></button> element in the DOM. \r\n   *   Use .size() to set the display size of the button. \r\n   *   Use .mousePressed() to specify behavior on press. \r\n   *   Appends to the container node if one is specified, \r\n   *   otherwise appends to body.\r\n   *\r\n   *   @param label label displayed on the button\r\n   *   @param [value] value of the button\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createButton(label: string, value?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates a checkbox <input></input> element in the \r\n   *   DOM. Calling .checked() on a checkbox returns if \r\n   *   it is checked or not\r\n   *\r\n   *   @param [label] label displayed after checkbox\r\n   *   @param [value] value of the checkbox; checked is \r\n   *   true, unchecked is false\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createCheckbox(label?: string, value?: boolean): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates a dropdown menu <select></select> element \r\n   *   in the DOM. It also helps to assign select-box \r\n   *   methods to p5.Element when selecting existing \r\n   *   select box\r\n   *\r\n   *   @param [multiple] true if dropdown should support \r\n   *   multiple selections\r\n   */\r\n  createSelect(multiple?: boolean): p5.Element\r\n  \r\n  /**\r\n   *   Creates a dropdown menu <select></select> element \r\n   *   in the DOM. It also helps to assign select-box \r\n   *   methods to p5.Element when selecting existing \r\n   *   select box\r\n   *\r\n   *   @param existing DOM select element\r\n   */\r\n  createSelect(existing: object): p5.Element\r\n  \r\n  /**\r\n   *   Creates a radio button <input></input> element in \r\n   *   the DOM. The .option() method can be used to set \r\n   *   options for the radio after it is created. The \r\n   *   .value() method will return the currently selected \r\n   *   option.\r\n   *\r\n   *   @param [divId] the id and name of the created div \r\n   *   and input field respectively\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createRadio(divId?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates an <input></input> element in the DOM for \r\n   *   text input. Use .size() to set the display length \r\n   *   of the box. Appends to the container node if one \r\n   *   is specified, otherwise appends to body.\r\n   *\r\n   *   @param [value] default value of the input box\r\n   *   @param [type] type of text, ie text, password etc. \r\n   *   Defaults to text\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createInput(value?: string, type?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates an <input></input> element in the DOM of \r\n   *   type 'file'. This allows users to select local \r\n   *   files for use in a sketch.\r\n   *\r\n   *   @param [callback] callback function for when a \r\n   *   file loaded\r\n   *   @param [multiple] optional to allow multiple files \r\n   *   selected\r\n   *   @return pointer to p5.Element holding created DOM \r\n   *   element\r\n   */\r\n  createFileInput(callback?: Function, multiple?: string): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates an HTML5 <video> element in the DOM for \r\n   *   simple playback of audio/video. Shown by default, \r\n   *   can be hidden with .hide() and drawn into canvas \r\n   *   using video(). Appends to the container node if \r\n   *   one is specified, otherwise appends to body. The \r\n   *   first parameter can be either a single string path \r\n   *   to a video file, or an array of string paths to \r\n   *   different formats of the same video. This is \r\n   *   useful for ensuring that your video can play \r\n   *   across different browsers, as each supports \r\n   *   different formats. See this page for further \r\n   *   information about supported formats.\r\n   *\r\n   *   @param src path to a video file, or array of paths \r\n   *   for supporting different browsers\r\n   *   @param [callback] callback function to be called \r\n   *   upon 'canplaythrough' event fire, that is, when \r\n   *   the browser can play the media, and estimates that \r\n   *   enough data has been loaded to play the media up \r\n   *   to its end without having to stop for further \r\n   *   buffering of content\r\n   *   @return pointer to video p5.Element\r\n   */\r\n  createVideo(src: string|any[], callback?: object): p5.MediaElement|p5.Element\r\n  \r\n  /**\r\n   *   Creates a hidden HTML5 <audio> element in the DOM \r\n   *   for simple audio playback. Appends to the \r\n   *   container node if one is specified, otherwise \r\n   *   appends to body. The first parameter can be either \r\n   *   a single string path to a audio file, or an array \r\n   *   of string paths to different formats of the same \r\n   *   audio. This is useful for ensuring that your audio \r\n   *   can play across different browsers, as each \r\n   *   supports different formats. See this page for \r\n   *   further information about supported formats.\r\n   *\r\n   *   @param [src] path to an audio file, or array of \r\n   *   paths for supporting different browsers\r\n   *   @param [callback] callback function to be called \r\n   *   upon 'canplaythrough' event fire, that is, when \r\n   *   the browser can play the media, and estimates that \r\n   *   enough data has been loaded to play the media up \r\n   *   to its end without having to stop for further \r\n   *   buffering of content\r\n   *   @return pointer to audio p5.Element /**\r\n   */\r\n  createAudio(src?: string|string[], callback?: object): p5.MediaElement|p5.Element\r\n  \r\n  /**\r\n   *   Creates a new HTML5 <video> element that contains \r\n   *   the audio/video feed from a webcam. The element is \r\n   *   separate from the canvas and is displayed by \r\n   *   default. The element can be hidden using .hide(). \r\n   *   The feed can be drawn onto the canvas using \r\n   *   image(). More specific properties of the feed can \r\n   *   be passing in a Constraints object. See the  W3C \r\n   *   spec for possible properties. Note that not all of \r\n   *   these are supported by all browsers. \r\n   * \r\n   *   Security note: A new browser security \r\n   *   specification requires that getUserMedia, which is \r\n   *   behind createCapture(), only works when you're \r\n   *   running the code locally, or on HTTPS. Learn more \r\n   *   here and here.\r\n   *\r\n   *   @param type type of capture, either VIDEO or AUDIO \r\n   *   if none specified, default both, or a Constraints \r\n   *   object\r\n   *   @param callback function to be called once stream \r\n   *   has loaded\r\n   *   @return capture video p5.Element\r\n   */\r\n  createCapture(type: string|any|object, callback: Function): object|p5.Element\r\n  \r\n  /**\r\n   *   Creates element with given tag in the DOM with \r\n   *   given content. Appends to the container node if \r\n   *   one is specified, otherwise appends to body.\r\n   *\r\n   *   @param tag tag for the new element\r\n   *   @param [content] html content to be inserted into \r\n   *   the element\r\n   *   @return pointer to p5.Element holding created node\r\n   */\r\n  createElement(tag: string, content?: string): object|p5.Element\r\n  \r\n  // Properties from p5.sound\r\n  \r\n  // lib/addons/p5.sound.js\r\n  \r\n  /**\r\n   *   Returns the Audio Context for this sketch. Useful \r\n   *   for users who would like to dig deeper into the \r\n   *   Web Audio API .\r\n   *\r\n   *   @return AudioContext for this sketch\r\n   */\r\n  getAudioContext(): object\r\n  \r\n  /**\r\n   *   Returns a number representing the master amplitude \r\n   *   (volume) for sound in this sketch.\r\n   *\r\n   *   @return Master amplitude (volume) for sound in \r\n   *   this sketch. Should be between 0.0 (silence) and \r\n   *   1.0.\r\n   */\r\n  getMasterVolume(): number\r\n  \r\n  /**\r\n   *   Scale the output of all sound in this sketch \r\n   *   Scaled between 0.0 (silence) and 1.0 (full \r\n   *   volume). 1.0 is the maximum amplitude of a digital \r\n   *   sound, so multiplying by greater than 1.0 may \r\n   *   cause digital distortion. To fade, provide a \r\n   *   rampTime parameter. For more complex fades, see \r\n   *   the Env class. Alternately, you can pass in a \r\n   *   signal source such as an oscillator to modulate \r\n   *   the amplitude with an audio signal. How This \r\n   *   Works: When you load the p5.sound module, it \r\n   *   creates a single instance of p5sound. All sound \r\n   *   objects in this module output to p5sound before \r\n   *   reaching your computer's output. So if you change \r\n   *   the amplitude of p5sound, it impacts all of the \r\n   *   sound in this module. \r\n   * \r\n   *   If no value is provided, returns a Web Audio API \r\n   *   Gain Node\r\n   *\r\n   *   @param volume Volume (amplitude) between 0.0 and \r\n   *   1.0 or modulating signal/oscillator\r\n   *   @param [rampTime] Fade for t seconds\r\n   *   @param [timeFromNow] Schedule this event to happen \r\n   *   at t seconds in the future\r\n   */\r\n  masterVolume(volume: number|object, rampTime?: number, timeFromNow?: number): void\r\n  \r\n  /**\r\n   *   p5.soundOut is the p5.sound master output. It \r\n   *   sends output to the destination of this window's \r\n   *   web audio context. It contains Web Audio API nodes \r\n   *   including a dyanmicsCompressor (.limiter), and \r\n   *   Gain Nodes for .input and .output.\r\n   *\r\n   */\r\n  soundOut: object\r\n}\r\ndeclare namespace p5 {\r\n  // src/color/p5.Color.js\r\n  \r\n  class Color {\r\n    /**\r\n     *   This function returns the color formatted as a \r\n     *   string. This can be useful for debugging, or for \r\n     *   using p5.js with other libraries.\r\n     *\r\n     *   @param [format] How the color string will be \r\n     *   formatted. Leaving this empty formats the string \r\n     *   as rgba(r, g, b, a). '#rgb' '#rgba' '#rrggbb' and \r\n     *   '#rrggbbaa' format as hexadecimal color codes. \r\n     *   'rgb' 'hsb' and 'hsl' return the color formatted \r\n     *   in the specified color mode. 'rgba' 'hsba' and \r\n     *   'hsla' are the same as above but with alpha \r\n     *   channels. 'rgb%' 'hsb%' 'hsl%' 'rgba%' 'hsba%' and \r\n     *   'hsla%' format as percentages.\r\n     *   @return the formatted string\r\n     */\r\n    toString(format?: string): string\r\n    setRed(red: number): void\r\n    setGreen(green: number): void\r\n    setBlue(blue: number): void\r\n    setAlpha(alpha: number): void\r\n  }\r\n  \r\n  // src/core/p5.Element.js\r\n  \r\n  class Element {\r\n    /**\r\n     *   Underlying HTML element. All normal HTML methods \r\n     *   can be called on this.\r\n     *\r\n     */\r\n    elt: any\r\n    \r\n    /**\r\n     *   Attaches the element to the parent specified. A \r\n     *   way of setting the container for the element. \r\n     *   Accepts either a string ID, DOM node, or \r\n     *   p5.Element. If no arguments given, parent node is \r\n     *   returned. For more ways to position the canvas, \r\n     *   see the  positioning the canvas wiki page.\r\n     *\r\n     *   @param parent the ID, DOM node, or p5.Element of \r\n     *   desired parent element\r\n     *   @chainable\r\n     */\r\n    parent(parent: string|p5.Element|object): p5.Element\r\n    \r\n    /**\r\n     *   Attaches the element to the parent specified. A \r\n     *   way of setting the container for the element. \r\n     *   Accepts either a string ID, DOM node, or \r\n     *   p5.Element. If no arguments given, parent node is \r\n     *   returned. For more ways to position the canvas, \r\n     *   see the  positioning the canvas wiki page.\r\n     *\r\n     */\r\n    parent(): p5.Element\r\n    \r\n    /**\r\n     *   Sets the ID of the element. If no ID argument is \r\n     *   passed in, it instead returns the current ID of \r\n     *   the element.\r\n     *\r\n     *   @param id ID of the element\r\n     *   @chainable\r\n     */\r\n    id(id: string): p5.Element\r\n    \r\n    /**\r\n     *   Sets the ID of the element. If no ID argument is \r\n     *   passed in, it instead returns the current ID of \r\n     *   the element.\r\n     *\r\n     *   @return the id of the element\r\n     */\r\n    id(): string\r\n    \r\n    /**\r\n     *   Adds given class to the element. If no class \r\n     *   argument is passed in, it instead returns a string \r\n     *   containing the current class(es) of the element.\r\n     *\r\n     *   @param class class to add\r\n     *   @chainable\r\n     */\r\n    class(theClass: string): p5.Element\r\n    \r\n    /**\r\n     *   Adds given class to the element. If no class \r\n     *   argument is passed in, it instead returns a string \r\n     *   containing the current class(es) of the element.\r\n     *\r\n     *   @return the class of the element\r\n     */\r\n    class(): string\r\n    \r\n    /**\r\n     *   The .mousePressed() function is called once after \r\n     *   every time a mouse button is pressed over the \r\n     *   element. This can be used to attach element \r\n     *   specific event listeners.\r\n     *\r\n     *   @param fxn function to be fired when mouse is \r\n     *   pressed over the element. if false is passed \r\n     *   instead, the previously firing function will no \r\n     *   longer fire.\r\n     *   @chainable\r\n     */\r\n    mousePressed(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .doubleClicked() function is called once after \r\n     *   every time a mouse button is pressed twice over \r\n     *   the element. This can be used to attach element \r\n     *   and action specific event listeners.\r\n     *\r\n     *   @param fxn function to be fired when mouse is \r\n     *   double clicked over the element. if false is \r\n     *   passed instead, the previously firing function \r\n     *   will no longer fire.\r\n     */\r\n    doubleClicked(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .mouseWheel() function is called once after \r\n     *   every time a mouse wheel is scrolled over the \r\n     *   element. This can be used to attach element \r\n     *   specific event listeners.  The function accepts a \r\n     *   callback function as argument which will be \r\n     *   executed when the wheel event is triggered on the \r\n     *   element, the callback function is passed one \r\n     *   argument event. The event.deltaY property returns \r\n     *   negative values if the mouse wheel is rotated up \r\n     *   or away from the user and positive in the other \r\n     *   direction. The event.deltaX does the same as \r\n     *   event.deltaY except it reads the horizontal wheel \r\n     *   scroll of the mouse wheel. \r\n     * \r\n     *  \r\n     *   On OS X with \"natural\" scrolling enabled, the \r\n     *   event.deltaY values are reversed.\r\n     *\r\n     *   @param fxn function to be fired when mouse is \r\n     *   scrolled over the element. if false is passed \r\n     *   instead, the previously firing function will no \r\n     *   longer fire.\r\n     *   @chainable\r\n     */\r\n    mouseWheel(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .mouseReleased() function is called once after \r\n     *   every time a mouse button is released over the \r\n     *   element. This can be used to attach element \r\n     *   specific event listeners.\r\n     *\r\n     *   @param fxn function to be fired when mouse is \r\n     *   released over the element. if false is passed \r\n     *   instead, the previously firing function will no \r\n     *   longer fire.\r\n     *   @chainable\r\n     */\r\n    mouseReleased(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .mouseClicked() function is called once after \r\n     *   a mouse button is pressed and released over the \r\n     *   element. This can be used to attach element \r\n     *   specific event listeners.\r\n     *\r\n     *   @param fxn function to be fired when mouse is \r\n     *   clicked over the element. if false is passed \r\n     *   instead, the previously firing function will no \r\n     *   longer fire.\r\n     *   @chainable\r\n     */\r\n    mouseClicked(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .mouseMoved() function is called once every \r\n     *   time a mouse moves over the element. This can be \r\n     *   used to attach an element specific event listener.\r\n     *\r\n     *   @param fxn function to be fired when a mouse moves \r\n     *   over the element. if false is passed instead, the \r\n     *   previously firing function will no longer fire.\r\n     *   @chainable\r\n     */\r\n    mouseMoved(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .mouseOver() function is called once after \r\n     *   every time a mouse moves onto the element. This \r\n     *   can be used to attach an element specific event \r\n     *   listener.\r\n     *\r\n     *   @param fxn function to be fired when a mouse moves \r\n     *   onto the element. if false is passed instead, the \r\n     *   previously firing function will no longer fire.\r\n     *   @chainable\r\n     */\r\n    mouseOver(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .changed() function is called when the value \r\n     *   of an element changes. This can be used to attach \r\n     *   an element specific event listener.\r\n     *\r\n     *   @param fxn function to be fired when the value of \r\n     *   an element changes. if false is passed instead, \r\n     *   the previously firing function will no longer \r\n     *   fire.\r\n     *   @chainable\r\n     */\r\n    changed(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .input() function is called when any user \r\n     *   input is detected with an element. The input event \r\n     *   is often used to detect keystrokes in a input \r\n     *   element, or changes on a slider element. This can \r\n     *   be used to attach an element specific event \r\n     *   listener.\r\n     *\r\n     *   @param fxn function to be fired when any user \r\n     *   input is detected within the element. if false is \r\n     *   passed instead, the previously firing function \r\n     *   will no longer fire.\r\n     *   @chainable\r\n     */\r\n    input(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .mouseOut() function is called once after \r\n     *   every time a mouse moves off the element. This can \r\n     *   be used to attach an element specific event \r\n     *   listener.\r\n     *\r\n     *   @param fxn function to be fired when a mouse moves \r\n     *   off of an element. if false is passed instead, the \r\n     *   previously firing function will no longer fire.\r\n     *   @chainable\r\n     */\r\n    mouseOut(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .touchStarted() function is called once after \r\n     *   every time a touch is registered. This can be used \r\n     *   to attach element specific event listeners.\r\n     *\r\n     *   @param fxn function to be fired when a touch \r\n     *   starts over the element. if false is passed \r\n     *   instead, the previously firing function will no \r\n     *   longer fire.\r\n     *   @chainable\r\n     */\r\n    touchStarted(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .touchMoved() function is called once after \r\n     *   every time a touch move is registered. This can be \r\n     *   used to attach element specific event listeners.\r\n     *\r\n     *   @param fxn function to be fired when a touch moves \r\n     *   over the element. if false is passed instead, the \r\n     *   previously firing function will no longer fire.\r\n     *   @chainable\r\n     */\r\n    touchMoved(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .touchEnded() function is called once after \r\n     *   every time a touch is registered. This can be used \r\n     *   to attach element specific event listeners.\r\n     *\r\n     *   @param fxn function to be fired when a touch ends \r\n     *   over the element. if false is passed instead, the \r\n     *   previously firing function will no longer fire.\r\n     *   @chainable\r\n     */\r\n    touchEnded(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .dragOver() function is called once after \r\n     *   every time a file is dragged over the element. \r\n     *   This can be used to attach an element specific \r\n     *   event listener.\r\n     *\r\n     *   @param fxn function to be fired when a file is \r\n     *   dragged over the element. if false is passed \r\n     *   instead, the previously firing function will no \r\n     *   longer fire.\r\n     *   @chainable\r\n     */\r\n    dragOver(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .dragLeave() function is called once after \r\n     *   every time a dragged file leaves the element area. \r\n     *   This can be used to attach an element specific \r\n     *   event listener.\r\n     *\r\n     *   @param fxn function to be fired when a file is \r\n     *   dragged off the element. if false is passed \r\n     *   instead, the previously firing function will no \r\n     *   longer fire.\r\n     *   @chainable\r\n     */\r\n    dragLeave(fxn: Function|boolean): p5.Element\r\n    \r\n    /**\r\n     *   The .drop() function is called for each file \r\n     *   dropped on the element. It requires a callback \r\n     *   that is passed a p5.File object. You can \r\n     *   optionally pass two callbacks, the first one \r\n     *   (required) is triggered for each file dropped when \r\n     *   the file is loaded. The second (optional) is \r\n     *   triggered just once when a file (or files) are \r\n     *   dropped.\r\n     *\r\n     *   @param callback callback triggered when files are \r\n     *   dropped.\r\n     *   @param [fxn] callback to receive loaded file.\r\n     *   @chainable\r\n     */\r\n    drop(callback: Function, fxn?: Function): p5.Element\r\n    \r\n    // lib/addons/p5.dom.js\r\n    \r\n    /**\r\n     *   Adds specified class to the element.\r\n     *\r\n     *   @param class name of class to add\r\n     */\r\n    addClass(theClass: string): object|p5.Element\r\n    \r\n    /**\r\n     *   Removes specified class from the element.\r\n     *\r\n     *   @param class name of class to remove\r\n     *   @return * @example  // In this example, a class is \r\n     *   set when the div is created // and removed when \r\n     *   mouse is pressed. This could link up // with a CSS \r\n     *   style rule to toggle style properties. var div; \r\n     *   function setup() { div = createDiv('div'); \r\n     *   div.addClass('myClass'); } function mousePressed() \r\n     *   { div.removeClass('myClass'); }\r\n     */\r\n    removeClass(theClass: string): object|p5.Element\r\n    \r\n    /**\r\n     *   Attaches the element as a child to the parent \r\n     *   specified. Accepts either a string ID, DOM node, \r\n     *   or p5.Element. If no argument is specified, an \r\n     *   array of children DOM nodes is returned.\r\n     *\r\n     *   @param [child] the ID, DOM node, or p5.Element to \r\n     *   add to the current element\r\n     */\r\n    child(child?: string|object|p5.Element): p5.Element\r\n    \r\n    /**\r\n     *   Centers a p5 Element either vertically, \r\n     *   horizontally, or both, relative to its parent or \r\n     *   according to the body if the Element has no \r\n     *   parent. If no argument is passed the Element is \r\n     *   aligned both vertically and horizontally.\r\n     *\r\n     *   @param [align] passing 'vertical', 'horizontal' \r\n     *   aligns element accordingly\r\n     *   @return pointer to p5.Element\r\n     */\r\n    center(align?: string): object|p5.Element\r\n    \r\n    /**\r\n     *   If an argument is given, sets the inner HTML of \r\n     *   the element, replacing any existing html. If true \r\n     *   is included as a second argument, html is appended \r\n     *   instead of replacing existing html. If no \r\n     *   arguments are given, returns the inner HTML of the \r\n     *   element.\r\n     *\r\n     *   @param [html] the HTML to be placed inside the \r\n     *   element\r\n     *   @param [append] whether to append HTML to existing\r\n     */\r\n    html(html?: string, append?: boolean): object|p5.Element|string\r\n    \r\n    /**\r\n     *   Sets the position of the element relative to (0, \r\n     *   0) of the window. Essentially, sets \r\n     *   position:absolute and left and top properties of \r\n     *   style. If no arguments given returns the x and y \r\n     *   position of the element in an object.\r\n     *\r\n     *   @param [x] x-position relative to upper left of \r\n     *   window\r\n     *   @param [y] y-position relative to upper left of \r\n     *   window\r\n     */\r\n    position(x?: number, y?: number): object|p5.Element\r\n    \r\n    /**\r\n     *   Sets the given style (css) property (1st arg) of \r\n     *   the element with the given value (2nd arg). If a \r\n     *   single argument is given, .style() returns the \r\n     *   value of the given property; however, if the \r\n     *   single argument is given in css syntax \r\n     *   ('text-align:center'), .style() sets the css \r\n     *   appropriatly. .style() also handles 2d and 3d css \r\n     *   transforms. If the 1st arg is 'rotate', \r\n     *   'translate', or 'position', the following \r\n     *   arguments accept Numbers as values. ('translate', \r\n     *   10, 100, 50);\r\n     *\r\n     *   @param property property to be set\r\n     *   @param [value] value to assign to property (only \r\n     *   String|Number for rotate/translate)\r\n     *   @param [value2] position can take a 2nd value\r\n     *   @param [value3] translate can take a 2nd & 3rd \r\n     *   value\r\n     *   @return value of property, if no value is \r\n     *   specified or p5.Element\r\n     */\r\n    style(property: string, value?: string|number|p5.Color, value2?: string|number|p5.Color, value3?: string|number|p5.Color): string|object|p5.Element\r\n    \r\n    /**\r\n     *   Adds a new attribute or changes the value of an \r\n     *   existing attribute on the specified element. If no \r\n     *   value is specified, returns the value of the given \r\n     *   attribute, or null if attribute is not set.\r\n     *\r\n     *   @param attr attribute to set\r\n     *   @param [value] value to assign to attribute\r\n     *   @return value of attribute, if no value is \r\n     *   specified or p5.Element\r\n     */\r\n    attribute(attr: string, value?: string): string|object|p5.Element\r\n    \r\n    /**\r\n     *   Removes an attribute on the specified element.\r\n     *\r\n     *   @param attr attribute to remove\r\n     */\r\n    removeAttribute(attr: string): object|p5.Element\r\n    \r\n    /**\r\n     *   Either returns the value of the element if no \r\n     *   arguments given, or sets the value of the element.\r\n     *\r\n     *   @return value of element if no value is specified \r\n     *   or p5.Element\r\n     */\r\n    value(value?: string|number): string|object|p5.Element\r\n    \r\n    /**\r\n     *   Shows the current element. Essentially, setting \r\n     *   display:block for the style.\r\n     *\r\n     */\r\n    show(): object|p5.Element\r\n    \r\n    /**\r\n     *   Hides the current element. Essentially, setting \r\n     *   display:none for the style.\r\n     *\r\n     */\r\n    hide(): object|p5.Element\r\n    \r\n    /**\r\n     *   Sets the width and height of the element. AUTO can \r\n     *   be used to only adjust one dimension. If no \r\n     *   arguments given returns the width and height of \r\n     *   the element in an object.\r\n     *\r\n     *   @param [w] width of the element, either AUTO, or a \r\n     *   number\r\n     *   @param [h] height of the element, either AUTO, or \r\n     *   a number\r\n     */\r\n    size(w?: number|any, h?: number|any): object|p5.Element\r\n    \r\n    /**\r\n     *   Removes the element and deregisters all listeners.\r\n     *\r\n     */\r\n    remove(): void\r\n  }\r\n  \r\n  // src/core/p5.Graphics.js\r\n  \r\n  class Graphics extends p5.Element {\r\n    /**\r\n     *   Removes a Graphics object from the page and frees \r\n     *   any resources associated with it.\r\n     *\r\n     */\r\n    remove(): void\r\n  }\r\n  \r\n  // src/core/p5.Renderer.js\r\n  \r\n  class Renderer extends p5.Element {\r\n    /**\r\n     *   Main graphics and rendering context, as well as \r\n     *   the base API implementation for p5.js \"core\". To \r\n     *   be used as the superclass for Renderer2D and \r\n     *   Renderer3D classes, respecitvely.\r\n     *\r\n     *   @param elt DOM node that is wrapped\r\n     *   @param [pInst] pointer to p5 instance\r\n     *   @param [isMainCanvas] whether we're using it as \r\n     *   main canvas\r\n     */\r\n    constructor(elt: string, pInst?: p5, isMainCanvas?: boolean)\r\n  }\r\n  \r\n  // src/data/p5.TypedDict.js\r\n  \r\n  class TypedDict {\r\n    /**\r\n     *   Returns the number of key-value pairs currently in \r\n     *   Dictionary object\r\n     *\r\n     *   @return the number of key-value pairs in \r\n     *   Dictionary object\r\n     */\r\n    size(): number\r\n    \r\n    /**\r\n     *   Returns true if key exists in Dictionary otherwise \r\n     *   returns false\r\n     *\r\n     *   @param key that you want to access\r\n     *   @return whether that key exists in Dictionary\r\n     */\r\n    hasKey(key: number|string): boolean\r\n    \r\n    /**\r\n     *   Returns value stored at supplied key.\r\n     *\r\n     *   @param key that you want to access\r\n     *   @return the value stored at that key\r\n     */\r\n    get(key: number|string): number|string\r\n    \r\n    /**\r\n     *   Changes the value of key if in it already exists \r\n     *   in in the Dictionary otherwise makes a new \r\n     *   key-value pair\r\n     *\r\n     */\r\n    set(key: number|string, value: number|string): void\r\n    \r\n    /**\r\n     *   Creates a key-value pair in the Dictionary\r\n     *\r\n     */\r\n    create(key: number|string, value: number|string): void\r\n    \r\n    /**\r\n     *   Creates a key-value pair in the Dictionary\r\n     *\r\n     *   @param obj key/value pair\r\n     */\r\n    create(obj: object): void\r\n    \r\n    /**\r\n     *   Empties Dictionary of all key-value pairs\r\n     *\r\n     */\r\n    clear(): void\r\n    \r\n    /**\r\n     *   Removes a key-value pair in the Dictionary\r\n     *\r\n     *   @param key for the pair to remove\r\n     */\r\n    remove(key: number|string): void\r\n    \r\n    /**\r\n     *   Logs the list of items currently in the Dictionary \r\n     *   to the console\r\n     *\r\n     */\r\n    print(): void\r\n    \r\n    /**\r\n     *   Converts the Dictionary into a CSV file for local \r\n     *   storage.\r\n     *\r\n     */\r\n    saveTable(): void\r\n    \r\n    /**\r\n     *   Converts the Dictionary into a JSON file for local \r\n     *   storage.\r\n     *\r\n     */\r\n    saveJSON(): void\r\n  }\r\n  class StringDict extends p5.TypedDict {\r\n  }\r\n  class NumberDict extends p5.TypedDict {\r\n    /**\r\n     *   Add to a value stored at a certain key The sum is \r\n     *   stored in that location in the Dictionary.\r\n     *\r\n     *   @param Key for value you wish to add to\r\n     *   @param Amount to add to the value\r\n     */\r\n    add(Key: number, Amount: number): void\r\n    \r\n    /**\r\n     *   Subtract from a value stored at a certain key The \r\n     *   difference is stored in that location in the \r\n     *   Dictionary.\r\n     *\r\n     *   @param Key for value you wish to subtract from\r\n     *   @param Amount to subtract from the value\r\n     */\r\n    sub(Key: number, Amount: number): void\r\n    \r\n    /**\r\n     *   Multiply a value stored at a certain key The \r\n     *   product is stored in that location in the \r\n     *   Dictionary.\r\n     *\r\n     *   @param Key for value you wish to multiply\r\n     *   @param Amount to multiply the value by\r\n     */\r\n    mult(Key: number, Amount: number): void\r\n    \r\n    /**\r\n     *   Divide a value stored at a certain key The \r\n     *   quotient is stored in that location in the \r\n     *   Dictionary.\r\n     *\r\n     *   @param Key for value you wish to divide\r\n     *   @param Amount to divide the value by\r\n     */\r\n    div(Key: number, Amount: number): void\r\n    \r\n    /**\r\n     *   Return the lowest value.\r\n     *\r\n     */\r\n    minValue(): number\r\n    \r\n    /**\r\n     *   Return the highest value.\r\n     *\r\n     */\r\n    maxValue(): number\r\n    \r\n    /**\r\n     *   Return the lowest key.\r\n     *\r\n     */\r\n    minKey(): number\r\n    \r\n    /**\r\n     *   Return the highest key.\r\n     *\r\n     */\r\n    maxKey(): number\r\n  }\r\n  \r\n  // src/image/p5.Image.js\r\n  \r\n  class Image {\r\n    /**\r\n     *   Image width.\r\n     *\r\n     */\r\n    width: number\r\n    \r\n    /**\r\n     *   Image height.\r\n     *\r\n     */\r\n    height: number\r\n    \r\n    /**\r\n     *   Array containing the values for all the pixels in \r\n     *   the display window. These values are numbers. This \r\n     *   array is the size (include an appropriate factor \r\n     *   for pixelDensity) of the display window x4, \r\n     *   representing the R, G, B, A values in order for \r\n     *   each pixel, moving from left to right across each \r\n     *   row, then down each column. Retina and other high \r\n     *   denisty displays may have more pixels[] (by a \r\n     *   factor of pixelDensity^2). For example, if the \r\n     *   image is 100x100 pixels, there will be 40,000. \r\n     *   With pixelDensity = 2, there will be 160,000. The \r\n     *   first four values (indices 0-3) in the array will \r\n     *   be the R, G, B, A values of the pixel at (0, 0). \r\n     *   The second four values (indices 4-7) will contain \r\n     *   the R, G, B, A values of the pixel at (1, 0). More \r\n     *   generally, to set values for a pixel at (x, y): \r\n     *   var d = pixelDensity(); for (var i = 0; i < d; \r\n     *   i++) { for (var j = 0; j < d; j++) { // loop over \r\n     *   idx = 4 * ((y * d + j) * width * d + (x * d + i)); \r\n     *   pixels[idx] = r; pixels[idx+1] = g; pixels[idx+2] \r\n     *   = b; pixels[idx+3] = a; } }  \r\n     * \r\n     * \r\n     * \r\n     *  \r\n     *   Before accessing this array, the data must loaded \r\n     *   with the loadPixels() function. After the array \r\n     *   data has been modified, the updatePixels() \r\n     *   function must be run to update the changes.\r\n     *\r\n     */\r\n    pixels: number[]\r\n    \r\n    /**\r\n     *   Loads the pixels data for this image into the \r\n     *   [pixels] attribute.\r\n     *\r\n     */\r\n    loadPixels(): void\r\n    \r\n    /**\r\n     *   Updates the backing canvas for this image with the \r\n     *   contents of the [pixels] array.\r\n     *\r\n     *   @param x x-offset of the target update area for \r\n     *   the underlying canvas\r\n     *   @param y y-offset of the target update area for \r\n     *   the underlying canvas\r\n     *   @param w height of the target update area for the \r\n     *   underlying canvas\r\n     *   @param h height of the target update area for the \r\n     *   underlying canvas\r\n     */\r\n    updatePixels(x: number, y: number, w: number, h: number): void\r\n    \r\n    /**\r\n     *   Updates the backing canvas for this image with the \r\n     *   contents of the [pixels] array.\r\n     *\r\n     */\r\n    updatePixels(): void\r\n    \r\n    /**\r\n     *   Get a region of pixels from an image. If no params \r\n     *   are passed, those whole image is returned, if x \r\n     *   and y are the only params passed a single pixel is \r\n     *   extracted if all params are passed a rectangle \r\n     *   region is extracted and a p5.Image is returned. \r\n     * \r\n     *   Returns undefined if the region is outside the \r\n     *   bounds of the image\r\n     *\r\n     *   @param [x] x-coordinate of the pixel\r\n     *   @param [y] y-coordinate of the pixel\r\n     *   @param [w] width\r\n     *   @param [h] height\r\n     *   @return color of pixel at x,y in array format [R, \r\n     *   G, B, A] or p5.Image\r\n     */\r\n    get(x?: number, y?: number, w?: number, h?: number): number[]|Color|p5.Image\r\n    \r\n    /**\r\n     *   Set the color of a single pixel or write an image \r\n     *   into this p5.Image. Note that for a large number \r\n     *   of pixels this will be slower than directly \r\n     *   manipulating the pixels array and then calling \r\n     *   updatePixels().\r\n     *\r\n     *   @param x x-coordinate of the pixel\r\n     *   @param y y-coordinate of the pixel\r\n     *   @param a grayscale value | pixel array | a \r\n     *   p5.Color | image to copy\r\n     */\r\n    set(x: number, y: number, a: number|number[]|object): void\r\n    \r\n    /**\r\n     *   Resize the image to a new width and height. To \r\n     *   make the image scale proportionally, use 0 as the \r\n     *   value for the wide or high parameter. For \r\n     *   instance, to make the width of an image 150 \r\n     *   pixels, and change the height using the same \r\n     *   proportion, use resize(150, 0).\r\n     *\r\n     *   @param width the resized image width\r\n     *   @param height the resized image height\r\n     */\r\n    resize(width: number, height: number): void\r\n    \r\n    /**\r\n     *   Copies a region of pixels from one image to \r\n     *   another. If no srcImage is specified this is used \r\n     *   as the source. If the source and destination \r\n     *   regions aren't the same size, it will \r\n     *   automatically resize source pixels to fit the \r\n     *   specified target region.\r\n     *\r\n     *   @param srcImage source image\r\n     *   @param sx X coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sy Y coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sw source image width\r\n     *   @param sh source image height\r\n     *   @param dx X coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dy Y coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dw destination image width\r\n     *   @param dh destination image height\r\n     */\r\n    copy(srcImage: p5.Image|p5.Element, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void\r\n    \r\n    /**\r\n     *   Copies a region of pixels from one image to \r\n     *   another. If no srcImage is specified this is used \r\n     *   as the source. If the source and destination \r\n     *   regions aren't the same size, it will \r\n     *   automatically resize source pixels to fit the \r\n     *   specified target region.\r\n     *\r\n     *   @param sx X coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sy Y coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sw source image width\r\n     *   @param sh source image height\r\n     *   @param dx X coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dy Y coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dw destination image width\r\n     *   @param dh destination image height\r\n     */\r\n    copy(sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void\r\n    \r\n    /**\r\n     *   Masks part of an image from displaying by loading \r\n     *   another image and using it's alpha channel as an \r\n     *   alpha channel for this image.\r\n     *\r\n     *   @param srcImage source image\r\n     */\r\n    mask(srcImage: p5.Image): void\r\n    \r\n    /**\r\n     *   Applies an image filter to a p5.Image\r\n     *\r\n     *   @param filterType either THRESHOLD, GRAY, OPAQUE, \r\n     *   INVERT, POSTERIZE, BLUR, ERODE, DILATE or BLUR. \r\n     *   See Filters.js for docs on each available filter\r\n     *   @param [filterParam] an optional parameter unique \r\n     *   to each filter, see above\r\n     */\r\n    filter(filterType: FILTER_TYPE, filterParam?: number): void\r\n    \r\n    /**\r\n     *   Copies a region of pixels from one image to \r\n     *   another, using a specified blend mode to do the \r\n     *   operation.\r\n     *\r\n     *   @param srcImage source image\r\n     *   @param sx X coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sy Y coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sw source image width\r\n     *   @param sh source image height\r\n     *   @param dx X coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dy Y coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dw destination image width\r\n     *   @param dh destination image height\r\n     *   @param blendMode the blend mode. either BLEND, \r\n     *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \r\n     *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \r\n     *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. \r\n     * \r\n     *   Available blend modes are: normal | multiply | \r\n     *   screen | overlay | darken | lighten | color-dodge \r\n     *   | color-burn | hard-light | soft-light | \r\n     *   difference | exclusion | hue | saturation | color \r\n     *   | luminosity \r\n     * \r\n     *   http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\r\n     */\r\n    blend(srcImage: p5.Image, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number, blendMode: BLEND_MODE): void\r\n    \r\n    /**\r\n     *   Copies a region of pixels from one image to \r\n     *   another, using a specified blend mode to do the \r\n     *   operation.\r\n     *\r\n     *   @param sx X coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sy Y coordinate of the source's upper left \r\n     *   corner\r\n     *   @param sw source image width\r\n     *   @param sh source image height\r\n     *   @param dx X coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dy Y coordinate of the destination's upper \r\n     *   left corner\r\n     *   @param dw destination image width\r\n     *   @param dh destination image height\r\n     *   @param blendMode the blend mode. either BLEND, \r\n     *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \r\n     *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \r\n     *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL. \r\n     * \r\n     *   Available blend modes are: normal | multiply | \r\n     *   screen | overlay | darken | lighten | color-dodge \r\n     *   | color-burn | hard-light | soft-light | \r\n     *   difference | exclusion | hue | saturation | color \r\n     *   | luminosity \r\n     * \r\n     *   http://blogs.adobe.com/webplatform/2013/01/28/blending-features-in-canvas/\r\n     */\r\n    blend(sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number, blendMode: any): void\r\n    \r\n    /**\r\n     *   Saves the image to a file and force the browser to \r\n     *   download it. Accepts two strings for filename and \r\n     *   file extension Supports png (default) and jpg.\r\n     *\r\n     *   @param filename give your file a name\r\n     *   @param extension 'png' or 'jpg'\r\n     */\r\n    save(filename: string, extension: string): void\r\n  }\r\n  \r\n  // src/io/files.js\r\n  \r\n  class PrintWriter {\r\n    /**\r\n     *   Writes data to the PrintWriter stream\r\n     *\r\n     *   @param data all data to be written by the \r\n     *   PrintWriter\r\n     */\r\n    write(data: any[]): void\r\n    \r\n    /**\r\n     *   Writes data to the PrintWriter stream, and adds a \r\n     *   new line at the end\r\n     *\r\n     *   @param data all data to be printed by the \r\n     *   PrintWriter\r\n     */\r\n    print(data: any[]): void\r\n    \r\n    /**\r\n     *   Clears the data already written to the PrintWriter \r\n     *   object\r\n     *\r\n     */\r\n    clear(): void\r\n    \r\n    /**\r\n     *   Closes the PrintWriter\r\n     *\r\n     */\r\n    close(): void\r\n  }\r\n  \r\n  // src/io/p5.Table.js\r\n  \r\n  class Table {\r\n    /**\r\n     *   Table objects store data with multiple rows and \r\n     *   columns, much like in a traditional spreadsheet. \r\n     *   Tables can be generated from scratch, dynamically, \r\n     *   or using data from an existing file.\r\n     *\r\n     *   @param [rows] An array of p5.TableRow objects\r\n     */\r\n    constructor(rows?: p5.TableRow[])\r\n    columns: string[]\r\n    rows: p5.TableRow[]\r\n    \r\n    /**\r\n     *   Use addRow() to add a new row of data to a \r\n     *   p5.Table object. By default, an empty row is \r\n     *   created. Typically, you would store a reference to \r\n     *   the new row in a TableRow object (see newRow in \r\n     *   the example above), and then set individual values \r\n     *   using set(). If a p5.TableRow object is included \r\n     *   as a parameter, then that row is duplicated and \r\n     *   added to the table.\r\n     *\r\n     *   @param [row] row to be added to the table\r\n     */\r\n    addRow(row?: p5.TableRow): void\r\n    \r\n    /**\r\n     *   Removes a row from the table object.\r\n     *\r\n     *   @param id ID number of the row to remove\r\n     */\r\n    removeRow(id: number): void\r\n    \r\n    /**\r\n     *   Returns a reference to the specified p5.TableRow. \r\n     *   The reference can then be used to get and set \r\n     *   values of the selected row.\r\n     *\r\n     *   @param rowID ID number of the row to get\r\n     *   @return p5.TableRow object\r\n     */\r\n    getRow(rowID: number): p5.TableRow\r\n    \r\n    /**\r\n     *   Gets all rows from the table. Returns an array of \r\n     *   p5.TableRows.\r\n     *\r\n     *   @return Array of p5.TableRows\r\n     */\r\n    getRows(): p5.TableRow[]\r\n    \r\n    /**\r\n     *   Finds the first row in the Table that contains the \r\n     *   value provided, and returns a reference to that \r\n     *   row. Even if multiple rows are possible matches, \r\n     *   only the first matching row is returned. The \r\n     *   column to search may be specified by either its ID \r\n     *   or title.\r\n     *\r\n     *   @param value The value to match\r\n     *   @param column ID number or title of the column to \r\n     *   search\r\n     */\r\n    findRow(value: string, column: number|string): p5.TableRow\r\n    \r\n    /**\r\n     *   Finds the rows in the Table that contain the value \r\n     *   provided, and returns references to those rows. \r\n     *   Returns an Array, so for must be used to iterate \r\n     *   through all the rows, as shown in the example \r\n     *   above. The column to search may be specified by \r\n     *   either its ID or title.\r\n     *\r\n     *   @param value The value to match\r\n     *   @param column ID number or title of the column to \r\n     *   search\r\n     *   @return An Array of TableRow objects\r\n     */\r\n    findRows(value: string, column: number|string): p5.TableRow[]\r\n    \r\n    /**\r\n     *   Finds the first row in the Table that matches the \r\n     *   regular expression provided, and returns a \r\n     *   reference to that row. Even if multiple rows are \r\n     *   possible matches, only the first matching row is \r\n     *   returned. The column to search may be specified by \r\n     *   either its ID or title.\r\n     *\r\n     *   @param regexp The regular expression to match\r\n     *   @param column The column ID (number) or title \r\n     *   (string)\r\n     *   @return TableRow object\r\n     */\r\n    matchRow(regexp: string|any, column: string|number): p5.TableRow\r\n    \r\n    /**\r\n     *   Finds the rows in the Table that match the regular \r\n     *   expression provided, and returns references to \r\n     *   those rows. Returns an array, so for must be used \r\n     *   to iterate through all the rows, as shown in the \r\n     *   example. The column to search may be specified by \r\n     *   either its ID or title.\r\n     *\r\n     *   @param regexp The regular expression to match\r\n     *   @param [column] The column ID (number) or title \r\n     *   (string)\r\n     *   @return An Array of TableRow objects\r\n     */\r\n    matchRows(regexp: string, column?: string|number): p5.TableRow[]\r\n    \r\n    /**\r\n     *   Retrieves all values in the specified column, and \r\n     *   returns them as an array. The column may be \r\n     *   specified by either its ID or title.\r\n     *\r\n     *   @param column String or Number of the column to \r\n     *   return\r\n     *   @return Array of column values\r\n     */\r\n    getColumn(column: string|number): any[]\r\n    \r\n    /**\r\n     *   Removes all rows from a Table. While all rows are \r\n     *   removed, columns and column titles are maintained.\r\n     *\r\n     */\r\n    clearRows(): void\r\n    \r\n    /**\r\n     *   Use addColumn() to add a new column to a Table \r\n     *   object. Typically, you will want to specify a \r\n     *   title, so the column may be easily referenced \r\n     *   later by name. (If no title is specified, the new \r\n     *   column's title will be null.)\r\n     *\r\n     *   @param [title] title of the given column\r\n     */\r\n    addColumn(title?: string): void\r\n    \r\n    /**\r\n     *   Returns the total number of columns in a Table.\r\n     *\r\n     *   @return Number of columns in this table\r\n     */\r\n    getColumnCount(): number\r\n    \r\n    /**\r\n     *   Returns the total number of rows in a Table.\r\n     *\r\n     *   @return Number of rows in this table\r\n     */\r\n    getRowCount(): number\r\n    \r\n    /**\r\n     *   Removes any of the specified characters (or \r\n     *   \"tokens\"). If no column is specified, then the \r\n     *   values in all columns and rows are processed. A \r\n     *   specific column may be referenced by either its ID \r\n     *   or title.\r\n     *\r\n     *   @param chars String listing characters to be \r\n     *   removed\r\n     *   @param [column] Column ID (number) or name \r\n     *   (string)\r\n     */\r\n    removeTokens(chars: string, column?: string|number): void\r\n    \r\n    /**\r\n     *   Trims leading and trailing whitespace, such as \r\n     *   spaces and tabs, from String table values. If no \r\n     *   column is specified, then the values in all \r\n     *   columns and rows are trimmed. A specific column \r\n     *   may be referenced by either its ID or title.\r\n     *\r\n     *   @param [column] Column ID (number) or name \r\n     *   (string)\r\n     */\r\n    trim(column?: string|number): void\r\n    \r\n    /**\r\n     *   Use removeColumn() to remove an existing column \r\n     *   from a Table object. The column to be removed may \r\n     *   be identified by either its title (a String) or \r\n     *   its index value (an int). removeColumn(0) would \r\n     *   remove the first column, removeColumn(1) would \r\n     *   remove the second column, and so on.\r\n     *\r\n     *   @param column columnName (string) or ID (number)\r\n     */\r\n    removeColumn(column: string|number): void\r\n    \r\n    /**\r\n     *   Stores a value in the Table's specified row and \r\n     *   column. The row is specified by its ID, while the \r\n     *   column may be specified by either its ID or title.\r\n     *\r\n     *   @param row row ID\r\n     *   @param column column ID (Number) or title (String)\r\n     *   @param value value to assign\r\n     */\r\n    set(row: number, column: string|number, value: string|number): void\r\n    \r\n    /**\r\n     *   Stores a Float value in the Table's specified row \r\n     *   and column. The row is specified by its ID, while \r\n     *   the column may be specified by either its ID or \r\n     *   title.\r\n     *\r\n     *   @param row row ID\r\n     *   @param column column ID (Number) or title (String)\r\n     *   @param value value to assign\r\n     */\r\n    setNum(row: number, column: string|number, value: number): void\r\n    \r\n    /**\r\n     *   Stores a String value in the Table's specified row \r\n     *   and column. The row is specified by its ID, while \r\n     *   the column may be specified by either its ID or \r\n     *   title.\r\n     *\r\n     *   @param row row ID\r\n     *   @param column column ID (Number) or title (String)\r\n     *   @param value value to assign\r\n     */\r\n    setString(row: number, column: string|number, value: string): void\r\n    \r\n    /**\r\n     *   Retrieves a value from the Table's specified row \r\n     *   and column. The row is specified by its ID, while \r\n     *   the column may be specified by either its ID or \r\n     *   title.\r\n     *\r\n     *   @param row row ID\r\n     *   @param column columnName (string) or ID (number)\r\n     */\r\n    get(row: number, column: string|number): string|number\r\n    \r\n    /**\r\n     *   Retrieves a Float value from the Table's specified \r\n     *   row and column. The row is specified by its ID, \r\n     *   while the column may be specified by either its ID \r\n     *   or title.\r\n     *\r\n     *   @param row row ID\r\n     *   @param column columnName (string) or ID (number)\r\n     */\r\n    getNum(row: number, column: string|number): number\r\n    \r\n    /**\r\n     *   Retrieves a String value from the Table's \r\n     *   specified row and column. The row is specified by \r\n     *   its ID, while the column may be specified by \r\n     *   either its ID or title.\r\n     *\r\n     *   @param row row ID\r\n     *   @param column columnName (string) or ID (number)\r\n     */\r\n    getString(row: number, column: string|number): string\r\n    \r\n    /**\r\n     *   Retrieves all table data and returns as an object. \r\n     *   If a column name is passed in, each row object \r\n     *   will be stored with that attribute as its title.\r\n     *\r\n     *   @param [headerColumn] Name of the column which \r\n     *   should be used to title each row object (optional)\r\n     */\r\n    getObject(headerColumn?: string): object\r\n    \r\n    /**\r\n     *   Retrieves all table data and returns it as a \r\n     *   multidimensional array.\r\n     *\r\n     */\r\n    getArray(): any[]\r\n  }\r\n  \r\n  // src/io/p5.TableRow.js\r\n  \r\n  class TableRow {\r\n    /**\r\n     *   A TableRow object represents a single row of data \r\n     *   values, stored in columns, from a table. A Table \r\n     *   Row contains both an ordered array, and an \r\n     *   unordered JSON object.\r\n     *\r\n     *   @param [str] optional: populate the row with a \r\n     *   string of values, separated by the separator\r\n     *   @param [separator] comma separated values (csv) by \r\n     *   default\r\n     */\r\n    constructor(str?: string, separator?: string)\r\n    \r\n    /**\r\n     *   Stores a value in the TableRow's specified column. \r\n     *   The column may be specified by either its ID or \r\n     *   title.\r\n     *\r\n     *   @param column Column ID (Number) or Title (String)\r\n     *   @param value The value to be stored\r\n     */\r\n    set(column: string|number, value: string|number): void\r\n    \r\n    /**\r\n     *   Stores a Float value in the TableRow's specified \r\n     *   column. The column may be specified by either its \r\n     *   ID or title.\r\n     *\r\n     *   @param column Column ID (Number) or Title (String)\r\n     *   @param value The value to be stored as a Float\r\n     */\r\n    setNum(column: string|number, value: number|string): void\r\n    \r\n    /**\r\n     *   Stores a String value in the TableRow's specified \r\n     *   column. The column may be specified by either its \r\n     *   ID or title.\r\n     *\r\n     *   @param column Column ID (Number) or Title (String)\r\n     *   @param value The value to be stored as a String\r\n     */\r\n    setString(column: string|number, value: string|number|boolean|object): void\r\n    \r\n    /**\r\n     *   Retrieves a value from the TableRow's specified \r\n     *   column. The column may be specified by either its \r\n     *   ID or title.\r\n     *\r\n     *   @param column columnName (string) or ID (number)\r\n     */\r\n    get(column: string|number): string|number\r\n    \r\n    /**\r\n     *   Retrieves a Float value from the TableRow's \r\n     *   specified column. The column may be specified by \r\n     *   either its ID or title.\r\n     *\r\n     *   @param column columnName (string) or ID (number)\r\n     *   @return Float Floating point number\r\n     */\r\n    getNum(column: string|number): number\r\n    \r\n    /**\r\n     *   Retrieves an String value from the TableRow's \r\n     *   specified column. The column may be specified by \r\n     *   either its ID or title.\r\n     *\r\n     *   @param column columnName (string) or ID (number)\r\n     *   @return String\r\n     */\r\n    getString(column: string|number): string\r\n  }\r\n  \r\n  // src/io/p5.XML.js\r\n  \r\n  class XML {\r\n    /**\r\n     *   XML is a representation of an XML object, able to \r\n     *   parse XML code. Use loadXML() to load external XML \r\n     *   files and create XML objects.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Gets a copy of the element's parent. Returns the \r\n     *   parent as another p5.XML object.\r\n     *\r\n     *   @return element parent\r\n     */\r\n    getParent(): p5.XML\r\n    \r\n    /**\r\n     *   Gets the element's full name, which is returned as \r\n     *   a String.\r\n     *\r\n     *   @return the name of the node\r\n     */\r\n    getName(): string\r\n    \r\n    /**\r\n     *   Sets the element's name, which is specified as a \r\n     *   String.\r\n     *\r\n     *   @param the new name of the node\r\n     */\r\n    setName(the: string): void\r\n    \r\n    /**\r\n     *   Checks whether or not the element has any \r\n     *   children, and returns the result as a boolean.\r\n     *\r\n     */\r\n    hasChildren(): boolean\r\n    \r\n    /**\r\n     *   Get the names of all of the element's children, \r\n     *   and returns the names as an array of Strings. This \r\n     *   is the same as looping through and calling \r\n     *   getName() on each child element individually.\r\n     *\r\n     *   @return names of the children of the element\r\n     */\r\n    listChildren(): string[]\r\n    \r\n    /**\r\n     *   Returns all of the element's children as an array \r\n     *   of p5.XML objects. When the name parameter is \r\n     *   specified, then it will return all children that \r\n     *   match that name.\r\n     *\r\n     *   @param [name] element name\r\n     *   @return children of the element\r\n     */\r\n    getChildren(name?: string): p5.XML[]\r\n    \r\n    /**\r\n     *   Returns the first of the element's children that \r\n     *   matches the name parameter or the child of the \r\n     *   given index.It returns undefined if no matching \r\n     *   child is found.\r\n     *\r\n     *   @param name element name or index\r\n     */\r\n    getChild(name: string|number): p5.XML\r\n    \r\n    /**\r\n     *   Appends a new child to the element. The child can \r\n     *   be specified with either a String, which will be \r\n     *   used as the new tag's name, or as a reference to \r\n     *   an existing p5.XML object. A reference to the \r\n     *   newly created child is returned as an p5.XML \r\n     *   object.\r\n     *\r\n     *   @param node a p5.XML Object which will be the \r\n     *   child to be added\r\n     */\r\n    addChild(node: p5.XML): void\r\n    \r\n    /**\r\n     *   Removes the element specified by name or index.\r\n     *\r\n     *   @param name element name or index\r\n     */\r\n    removeChild(name: string|number): void\r\n    \r\n    /**\r\n     *   Counts the specified element's number of \r\n     *   attributes, returned as an Number.\r\n     *\r\n     */\r\n    getAttributeCount(): number\r\n    \r\n    /**\r\n     *   Gets all of the specified element's attributes, \r\n     *   and returns them as an array of Strings.\r\n     *\r\n     *   @return an array of strings containing the names \r\n     *   of attributes\r\n     */\r\n    listAttributes(): string[]\r\n    \r\n    /**\r\n     *   Checks whether or not an element has the specified \r\n     *   attribute.\r\n     *\r\n     *   @param the attribute to be checked\r\n     *   @return true if attribute found else false\r\n     */\r\n    hasAttribute(the: string): boolean\r\n    \r\n    /**\r\n     *   Returns an attribute value of the element as an \r\n     *   Number. If the defaultValue parameter is specified \r\n     *   and the attribute doesn't exist, then defaultValue \r\n     *   is returned. If no defaultValue is specified and \r\n     *   the attribute doesn't exist, the value 0 is \r\n     *   returned.\r\n     *\r\n     *   @param name the non-null full name of the \r\n     *   attribute\r\n     *   @param [defaultValue] the default value of the \r\n     *   attribute\r\n     */\r\n    getNum(name: string, defaultValue?: number): number\r\n    \r\n    /**\r\n     *   Returns an attribute value of the element as an \r\n     *   String. If the defaultValue parameter is specified \r\n     *   and the attribute doesn't exist, then defaultValue \r\n     *   is returned. If no defaultValue is specified and \r\n     *   the attribute doesn't exist, null is returned.\r\n     *\r\n     *   @param name the non-null full name of the \r\n     *   attribute\r\n     *   @param [defaultValue] the default value of the \r\n     *   attribute\r\n     */\r\n    getString(name: string, defaultValue?: number): string\r\n    \r\n    /**\r\n     *   Sets the content of an element's attribute. The \r\n     *   first parameter specifies the attribute name, \r\n     *   while the second specifies the new content.\r\n     *\r\n     *   @param name the full name of the attribute\r\n     *   @param value the value of the attribute\r\n     */\r\n    setAttribute(name: string, value: number|string|boolean): void\r\n    \r\n    /**\r\n     *   Returns the content of an element. If there is no \r\n     *   such content, defaultValue is returned if \r\n     *   specified, otherwise null is returned.\r\n     *\r\n     *   @param [defaultValue] value returned if no content \r\n     *   is found\r\n     */\r\n    getContent(defaultValue?: string): string\r\n    \r\n    /**\r\n     *   Sets the element's content.\r\n     *\r\n     *   @param text the new content\r\n     */\r\n    setContent(text: string): void\r\n  }\r\n  \r\n  // src/math/p5.Vector.js\r\n  \r\n  class Vector {\r\n    /**\r\n     *   The x component of the vector\r\n     *\r\n     */\r\n    x: number\r\n    \r\n    /**\r\n     *   The y component of the vector\r\n     *\r\n     */\r\n    y: number\r\n    \r\n    /**\r\n     *   The z component of the vector\r\n     *\r\n     */\r\n    z: number\r\n    \r\n    /**\r\n     *   Returns a string representation of a vector v by \r\n     *   calling String(v) or v.toString(). This method is \r\n     *   useful for logging vectors in the console.\r\n     *\r\n     */\r\n    toString(): string\r\n    \r\n    /**\r\n     *   Sets the x, y, and z component of the vector using \r\n     *   two or three separate variables, the data from a \r\n     *   p5.Vector, or the values from a float array.\r\n     *\r\n     *   @param [x] the x component of the vector\r\n     *   @param [y] the y component of the vector\r\n     *   @param [z] the z component of the vector\r\n     *   @chainable\r\n     */\r\n    set(x?: number, y?: number, z?: number): p5.Vector\r\n    \r\n    /**\r\n     *   Sets the x, y, and z component of the vector using \r\n     *   two or three separate variables, the data from a \r\n     *   p5.Vector, or the values from a float array.\r\n     *\r\n     *   @param value the vector to set\r\n     *   @chainable\r\n     */\r\n    set(value: p5.Vector|number[]): p5.Vector\r\n    \r\n    /**\r\n     *   Gets a copy of the vector, returns a p5.Vector \r\n     *   object.\r\n     *\r\n     *   @return the copy of the p5.Vector object\r\n     */\r\n    copy(): p5.Vector\r\n    \r\n    /**\r\n     *   Adds x, y, and z components to a vector, adds one \r\n     *   vector to another, or adds two independent vectors \r\n     *   together. The version of the method that adds two \r\n     *   vectors together is a static method and returns a \r\n     *   p5.Vector, the others acts directly on the vector. \r\n     *   See the examples for more context.\r\n     *\r\n     *   @param x the x component of the vector to be added\r\n     *   @param [y] the y component of the vector to be \r\n     *   added\r\n     *   @param [z] the z component of the vector to be \r\n     *   added\r\n     *   @chainable\r\n     */\r\n    add(x: number, y?: number, z?: number): p5.Vector\r\n    \r\n    /**\r\n     *   Adds x, y, and z components to a vector, adds one \r\n     *   vector to another, or adds two independent vectors \r\n     *   together. The version of the method that adds two \r\n     *   vectors together is a static method and returns a \r\n     *   p5.Vector, the others acts directly on the vector. \r\n     *   See the examples for more context.\r\n     *\r\n     *   @param value the vector to add\r\n     *   @chainable\r\n     */\r\n    add(value: p5.Vector|number[]): p5.Vector\r\n    \r\n    /**\r\n     *   Adds x, y, and z components to a vector, adds one \r\n     *   vector to another, or adds two independent vectors \r\n     *   together. The version of the method that adds two \r\n     *   vectors together is a static method and returns a \r\n     *   p5.Vector, the others acts directly on the vector. \r\n     *   See the examples for more context.\r\n     *\r\n     *   @param v1 a p5.Vector to add\r\n     *   @param v2 a p5.Vector to add\r\n     *   @param target the vector to receive the result\r\n     */\r\n    static add(v1: p5.Vector, v2: p5.Vector, target: p5.Vector): void\r\n    \r\n    /**\r\n     *   Adds x, y, and z components to a vector, adds one \r\n     *   vector to another, or adds two independent vectors \r\n     *   together. The version of the method that adds two \r\n     *   vectors together is a static method and returns a \r\n     *   p5.Vector, the others acts directly on the vector. \r\n     *   See the examples for more context.\r\n     *\r\n     *   @param v1 a p5.Vector to add\r\n     *   @param v2 a p5.Vector to add\r\n     *   @return the resulting p5.Vector\r\n     */\r\n    static add(v1: p5.Vector, v2: p5.Vector): p5.Vector\r\n    \r\n    /**\r\n     *   Subtracts x, y, and z components from a vector, \r\n     *   subtracts one vector from another, or subtracts \r\n     *   two independent vectors. The version of the method \r\n     *   that subtracts two vectors is a static method and \r\n     *   returns a p5.Vector, the other acts directly on \r\n     *   the vector. See the examples for more context.\r\n     *\r\n     *   @param x the x component of the vector to subtract\r\n     *   @param [y] the y component of the vector to \r\n     *   subtract\r\n     *   @param [z] the z component of the vector to \r\n     *   subtract\r\n     *   @chainable\r\n     */\r\n    sub(x: number, y?: number, z?: number): p5.Vector\r\n    \r\n    /**\r\n     *   Subtracts x, y, and z components from a vector, \r\n     *   subtracts one vector from another, or subtracts \r\n     *   two independent vectors. The version of the method \r\n     *   that subtracts two vectors is a static method and \r\n     *   returns a p5.Vector, the other acts directly on \r\n     *   the vector. See the examples for more context.\r\n     *\r\n     *   @param value the vector to subtract\r\n     *   @chainable\r\n     */\r\n    sub(value: p5.Vector|number[]): p5.Vector\r\n    \r\n    /**\r\n     *   Subtracts x, y, and z components from a vector, \r\n     *   subtracts one vector from another, or subtracts \r\n     *   two independent vectors. The version of the method \r\n     *   that subtracts two vectors is a static method and \r\n     *   returns a p5.Vector, the other acts directly on \r\n     *   the vector. See the examples for more context.\r\n     *\r\n     *   @param v1 a p5.Vector to subtract from\r\n     *   @param v2 a p5.Vector to subtract\r\n     *   @param target if undefined a new vector will be \r\n     *   created\r\n     */\r\n    static sub(v1: p5.Vector, v2: p5.Vector, target: p5.Vector): void\r\n    \r\n    /**\r\n     *   Subtracts x, y, and z components from a vector, \r\n     *   subtracts one vector from another, or subtracts \r\n     *   two independent vectors. The version of the method \r\n     *   that subtracts two vectors is a static method and \r\n     *   returns a p5.Vector, the other acts directly on \r\n     *   the vector. See the examples for more context.\r\n     *\r\n     *   @param v1 a p5.Vector to subtract from\r\n     *   @param v2 a p5.Vector to subtract\r\n     *   @return the resulting p5.Vector\r\n     */\r\n    static sub(v1: p5.Vector, v2: p5.Vector): p5.Vector\r\n    \r\n    /**\r\n     *   Multiply the vector by a scalar. The static \r\n     *   version of this method creates a new p5.Vector \r\n     *   while the non static version acts on the vector \r\n     *   directly. See the examples for more context.\r\n     *\r\n     *   @param n the number to multiply with the vector\r\n     *   @chainable\r\n     */\r\n    mult(n: number): p5.Vector\r\n    \r\n    /**\r\n     *   Multiply the vector by a scalar. The static \r\n     *   version of this method creates a new p5.Vector \r\n     *   while the non static version acts on the vector \r\n     *   directly. See the examples for more context.\r\n     *\r\n     *   @param v the vector to multiply\r\n     *   @param n the number to multiply with the vector\r\n     *   @param target if undefined a new vector will be \r\n     *   created\r\n     */\r\n    static mult(v: p5.Vector, n: number, target: p5.Vector): void\r\n    \r\n    /**\r\n     *   Multiply the vector by a scalar. The static \r\n     *   version of this method creates a new p5.Vector \r\n     *   while the non static version acts on the vector \r\n     *   directly. See the examples for more context.\r\n     *\r\n     *   @param v the vector to multiply\r\n     *   @param n the number to multiply with the vector\r\n     *   @return the resulting new p5.Vector\r\n     */\r\n    static mult(v: p5.Vector, n: number): p5.Vector\r\n    \r\n    /**\r\n     *   Divide the vector by a scalar. The static version \r\n     *   of this method creates a new p5.Vector while the \r\n     *   non static version acts on the vector directly. \r\n     *   See the examples for more context.\r\n     *\r\n     *   @param n the number to divide the vector by\r\n     *   @chainable\r\n     */\r\n    div(n: number): p5.Vector\r\n    \r\n    /**\r\n     *   Divide the vector by a scalar. The static version \r\n     *   of this method creates a new p5.Vector while the \r\n     *   non static version acts on the vector directly. \r\n     *   See the examples for more context.\r\n     *\r\n     *   @param v the vector to divide\r\n     *   @param n the number to divide the vector by\r\n     *   @param target if undefined a new vector will be \r\n     *   created\r\n     */\r\n    static div(v: p5.Vector, n: number, target: p5.Vector): void\r\n    \r\n    /**\r\n     *   Divide the vector by a scalar. The static version \r\n     *   of this method creates a new p5.Vector while the \r\n     *   non static version acts on the vector directly. \r\n     *   See the examples for more context.\r\n     *\r\n     *   @param v the vector to divide\r\n     *   @param n the number to divide the vector by\r\n     *   @return the resulting new p5.Vector\r\n     */\r\n    static div(v: p5.Vector, n: number): p5.Vector\r\n    \r\n    /**\r\n     *   Calculates the magnitude (length) of the vector \r\n     *   and returns the result as a float (this is simply \r\n     *   the equation sqrt(xx + yy + z*z).)\r\n     *\r\n     *   @return magnitude of the vector\r\n     */\r\n    mag(): number\r\n    \r\n    /**\r\n     *   Calculates the magnitude (length) of the vector \r\n     *   and returns the result as a float (this is simply \r\n     *   the equation sqrt(xx + yy + z*z).)\r\n     *\r\n     *   @param vecT the vector to return the magnitude of\r\n     *   @return the magnitude of vecT\r\n     */\r\n    static mag(vecT: p5.Vector): number\r\n    \r\n    /**\r\n     *   Calculates the squared magnitude of the vector and \r\n     *   returns the result as a float (this is simply the \r\n     *   equation (xx + yy + z*z).) Faster if the real \r\n     *   length is not required in the case of comparing \r\n     *   vectors, etc.\r\n     *\r\n     *   @return squared magnitude of the vector\r\n     */\r\n    magSq(): number\r\n    \r\n    /**\r\n     *   Calculates the dot product of two vectors. The \r\n     *   version of the method that computes the dot \r\n     *   product of two independent vectors is a static \r\n     *   method. See the examples for more context.\r\n     *\r\n     *   @param x x component of the vector\r\n     *   @param [y] y component of the vector\r\n     *   @param [z] z component of the vector\r\n     *   @return the dot product\r\n     */\r\n    dot(x: number, y?: number, z?: number): number\r\n    \r\n    /**\r\n     *   Calculates the dot product of two vectors. The \r\n     *   version of the method that computes the dot \r\n     *   product of two independent vectors is a static \r\n     *   method. See the examples for more context.\r\n     *\r\n     *   @param value value component of the vector or a \r\n     *   p5.Vector\r\n     */\r\n    dot(value: p5.Vector): number\r\n    \r\n    /**\r\n     *   Calculates the dot product of two vectors. The \r\n     *   version of the method that computes the dot \r\n     *   product of two independent vectors is a static \r\n     *   method. See the examples for more context.\r\n     *\r\n     *   @param v1 the first p5.Vector\r\n     *   @param v2 the second p5.Vector\r\n     *   @return the dot product\r\n     */\r\n    static dot(v1: p5.Vector, v2: p5.Vector): number\r\n    \r\n    /**\r\n     *   Calculates and returns a vector composed of the \r\n     *   cross product between two vectors. Both the static \r\n     *   and non static methods return a new p5.Vector. See \r\n     *   the examples for more context.\r\n     *\r\n     *   @param v p5.Vector to be crossed\r\n     *   @return p5.Vector composed of cross product\r\n     */\r\n    cross(v: p5.Vector): p5.Vector\r\n    \r\n    /**\r\n     *   Calculates and returns a vector composed of the \r\n     *   cross product between two vectors. Both the static \r\n     *   and non static methods return a new p5.Vector. See \r\n     *   the examples for more context.\r\n     *\r\n     *   @param v1 the first p5.Vector\r\n     *   @param v2 the second p5.Vector\r\n     *   @return the cross product\r\n     */\r\n    static cross(v1: p5.Vector, v2: p5.Vector): number\r\n    \r\n    /**\r\n     *   Calculates the Euclidean distance between two \r\n     *   points (considering a point as a vector object).\r\n     *\r\n     *   @param v the x, y, and z coordinates of a \r\n     *   p5.Vector\r\n     *   @return the distance\r\n     */\r\n    dist(v: p5.Vector): number\r\n    \r\n    /**\r\n     *   Calculates the Euclidean distance between two \r\n     *   points (considering a point as a vector object).\r\n     *\r\n     *   @param v1 the first p5.Vector\r\n     *   @param v2 the second p5.Vector\r\n     *   @return the distance\r\n     */\r\n    static dist(v1: p5.Vector, v2: p5.Vector): number\r\n    \r\n    /**\r\n     *   Normalize the vector to length 1 (make it a unit \r\n     *   vector).\r\n     *\r\n     *   @return normalized p5.Vector\r\n     */\r\n    normalize(): p5.Vector\r\n    \r\n    /**\r\n     *   Limit the magnitude of this vector to the value \r\n     *   used for the max parameter.\r\n     *\r\n     *   @param max the maximum magnitude for the vector\r\n     *   @chainable\r\n     */\r\n    limit(max: number): p5.Vector\r\n    \r\n    /**\r\n     *   Set the magnitude of this vector to the value used \r\n     *   for the len parameter.\r\n     *\r\n     *   @param len the new length for this vector\r\n     *   @chainable\r\n     */\r\n    setMag(len: number): p5.Vector\r\n    \r\n    /**\r\n     *   Calculate the angle of rotation for this vector \r\n     *   (only 2D vectors)\r\n     *\r\n     *   @return the angle of rotation\r\n     */\r\n    heading(): number\r\n    \r\n    /**\r\n     *   Rotate the vector by an angle (only 2D vectors), \r\n     *   magnitude remains the same\r\n     *\r\n     *   @param angle the angle of rotation\r\n     *   @chainable\r\n     */\r\n    rotate(angle: number): p5.Vector\r\n    \r\n    /**\r\n     *   Calculates and returns the angle (in radians) \r\n     *   between two vectors.\r\n     *\r\n     *   @param the x, y, and z components of a p5.Vector\r\n     *   @return the angle between (in radians)\r\n     */\r\n    angleBetween(the: p5.Vector): number\r\n    \r\n    /**\r\n     *   Linear interpolate the vector to another vector\r\n     *\r\n     *   @param x the x component\r\n     *   @param y the y component\r\n     *   @param z the z component\r\n     *   @param amt the amount of interpolation; some value \r\n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \r\n     *   is very near the new vector. 0.5 is halfway in \r\n     *   between.\r\n     *   @chainable\r\n     */\r\n    lerp(x: number, y: number, z: number, amt: number): p5.Vector\r\n    \r\n    /**\r\n     *   Linear interpolate the vector to another vector\r\n     *\r\n     *   @param v the p5.Vector to lerp to\r\n     *   @param amt the amount of interpolation; some value \r\n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \r\n     *   is very near the new vector. 0.5 is halfway in \r\n     *   between.\r\n     *   @chainable\r\n     */\r\n    lerp(v: p5.Vector, amt: number): p5.Vector\r\n    \r\n    /**\r\n     *   Linear interpolate the vector to another vector\r\n     *\r\n     *   @param amt the amount of interpolation; some value \r\n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \r\n     *   is very near the new vector. 0.5 is halfway in \r\n     *   between.\r\n     *   @param target if undefined a new vector will be \r\n     *   created\r\n     */\r\n    static lerp(v1: p5.Vector, v2: p5.Vector, amt: number, target: p5.Vector): void\r\n    \r\n    /**\r\n     *   Linear interpolate the vector to another vector\r\n     *\r\n     *   @param amt the amount of interpolation; some value \r\n     *   between 0.0 (old vector) and 1.0 (new vector). 0.9 \r\n     *   is very near the new vector. 0.5 is halfway in \r\n     *   between.\r\n     *   @return the lerped value\r\n     */\r\n    static lerp(v1: p5.Vector, v2: p5.Vector, amt: number): number\r\n    \r\n    /**\r\n     *   Return a representation of this vector as a float \r\n     *   array. This is only for temporary use. If used in \r\n     *   any other fashion, the contents should be copied \r\n     *   by using the p5.Vector.copy() method to copy into \r\n     *   your own array.\r\n     *\r\n     *   @return an Array with the 3 values\r\n     */\r\n    array(): number[]\r\n    \r\n    /**\r\n     *   Equality check against a p5.Vector\r\n     *\r\n     *   @param [x] the x component of the vector\r\n     *   @param [y] the y component of the vector\r\n     *   @param [z] the z component of the vector\r\n     *   @return whether the vectors are equals\r\n     */\r\n    equals(x?: number, y?: number, z?: number): boolean\r\n    \r\n    /**\r\n     *   Equality check against a p5.Vector\r\n     *\r\n     *   @param value the vector to compare\r\n     */\r\n    equals(value: p5.Vector|any[]): boolean\r\n    \r\n    /**\r\n     *   Make a new 2D vector from an angle\r\n     *\r\n     *   @param angle the desired angle, in radians\r\n     *   @param [length] the length of the new vector \r\n     *   (defaults to 1)\r\n     *   @return the new p5.Vector object\r\n     */\r\n    static fromAngle(angle: number, length?: number): p5.Vector\r\n    \r\n    /**\r\n     *   Make a new 3D vector from a pair of ISO spherical \r\n     *   angles\r\n     *\r\n     *   @param theta the polar angle, in radians (zero is \r\n     *   up)\r\n     *   @param phi the azimuthal angle, in radians (zero \r\n     *   is out of the screen)\r\n     *   @param [length] the length of the new vector \r\n     *   (defaults to 1)\r\n     *   @return the new p5.Vector object\r\n     */\r\n    static fromAngles(theta: number, phi: number, length?: number): p5.Vector\r\n    \r\n    /**\r\n     *   Make a new 2D unit vector from a random angle\r\n     *\r\n     *   @return the new p5.Vector object\r\n     */\r\n    static random2D(): p5.Vector\r\n    \r\n    /**\r\n     *   Make a new random 3D unit vector.\r\n     *\r\n     *   @return the new p5.Vector object\r\n     */\r\n    static random3D(): p5.Vector\r\n  }\r\n  \r\n  // src/typography/p5.Font.js\r\n  \r\n  class Font {\r\n    /**\r\n     *   Underlying opentype font implementation\r\n     *\r\n     */\r\n    font: any\r\n    \r\n    /**\r\n     *   Returns a tight bounding box for the given text \r\n     *   string using this font (currently only supports \r\n     *   single lines)\r\n     *\r\n     *   @param line a line of text\r\n     *   @param x x-position\r\n     *   @param y y-position\r\n     *   @param [fontSize] font size to use (optional)\r\n     *   @param [options] opentype options (optional)\r\n     *   @return a rectangle object with properties: x, y, \r\n     *   w, h\r\n     */\r\n    textBounds(line: string, x: number, y: number, fontSize?: number, options?: object): object\r\n    \r\n    /**\r\n     *   Computes an array of points following the path for \r\n     *   specified text\r\n     *\r\n     *   @param txt a line of text\r\n     *   @param x x-position\r\n     *   @param y y-position\r\n     *   @param fontSize font size to use (optional)\r\n     *   @param [options] an (optional) object that can \r\n     *   contain: \r\n     * \r\n     * \r\n     *   sampleFactor - the ratio of path-length to number \r\n     *   of samples (default=.25); higher values yield more \r\n     *   points and are therefore more precise \r\n     * \r\n     * \r\n     *   simplifyThreshold - if set to a non-zero value, \r\n     *   collinear points will be be removed from the \r\n     *   polygon; the value represents the threshold angle \r\n     *   to use when determining whether two edges are \r\n     *   collinear\r\n     *   @return an array of points, each with x, y, alpha \r\n     *   (the path angle)\r\n     */\r\n    textToPoints(txt: string, x: number, y: number, fontSize: number, options?: object): any[]\r\n  }\r\n  \r\n  // src/webgl/p5.Geometry.js\r\n  \r\n  class Geometry {\r\n    /**\r\n     *   p5 Geometry class\r\n     *\r\n     *   @param vertData callback function or Object \r\n     *   containing routine(s) for vertex data generation\r\n     *   @param [detailX] number of vertices on horizontal \r\n     *   surface\r\n     *   @param [detailY] number of vertices on horizontal \r\n     *   surface\r\n     *   @param [callback] function to call upon object \r\n     *   instantiation.\r\n     */\r\n    constructor(vertData: Function|object, detailX?: number, detailY?: number, callback?: Function)\r\n    computeFaces(): p5.Geometry\r\n    \r\n    /**\r\n     *   computes smooth normals per vertex as an average \r\n     *   of each face.\r\n     *\r\n     *   @chainable\r\n     */\r\n    computeNormals(): p5.Geometry\r\n    \r\n    /**\r\n     *   Averages the vertex normals. Used in curved \r\n     *   surfaces\r\n     *\r\n     *   @chainable\r\n     */\r\n    averageNormals(): p5.Geometry\r\n    \r\n    /**\r\n     *   Averages pole normals. Used in spherical \r\n     *   primitives\r\n     *\r\n     *   @chainable\r\n     */\r\n    averagePoleNormals(): p5.Geometry\r\n    \r\n    /**\r\n     *   Modifies all vertices to be centered within the \r\n     *   range -100 to 100.\r\n     *\r\n     *   @chainable\r\n     */\r\n    normalize(): p5.Geometry\r\n  }\r\n  \r\n  // src/webgl/p5.Shader.js\r\n  \r\n  class Shader {\r\n    /**\r\n     *   Wrapper around gl.uniform functions. As we store \r\n     *   uniform info in the shader we can use that to do \r\n     *   type checking on the supplied data and call the \r\n     *   appropriate function.\r\n     *\r\n     *   @param uniformName the name of the uniform in the \r\n     *   shader program\r\n     *   @param data the data to be associated with that \r\n     *   uniform; type varies (could be a single numerical \r\n     *   value, array, matrix, or texture / sampler \r\n     *   reference)\r\n     *   @chainable\r\n     */\r\n    setUniform(uniformName: string, data: object|number|boolean|number[]): p5.Shader\r\n  }\r\n  \r\n  // lib/addons/p5.dom.js\r\n  \r\n  class MediaElement {\r\n    /**\r\n     *   Extends p5.Element to handle audio and video. In \r\n     *   addition to the methods of p5.Element, it also \r\n     *   contains methods for controlling media. It is not \r\n     *   called directly, but p5.MediaElements are created \r\n     *   by calling createVideo, createAudio, and \r\n     *   createCapture.\r\n     *\r\n     *   @param elt DOM node that is wrapped\r\n     */\r\n    constructor(elt: string)\r\n    \r\n    /**\r\n     *   Path to the media element source.\r\n     *\r\n     */\r\n    src: any\r\n    \r\n    /**\r\n     *   Play an HTML5 media element.\r\n     *\r\n     */\r\n    play(): object|p5.Element\r\n    \r\n    /**\r\n     *   Stops an HTML5 media element (sets current time to \r\n     *   zero).\r\n     *\r\n     */\r\n    stop(): object|p5.Element\r\n    \r\n    /**\r\n     *   Pauses an HTML5 media element.\r\n     *\r\n     */\r\n    pause(): object|p5.Element\r\n    \r\n    /**\r\n     *   Set 'loop' to true for an HTML5 media element, and \r\n     *   starts playing.\r\n     *\r\n     */\r\n    loop(): object|p5.Element\r\n    \r\n    /**\r\n     *   Set 'loop' to false for an HTML5 media element. \r\n     *   Element will stop when it reaches the end.\r\n     *\r\n     */\r\n    noLoop(): object|p5.Element\r\n    \r\n    /**\r\n     *   Set HTML5 media element to autoplay or not.\r\n     *\r\n     *   @param autoplay whether the element should \r\n     *   autoplay\r\n     */\r\n    autoplay(autoplay: boolean): object|p5.Element\r\n    \r\n    /**\r\n     *   Sets volume for this HTML5 media element. If no \r\n     *   argument is given, returns the current volume.\r\n     *\r\n     *   @param [val] volume between 0.0 and 1.0\r\n     *   @return current volume or p5.MediaElement\r\n     */\r\n    volume(val?: number): number|p5.MediaElement\r\n    \r\n    /**\r\n     *   If no arguments are given, returns the current \r\n     *   playback speed of the element. The speed parameter \r\n     *   sets the speed where 2.0 will play the element \r\n     *   twice as fast, 0.5 will play at half the speed, \r\n     *   and -1 will play the element in normal speed in \r\n     *   reverse.(Note that not all browsers support \r\n     *   backward playback and even if they do, playback \r\n     *   might not be smooth.)\r\n     *\r\n     *   @param [speed] speed multiplier for element \r\n     *   playback\r\n     *   @return current playback speed or p5.MediaElement\r\n     */\r\n    speed(speed?: number): number|object|p5.MediaElement\r\n    \r\n    /**\r\n     *   If no arguments are given, returns the current \r\n     *   time of the element. If an argument is given the \r\n     *   current time of the element is set to it.\r\n     *\r\n     *   @param [time] time to jump to (in seconds)\r\n     *   @return current time (in seconds) or \r\n     *   p5.MediaElement\r\n     */\r\n    time(time?: number): number|object|p5.MediaElement\r\n    \r\n    /**\r\n     *   Returns the duration of the HTML5 media element.\r\n     *\r\n     *   @return duration\r\n     */\r\n    duration(): number\r\n    \r\n    /**\r\n     *   Schedule an event to be called when the audio or \r\n     *   video element reaches the end. If the element is \r\n     *   looping, this will not be called. The element is \r\n     *   passed in as the argument to the onended callback.\r\n     *\r\n     *   @param callback function to call when the \r\n     *   soundfile has ended. The media element will be \r\n     *   passed in as the argument to the callback.\r\n     */\r\n    onended(callback: Function): object|p5.MediaElement\r\n    \r\n    /**\r\n     *   Send the audio output of this element to a \r\n     *   specified audioNode or p5.sound object. If no \r\n     *   element is provided, connects to p5's master \r\n     *   output. That connection is established when this \r\n     *   method is first called. All connections are \r\n     *   removed by the .disconnect() method. This method \r\n     *   is meant to be used with the p5.sound.js addon \r\n     *   library.\r\n     *\r\n     *   @param audioNode AudioNode from the Web Audio API, \r\n     *   or an object from the p5.sound library\r\n     */\r\n    connect(audioNode: AudioNode|object): void\r\n    \r\n    /**\r\n     *   Disconnect all Web Audio routing, including to \r\n     *   master output. This is useful if you want to \r\n     *   re-route the output through audio effects, for \r\n     *   example.\r\n     *\r\n     */\r\n    disconnect(): void\r\n    \r\n    /**\r\n     *   Show the default MediaElement controls, as \r\n     *   determined by the web browser.\r\n     *\r\n     */\r\n    showControls(): void\r\n    \r\n    /**\r\n     *   Hide the default mediaElement controls.\r\n     *\r\n     */\r\n    hideControls(): void\r\n    \r\n    /**\r\n     *   Schedule events to trigger every time a \r\n     *   MediaElement (audio/video) reaches a playback cue \r\n     *   point. Accepts a callback function, a time (in \r\n     *   seconds) at which to trigger the callback, and an \r\n     *   optional parameter for the callback. \r\n     * \r\n     *   Time will be passed as the first parameter to the \r\n     *   callback function, and param will be the second \r\n     *   parameter.\r\n     *\r\n     *   @param time Time in seconds, relative to this \r\n     *   media element's playback. For example, to trigger \r\n     *   an event every time playback reaches two seconds, \r\n     *   pass in the number 2. This will be passed as the \r\n     *   first parameter to the callback function.\r\n     *   @param callback Name of a function that will be \r\n     *   called at the given time. The callback will \r\n     *   receive time and (optionally) param as its two \r\n     *   parameters.\r\n     *   @param [value] An object to be passed as the \r\n     *   second parameter to the callback function.\r\n     *   @return id ID of this cue, useful for \r\n     *   removeCue(id)\r\n     */\r\n    addCue(time: number, callback: Function, value?: object): number\r\n    \r\n    /**\r\n     *   Remove a callback based on its ID. The ID is \r\n     *   returned by the addCue method.\r\n     *\r\n     *   @param id ID of the cue, as returned by addCue\r\n     */\r\n    removeCue(id: number): void\r\n    \r\n    /**\r\n     *   Remove all of the callbacks that had originally \r\n     *   been scheduled via the addCue method.\r\n     *\r\n     *   @param id ID of the cue, as returned by addCue\r\n     */\r\n    clearCues(id: number): void\r\n  }\r\n  class File {\r\n    /**\r\n     *   Base class for a file Using this for \r\n     *   createFileInput\r\n     *\r\n     *   @param file File that is wrapped\r\n     */\r\n    constructor(file: File)\r\n    \r\n    /**\r\n     *   Underlying File object. All normal File methods \r\n     *   can be called on this.\r\n     *\r\n     */\r\n    file: any\r\n    \r\n    /**\r\n     *   File type (image, text, etc.)\r\n     *\r\n     */\r\n    type: any\r\n    \r\n    /**\r\n     *   File subtype (usually the file extension jpg, png, \r\n     *   xml, etc.)\r\n     *\r\n     */\r\n    subtype: any\r\n    \r\n    /**\r\n     *   File name\r\n     *\r\n     */\r\n    name: any\r\n    \r\n    /**\r\n     *   File size\r\n     *\r\n     */\r\n    size: any\r\n    \r\n    /**\r\n     *   URL string containing image data.\r\n     *\r\n     */\r\n    data: any\r\n  }\r\n  \r\n  // lib/addons/p5.sound.js\r\n  \r\n  class SoundFile {\r\n    /**\r\n     *   SoundFile object with a path to a file. The \r\n     *   p5.SoundFile may not be available immediately \r\n     *   because it loads the file information \r\n     *   asynchronously. \r\n     * \r\n     *   To do something with the sound as soon as it loads \r\n     *   pass the name of a function as the second \r\n     *   parameter. \r\n     * \r\n     *   Only one file path is required. However, audio \r\n     *   file formats (i.e. mp3, ogg, wav and m4a/aac) are \r\n     *   not supported by all web browsers. If you want to \r\n     *   ensure compatability, instead of a single file \r\n     *   path, you may include an Array of filepaths, and \r\n     *   the browser will choose a format that works.\r\n     *\r\n     *   @param path path to a sound file (String). \r\n     *   Optionally, you may include multiple file formats \r\n     *   in an array. Alternately, accepts an object from \r\n     *   the HTML5 File API, or a p5.File.\r\n     *   @param [successCallback] Name of a function to \r\n     *   call once file loads\r\n     *   @param [errorCallback] Name of a function to call \r\n     *   if file fails to load. This function will receive \r\n     *   an error or XMLHttpRequest object with information \r\n     *   about what went wrong.\r\n     *   @param [whileLoadingCallback] Name of a function \r\n     *   to call while file is loading. That function will \r\n     *   receive progress of the request to load the sound \r\n     *   file (between 0 and 1) as its first parameter. \r\n     *   This progress does not account for the additional \r\n     *   time needed to decode the audio data.\r\n     */\r\n    constructor(path: string|any[], successCallback?: Function, errorCallback?: Function, whileLoadingCallback?: Function)\r\n    \r\n    /**\r\n     *   loadSound() returns a new p5.SoundFile from a \r\n     *   specified path. If called during preload(), the \r\n     *   p5.SoundFile will be ready to play in time for \r\n     *   setup() and draw(). If called outside of preload, \r\n     *   the p5.SoundFile will not be ready immediately, so \r\n     *   loadSound accepts a callback as the second \r\n     *   parameter. Using a  local server is recommended \r\n     *   when loading external files.\r\n     *\r\n     *   @param path Path to the sound file, or an array \r\n     *   with paths to soundfiles in multiple formats i.e. \r\n     *   ['sound.ogg', 'sound.mp3']. Alternately, accepts \r\n     *   an object: either from the HTML5 File API, or a \r\n     *   p5.File.\r\n     *   @param [successCallback] Name of a function to \r\n     *   call once file loads\r\n     *   @param [errorCallback] Name of a function to call \r\n     *   if there is an error loading the file.\r\n     *   @param [whileLoading] Name of a function to call \r\n     *   while file is loading. This function will receive \r\n     *   the percentage loaded so far, from 0.0 to 1.0.\r\n     *   @return Returns a p5.SoundFile\r\n     */\r\n    loadSound(path: string|any[], successCallback?: Function, errorCallback?: Function, whileLoading?: Function): SoundFile\r\n    \r\n    /**\r\n     *   Returns true if the sound file finished loading \r\n     *   successfully.\r\n     *\r\n     */\r\n    isLoaded(): boolean\r\n    \r\n    /**\r\n     *   Play the p5.SoundFile\r\n     *\r\n     *   @param [startTime] (optional) schedule playback to \r\n     *   start (in seconds from now).\r\n     *   @param [rate] (optional) playback rate\r\n     *   @param [amp] (optional) amplitude (volume) of \r\n     *   playback\r\n     *   @param [cueStart] (optional) cue start time in \r\n     *   seconds\r\n     *   @param [duration] (optional) duration of playback \r\n     *   in seconds\r\n     */\r\n    play(startTime?: number, rate?: number, amp?: number, cueStart?: number, duration?: number): void\r\n    \r\n    /**\r\n     *   p5.SoundFile has two play modes: restart and \r\n     *   sustain. Play Mode determines what happens to a \r\n     *   p5.SoundFile if it is triggered while in the \r\n     *   middle of playback. In sustain mode, playback will \r\n     *   continue simultaneous to the new playback. In \r\n     *   restart mode, play() will stop playback and start \r\n     *   over. With untilDone, a sound will play only if \r\n     *   it's not already playing. Sustain is the default \r\n     *   mode.\r\n     *\r\n     *   @param str 'restart' or 'sustain' or 'untilDone'\r\n     */\r\n    playMode(str: string): void\r\n    \r\n    /**\r\n     *   Pauses a file that is currently playing. If the \r\n     *   file is not playing, then nothing will happen. \r\n     *   After pausing, .play() will resume from the paused \r\n     *   position. If p5.SoundFile had been set to loop \r\n     *   before it was paused, it will continue to loop \r\n     *   after it is unpaused with .play().\r\n     *\r\n     *   @param [startTime] (optional) schedule event to \r\n     *   occur seconds from now\r\n     */\r\n    pause(startTime?: number): void\r\n    \r\n    /**\r\n     *   Loop the p5.SoundFile. Accepts optional parameters \r\n     *   to set the playback rate, playback volume, \r\n     *   loopStart, loopEnd.\r\n     *\r\n     *   @param [startTime] (optional) schedule event to \r\n     *   occur seconds from now\r\n     *   @param [rate] (optional) playback rate\r\n     *   @param [amp] (optional) playback volume\r\n     *   @param [cueLoopStart] (optional) startTime in \r\n     *   seconds\r\n     *   @param [duration] (optional) loop duration in \r\n     *   seconds\r\n     */\r\n    loop(startTime?: number, rate?: number, amp?: number, cueLoopStart?: number, duration?: number): void\r\n    \r\n    /**\r\n     *   Set a p5.SoundFile's looping flag to true or \r\n     *   false. If the sound is currently playing, this \r\n     *   change will take effect when it reaches the end of \r\n     *   the current playback.\r\n     *\r\n     *   @param Boolean set looping to true or false\r\n     */\r\n    setLoop(Boolean: boolean): void\r\n    \r\n    /**\r\n     *   Returns 'true' if a p5.SoundFile is currently \r\n     *   looping and playing, 'false' if not.\r\n     *\r\n     */\r\n    isLooping(): boolean\r\n    \r\n    /**\r\n     *   Returns true if a p5.SoundFile is playing, false \r\n     *   if not (i.e. paused or stopped).\r\n     *\r\n     */\r\n    isPlaying(): boolean\r\n    \r\n    /**\r\n     *   Returns true if a p5.SoundFile is paused, false if \r\n     *   not (i.e. playing or stopped).\r\n     *\r\n     */\r\n    isPaused(): boolean\r\n    \r\n    /**\r\n     *   Stop soundfile playback.\r\n     *\r\n     *   @param [startTime] (optional) schedule event to \r\n     *   occur in seconds from now\r\n     */\r\n    stop(startTime?: number): void\r\n    \r\n    /**\r\n     *   Multiply the output volume (amplitude) of a sound \r\n     *   file between 0.0 (silence) and 1.0 (full volume). \r\n     *   1.0 is the maximum amplitude of a digital sound, \r\n     *   so multiplying by greater than 1.0 may cause \r\n     *   digital distortion. To fade, provide a rampTime \r\n     *   parameter. For more complex fades, see the Env \r\n     *   class. Alternately, you can pass in a signal \r\n     *   source such as an oscillator to modulate the \r\n     *   amplitude with an audio signal.\r\n     *\r\n     *   @param volume Volume (amplitude) between 0.0 and \r\n     *   1.0 or modulating signal/oscillator\r\n     *   @param [rampTime] Fade for t seconds\r\n     *   @param [timeFromNow] Schedule this event to happen \r\n     *   at t seconds in the future\r\n     */\r\n    setVolume(volume: number|object, rampTime?: number, timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Set the stereo panning of a p5.sound object to a \r\n     *   floating point number between -1.0 (left) and 1.0 \r\n     *   (right). Default is 0.0 (center).\r\n     *\r\n     *   @param [panValue] Set the stereo panner\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    pan(panValue?: number, timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Returns the current stereo pan position (-1.0 to \r\n     *   1.0)\r\n     *\r\n     *   @return Returns the stereo pan setting of the \r\n     *   Oscillator as a number between -1.0 (left) and 1.0 \r\n     *   (right). 0.0 is center and default.\r\n     */\r\n    getPan(): number\r\n    \r\n    /**\r\n     *   Set the playback rate of a sound file. Will change \r\n     *   the speed and the pitch. Values less than zero \r\n     *   will reverse the audio buffer.\r\n     *\r\n     *   @param [playbackRate] Set the playback rate. 1.0 \r\n     *   is normal, .5 is half-speed, 2.0 is twice as fast. \r\n     *   Values less than zero play backwards.\r\n     */\r\n    rate(playbackRate?: number): void\r\n    \r\n    /**\r\n     *   Returns the duration of a sound file in seconds.\r\n     *\r\n     *   @return The duration of the soundFile in seconds.\r\n     */\r\n    duration(): number\r\n    \r\n    /**\r\n     *   Return the current position of the p5.SoundFile \r\n     *   playhead, in seconds. Time is relative to the \r\n     *   normal buffer direction, so if reverseBuffer has \r\n     *   been called, currentTime will count backwards.\r\n     *\r\n     *   @return currentTime of the soundFile in seconds.\r\n     */\r\n    currentTime(): number\r\n    \r\n    /**\r\n     *   Move the playhead of the song to a position, in \r\n     *   seconds. Start timing and playback duration. If \r\n     *   none are given, will reset the file to play entire \r\n     *   duration from start to finish.\r\n     *\r\n     *   @param cueTime cueTime of the soundFile in \r\n     *   seconds.\r\n     *   @param duration duration in seconds.\r\n     */\r\n    jump(cueTime: number, duration: number): void\r\n    \r\n    /**\r\n     *   Return the number of channels in a sound file. For \r\n     *   example, Mono = 1, Stereo = 2.\r\n     *\r\n     *   @return [channels]\r\n     */\r\n    channels(): number\r\n    \r\n    /**\r\n     *   Return the sample rate of the sound file.\r\n     *\r\n     *   @return [sampleRate]\r\n     */\r\n    sampleRate(): number\r\n    \r\n    /**\r\n     *   Return the number of samples in a sound file. \r\n     *   Equal to sampleRate * duration.\r\n     *\r\n     *   @return [sampleCount]\r\n     */\r\n    frames(): number\r\n    \r\n    /**\r\n     *   Returns an array of amplitude peaks in a \r\n     *   p5.SoundFile that can be used to draw a static \r\n     *   waveform. Scans through the p5.SoundFile's audio \r\n     *   buffer to find the greatest amplitudes. Accepts \r\n     *   one parameter, 'length', which determines size of \r\n     *   the array. Larger arrays result in more precise \r\n     *   waveform visualizations. Inspired by \r\n     *   Wavesurfer.js.\r\n     *\r\n     *   @param [length] length is the size of the returned \r\n     *   array. Larger length results in more precision. \r\n     *   Defaults to 5*width of the browser window.\r\n     *   @return Array of peaks.\r\n     */\r\n    getPeaks(length?: number): Float32Array\r\n    \r\n    /**\r\n     *   Reverses the p5.SoundFile's buffer source. \r\n     *   Playback must be handled separately (see example).\r\n     *\r\n     */\r\n    reverseBuffer(): void\r\n    \r\n    /**\r\n     *   Schedule an event to be called when the soundfile \r\n     *   reaches the end of a buffer. If the soundfile is \r\n     *   playing through once, this will be called when it \r\n     *   ends. If it is looping, it will be called when \r\n     *   stop is called.\r\n     *\r\n     *   @param callback function to call when the \r\n     *   soundfile has ended.\r\n     */\r\n    onended(callback: Function): void\r\n    \r\n    /**\r\n     *   Connects the output of a p5sound object to input \r\n     *   of another p5.sound object. For example, you may \r\n     *   connect a p5.SoundFile to an FFT or an Effect. If \r\n     *   no parameter is given, it will connect to the \r\n     *   master output. Most p5sound objects connect to the \r\n     *   master output when they are created.\r\n     *\r\n     *   @param [object] Audio object that accepts an input\r\n     */\r\n    connect(object?: object): void\r\n    \r\n    /**\r\n     *   Disconnects the output of this p5sound object.\r\n     *\r\n     */\r\n    disconnect(): void\r\n    \r\n    /**\r\n     *   Reset the source for this SoundFile to a new path \r\n     *   (URL).\r\n     *\r\n     *   @param path path to audio file\r\n     *   @param callback Callback\r\n     */\r\n    setPath(path: string, callback: Function): void\r\n    \r\n    /**\r\n     *   Replace the current Audio Buffer with a new \r\n     *   Buffer.\r\n     *\r\n     *   @param buf Array of Float32 Array(s). 2 Float32 \r\n     *   Arrays will create a stereo source. 1 will create \r\n     *   a mono source.\r\n     */\r\n    setBuffer(buf: any[]): void\r\n    \r\n    /**\r\n     *   processPeaks returns an array of timestamps where \r\n     *   it thinks there is a beat. This is an asynchronous \r\n     *   function that processes the soundfile in an \r\n     *   offline audio context, and sends the results to \r\n     *   your callback function. \r\n     * \r\n     *   The process involves running the soundfile through \r\n     *   a lowpass filter, and finding all of the peaks \r\n     *   above the initial threshold. If the total number \r\n     *   of peaks are below the minimum number of peaks, it \r\n     *   decreases the threshold and re-runs the analysis \r\n     *   until either minPeaks or minThreshold are reached.\r\n     *\r\n     *   @param callback a function to call once this data \r\n     *   is returned\r\n     *   @param [initThreshold] initial threshold defaults \r\n     *   to 0.9\r\n     *   @param [minThreshold] minimum threshold defaults \r\n     *   to 0.22\r\n     *   @param [minPeaks] minimum number of peaks defaults \r\n     *   to 200\r\n     *   @return Array of timestamped peaks\r\n     */\r\n    processPeaks(callback: Function, initThreshold?: number, minThreshold?: number, minPeaks?: number): any[]\r\n    \r\n    /**\r\n     *   Schedule events to trigger every time a \r\n     *   MediaElement (audio/video) reaches a playback cue \r\n     *   point. Accepts a callback function, a time (in \r\n     *   seconds) at which to trigger the callback, and an \r\n     *   optional parameter for the callback. \r\n     * \r\n     *   Time will be passed as the first parameter to the \r\n     *   callback function, and param will be the second \r\n     *   parameter.\r\n     *\r\n     *   @param time Time in seconds, relative to this \r\n     *   media element's playback. For example, to trigger \r\n     *   an event every time playback reaches two seconds, \r\n     *   pass in the number 2. This will be passed as the \r\n     *   first parameter to the callback function.\r\n     *   @param callback Name of a function that will be \r\n     *   called at the given time. The callback will \r\n     *   receive time and (optionally) param as its two \r\n     *   parameters.\r\n     *   @param [value] An object to be passed as the \r\n     *   second parameter to the callback function.\r\n     *   @return id ID of this cue, useful for \r\n     *   removeCue(id)\r\n     */\r\n    addCue(time: number, callback: Function, value?: object): number\r\n    \r\n    /**\r\n     *   Remove a callback based on its ID. The ID is \r\n     *   returned by the addCue method.\r\n     *\r\n     *   @param id ID of the cue, as returned by addCue\r\n     */\r\n    removeCue(id: number): void\r\n    \r\n    /**\r\n     *   Remove all of the callbacks that had originally \r\n     *   been scheduled via the addCue method.\r\n     *\r\n     */\r\n    clearCues(): void\r\n  }\r\n  class Amplitude {\r\n    /**\r\n     *   Amplitude measures volume between 0.0 and 1.0. \r\n     *   Listens to all p5sound by default, or use \r\n     *   setInput() to listen to a specific sound source. \r\n     *   Accepts an optional smoothing value, which \r\n     *   defaults to 0.\r\n     *\r\n     *   @param [smoothing] between 0.0 and .999 to smooth \r\n     *   amplitude readings (defaults to 0)\r\n     */\r\n    constructor(smoothing?: number)\r\n    \r\n    /**\r\n     *   Connects to the p5sound instance (master output) \r\n     *   by default. Optionally, you can pass in a specific \r\n     *   source (i.e. a soundfile).\r\n     *\r\n     *   @param [snd] set the sound source (optional, \r\n     *   defaults to master output)\r\n     *   @param [smoothing] a range between 0.0 and 1.0 to \r\n     *   smooth amplitude readings\r\n     */\r\n    setInput(snd?: any|undefined, smoothing?: number|undefined): void\r\n    \r\n    /**\r\n     *   Returns a single Amplitude reading at the moment \r\n     *   it is called. For continuous readings, run in the \r\n     *   draw loop.\r\n     *\r\n     *   @param [channel] Optionally return only channel 0 \r\n     *   (left) or 1 (right)\r\n     *   @return Amplitude as a number between 0.0 and 1.0\r\n     */\r\n    getLevel(channel?: number): number\r\n    \r\n    /**\r\n     *   Determines whether the results of \r\n     *   Amplitude.process() will be Normalized. To \r\n     *   normalize, Amplitude finds the difference the \r\n     *   loudest reading it has processed and the maximum \r\n     *   amplitude of 1.0. Amplitude adds this difference \r\n     *   to all values to produce results that will \r\n     *   reliably map between 0.0 and 1.0. However, if a \r\n     *   louder moment occurs, the amount that Normalize \r\n     *   adds to all the values will change. Accepts an \r\n     *   optional boolean parameter (true or false). \r\n     *   Normalizing is off by default.\r\n     *\r\n     *   @param [boolean] set normalize to true (1) or \r\n     *   false (0)\r\n     */\r\n    toggleNormalize(boolean?: boolean): void\r\n    \r\n    /**\r\n     *   Smooth Amplitude analysis by averaging with the \r\n     *   last analysis frame. Off by default.\r\n     *\r\n     *   @param set smoothing from 0.0 <= 1\r\n     */\r\n    smooth(set: number): void\r\n  }\r\n  class FFT {\r\n    /**\r\n     *   FFT (Fast Fourier Transform) is an analysis \r\n     *   algorithm that isolates individual  audio \r\n     *   frequencies within a waveform. Once instantiated, \r\n     *   a p5.FFT object can return an array based on two \r\n     *   types of analyses: \r\n     *  \r\n     *   • FFT.waveform() computes amplitude values along \r\n     *   the time domain. The array indices correspond to \r\n     *   samples across a brief moment in time. Each value \r\n     *   represents amplitude of the waveform at that \r\n     *   sample of time.\r\n     *  \r\n     *   • FFT.analyze()  computes amplitude values along \r\n     *   the frequency domain. The array indices correspond \r\n     *   to frequencies (i.e. pitches), from the lowest to \r\n     *   the highest that humans can hear. Each value \r\n     *   represents amplitude at that slice of the \r\n     *   frequency spectrum. Use with getEnergy() to \r\n     *   measure amplitude at specific frequencies, or \r\n     *   within a range of frequencies.  \r\n     * \r\n     *   FFT analyzes a very short snapshot of sound called \r\n     *   a sample buffer. It returns an array of amplitude \r\n     *   measurements, referred to as bins. The array is \r\n     *   1024 bins long by default. You can change the bin \r\n     *   array length, but it must be a power of 2 between \r\n     *   16 and 1024 in order for the FFT algorithm to \r\n     *   function correctly. The actual size of the FFT \r\n     *   buffer is twice the number of bins, so given a \r\n     *   standard sample rate, the buffer is 2048/44100 \r\n     *   seconds long.\r\n     *\r\n     *   @param [smoothing] Smooth results of Freq \r\n     *   Spectrum. 0.0 < smoothing < 1.0. Defaults to 0.8.\r\n     *   @param [bins] Length of resulting array. Must be a \r\n     *   power of two between 16 and 1024. Defaults to \r\n     *   1024.\r\n     */\r\n    constructor(smoothing?: number, bins?: number)\r\n    \r\n    /**\r\n     *   Set the input source for the FFT analysis. If no \r\n     *   source is provided, FFT will analyze all sound in \r\n     *   the sketch.\r\n     *\r\n     *   @param [source] p5.sound object (or web audio API \r\n     *   source node)\r\n     */\r\n    setInput(source?: object): void\r\n    \r\n    /**\r\n     *   Returns an array of amplitude values (between -1.0 \r\n     *   and +1.0) that represent a snapshot of amplitude \r\n     *   readings in a single buffer. Length will be equal \r\n     *   to bins (defaults to 1024). Can be used to draw \r\n     *   the waveform of a sound.\r\n     *\r\n     *   @param [bins] Must be a power of two between 16 \r\n     *   and 1024. Defaults to 1024.\r\n     *   @param [precision] If any value is provided, will \r\n     *   return results in a Float32 Array which is more \r\n     *   precise than a regular array.\r\n     *   @return Array Array of amplitude values (-1 to 1) \r\n     *   over time. Array length = bins.\r\n     */\r\n    waveform(bins?: number, precision?: string): any[]\r\n    \r\n    /**\r\n     *   Returns an array of amplitude values (between 0 \r\n     *   and 255) across the frequency spectrum. Length is \r\n     *   equal to FFT bins (1024 by default). The array \r\n     *   indices correspond to frequencies (i.e. pitches), \r\n     *   from the lowest to the highest that humans can \r\n     *   hear. Each value represents amplitude at that \r\n     *   slice of the frequency spectrum. Must be called \r\n     *   prior to using getEnergy().\r\n     *\r\n     *   @param [bins] Must be a power of two between 16 \r\n     *   and 1024. Defaults to 1024.\r\n     *   @param [scale] If \"dB,\" returns decibel float \r\n     *   measurements between -140 and 0 (max). Otherwise \r\n     *   returns integers from 0-255.\r\n     *   @return spectrum Array of energy \r\n     *   (amplitude/volume) values across the frequency \r\n     *   spectrum. Lowest energy (silence) = 0, highest \r\n     *   possible is 255.\r\n     */\r\n    analyze(bins?: number, scale?: number): any[]\r\n    \r\n    /**\r\n     *   Returns the amount of energy (volume) at a \r\n     *   specific  frequency, or the average amount of \r\n     *   energy between two frequencies. Accepts Number(s) \r\n     *   corresponding to frequency (in Hz), or a String \r\n     *   corresponding to predefined frequency ranges \r\n     *   (\"bass\", \"lowMid\", \"mid\", \"highMid\", \"treble\"). \r\n     *   Returns a range between 0 (no energy/volume at \r\n     *   that frequency) and 255 (maximum energy). NOTE: \r\n     *   analyze() must be called prior to getEnergy(). \r\n     *   Analyze() tells the FFT to analyze frequency data, \r\n     *   and getEnergy() uses the results determine the \r\n     *   value at a specific frequency or range of \r\n     *   frequencies.\r\n     *\r\n     *   @param frequency1 Will return a value representing \r\n     *   energy at this frequency. Alternately, the strings \r\n     *   \"bass\", \"lowMid\" \"mid\", \"highMid\", and \"treble\" \r\n     *   will return predefined frequency ranges.\r\n     *   @param [frequency2] If a second frequency is \r\n     *   given, will return average amount of energy that \r\n     *   exists between the two frequencies.\r\n     *   @return Energy Energy (volume/amplitude) from 0 \r\n     *   and 255.\r\n     */\r\n    getEnergy(frequency1: number|string, frequency2?: number): number\r\n    \r\n    /**\r\n     *   Returns the  spectral centroid of the input \r\n     *   signal. NOTE: analyze() must be called prior to \r\n     *   getCentroid(). Analyze() tells the FFT to analyze \r\n     *   frequency data, and getCentroid() uses the results \r\n     *   determine the spectral centroid.\r\n     *\r\n     *   @return Spectral Centroid Frequency Frequency of \r\n     *   the spectral centroid in Hz.\r\n     */\r\n    getCentroid(): number\r\n    \r\n    /**\r\n     *   Smooth FFT analysis by averaging with the last \r\n     *   analysis frame.\r\n     *\r\n     *   @param smoothing 0.0 < smoothing < 1.0. Defaults \r\n     *   to 0.8.\r\n     */\r\n    smooth(smoothing: number): void\r\n    \r\n    /**\r\n     *   Returns an array of average amplitude values for a \r\n     *   given number of frequency bands split equally. N \r\n     *   defaults to 16. NOTE: analyze() must be called \r\n     *   prior to linAverages(). Analyze() tells the FFT to \r\n     *   analyze frequency data, and linAverages() uses the \r\n     *   results to group them into a smaller set of \r\n     *   averages.\r\n     *\r\n     *   @param N Number of returned frequency groups\r\n     *   @return linearAverages Array of average amplitude \r\n     *   values for each group\r\n     */\r\n    linAverages(N: number): any[]\r\n    \r\n    /**\r\n     *   Returns an array of average amplitude values of \r\n     *   the spectrum, for a given set of  Octave Bands \r\n     *   NOTE: analyze() must be called prior to \r\n     *   logAverages(). Analyze() tells the FFT to analyze \r\n     *   frequency data, and logAverages() uses the results \r\n     *   to group them into a smaller set of averages.\r\n     *\r\n     *   @param octaveBands Array of Octave Bands objects \r\n     *   for grouping\r\n     *   @return logAverages Array of average amplitude \r\n     *   values for each group\r\n     */\r\n    logAverages(octaveBands: any[]): any[]\r\n    \r\n    /**\r\n     *   Calculates and Returns the 1/N Octave Bands N \r\n     *   defaults to 3 and minimum central frequency to \r\n     *   15.625Hz. (1/3 Octave Bands ~= 31 Frequency Bands) \r\n     *   Setting fCtr0 to a central value of a higher \r\n     *   octave will ignore the lower bands and produce \r\n     *   less frequency groups.\r\n     *\r\n     *   @param N Specifies the 1/N type of generated \r\n     *   octave bands\r\n     *   @param fCtr0 Minimum central frequency for the \r\n     *   lowest band\r\n     *   @return octaveBands Array of octave band objects \r\n     *   with their bounds\r\n     */\r\n    getOctaveBands(N: number, fCtr0: number): any[]\r\n  }\r\n  class Signal {\r\n    /**\r\n     *   p5.Signal is a constant audio-rate signal used by \r\n     *   p5.Oscillator and p5.Envelope for modulation math. \r\n     *   This is necessary because Web Audio is processed \r\n     *   on a seprate clock. For example, the p5 draw loop \r\n     *   runs about 60 times per second. But the audio \r\n     *   clock must process samples 44100 times per second. \r\n     *   If we want to add a value to each of those \r\n     *   samples, we can't do it in the draw loop, but we \r\n     *   can do it by adding a constant-rate audio \r\n     *   signal.</p. \r\n     * \r\n     *   This class mostly functions behind the scenes in \r\n     *   p5.sound, and returns a Tone.Signal from the \r\n     *   Tone.js library by Yotam Mann. If you want to work \r\n     *   directly with audio signals for modular synthesis, \r\n     *   check out tone.js.\r\n     *\r\n     *   @return A Signal object from the Tone.js library\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Fade to value, for smooth transitions\r\n     *\r\n     *   @param value Value to set this signal\r\n     *   @param [secondsFromNow] Length of fade, in seconds \r\n     *   from now\r\n     */\r\n    fade(value: number, secondsFromNow?: number): void\r\n    \r\n    /**\r\n     *   Connect a p5.sound object or Web Audio node to \r\n     *   this p5.Signal so that its amplitude values can be \r\n     *   scaled.\r\n     *\r\n     */\r\n    setInput(input: object): void\r\n    \r\n    /**\r\n     *   Add a constant value to this audio signal, and \r\n     *   return the resulting audio signal. Does not change \r\n     *   the value of the original signal, instead it \r\n     *   returns a new p5.SignalAdd.\r\n     *\r\n     *   @return object\r\n     */\r\n    add(number: number): p5.Signal\r\n    \r\n    /**\r\n     *   Multiply this signal by a constant value, and \r\n     *   return the resulting audio signal. Does not change \r\n     *   the value of the original signal, instead it \r\n     *   returns a new p5.SignalMult.\r\n     *\r\n     *   @param number to multiply\r\n     *   @return object\r\n     */\r\n    mult(number: number): p5.Signal\r\n    \r\n    /**\r\n     *   Scale this signal value to a given range, and \r\n     *   return the result as an audio signal. Does not \r\n     *   change the value of the original signal, instead \r\n     *   it returns a new p5.SignalScale.\r\n     *\r\n     *   @param number to multiply\r\n     *   @param inMin input range minumum\r\n     *   @param inMax input range maximum\r\n     *   @param outMin input range minumum\r\n     *   @param outMax input range maximum\r\n     *   @return object\r\n     */\r\n    scale(number: number, inMin: number, inMax: number, outMin: number, outMax: number): p5.Signal\r\n  }\r\n  class Oscillator {\r\n    /**\r\n     *   Creates a signal that oscillates between -1.0 and \r\n     *   1.0. By default, the oscillation takes the form of \r\n     *   a sinusoidal shape ('sine'). Additional types \r\n     *   include 'triangle', 'sawtooth' and 'square'. The \r\n     *   frequency defaults to 440 oscillations per second \r\n     *   (440Hz, equal to the pitch of an 'A' note). Set \r\n     *   the type of oscillation with setType(), or by \r\n     *   instantiating a specific oscillator: p5.SinOsc, \r\n     *   p5.TriOsc, p5.SqrOsc, or p5.SawOsc.\r\n     *\r\n     *   @param [freq] frequency defaults to 440Hz\r\n     *   @param [type] type of oscillator. Options: 'sine' \r\n     *   (default), 'triangle', 'sawtooth', 'square'\r\n     */\r\n    constructor(freq?: number, type?: string)\r\n    \r\n    /**\r\n     *   Start an oscillator. Accepts an optional parameter \r\n     *   to determine how long (in seconds from now) until \r\n     *   the oscillator starts.\r\n     *\r\n     *   @param [time] startTime in seconds from now.\r\n     *   @param [frequency] frequency in Hz.\r\n     */\r\n    start(time?: number, frequency?: number): void\r\n    \r\n    /**\r\n     *   Stop an oscillator. Accepts an optional parameter \r\n     *   to determine how long (in seconds from now) until \r\n     *   the oscillator stops.\r\n     *\r\n     *   @param secondsFromNow Time, in seconds from now.\r\n     */\r\n    stop(secondsFromNow: number): void\r\n    \r\n    /**\r\n     *   Set the amplitude between 0 and 1.0. Or, pass in \r\n     *   an object such as an oscillator to modulate \r\n     *   amplitude with an audio signal.\r\n     *\r\n     *   @param vol between 0 and 1.0 or a modulating \r\n     *   signal/oscillator\r\n     *   @param [rampTime] create a fade that lasts \r\n     *   rampTime\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     *   @return gain If no value is provided, returns the \r\n     *   Web Audio API AudioParam that controls this \r\n     *   oscillator's gain/amplitude/volume)\r\n     */\r\n    amp(vol: number|object, rampTime?: number, timeFromNow?: number): AudioParam\r\n    \r\n    /**\r\n     *   Set frequency of an oscillator to a value. Or, \r\n     *   pass in an object such as an oscillator to \r\n     *   modulate the frequency with an audio signal.\r\n     *\r\n     *   @param Frequency Frequency in Hz or modulating \r\n     *   signal/oscillator\r\n     *   @param [rampTime] Ramp time (in seconds)\r\n     *   @param [timeFromNow] Schedule this event to happen \r\n     *   at x seconds from now\r\n     *   @return Frequency If no value is provided, returns \r\n     *   the Web Audio API AudioParam that controls this \r\n     *   oscillator's frequency\r\n     */\r\n    freq(Frequency: number|object, rampTime?: number, timeFromNow?: number): AudioParam\r\n    \r\n    /**\r\n     *   Set type to 'sine', 'triangle', 'sawtooth' or \r\n     *   'square'.\r\n     *\r\n     *   @param type 'sine', 'triangle', 'sawtooth' or \r\n     *   'square'.\r\n     */\r\n    setType(type: string): void\r\n    \r\n    /**\r\n     *   Connect to a p5.sound / Web Audio object.\r\n     *\r\n     *   @param unit A p5.sound or Web Audio object\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all outputs\r\n     *\r\n     */\r\n    disconnect(): void\r\n    \r\n    /**\r\n     *   Pan between Left (-1) and Right (1)\r\n     *\r\n     *   @param panning Number between -1 and 1\r\n     *   @param timeFromNow schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    pan(panning: number, timeFromNow: number): void\r\n    \r\n    /**\r\n     *   Set the phase of an oscillator between 0.0 and \r\n     *   1.0. In this implementation, phase is a delay time \r\n     *   based on the oscillator's current frequency.\r\n     *\r\n     *   @param phase float between 0.0 and 1.0\r\n     */\r\n    phase(phase: number): void\r\n    \r\n    /**\r\n     *   Add a value to the p5.Oscillator's output \r\n     *   amplitude, and return the oscillator. Calling this \r\n     *   method again will override the initial add() with \r\n     *   a new value.\r\n     *\r\n     *   @param number Constant number to add\r\n     *   @return Oscillator Returns this oscillator with \r\n     *   scaled output\r\n     */\r\n    add(number: number): p5.Oscillator\r\n    \r\n    /**\r\n     *   Multiply the p5.Oscillator's output amplitude by a \r\n     *   fixed value (i.e. turn it up). Calling this \r\n     *   method again will override the initial mult() with \r\n     *   a new value.\r\n     *\r\n     *   @param number Constant number to multiply\r\n     *   @return Oscillator Returns this oscillator with \r\n     *   multiplied output\r\n     */\r\n    mult(number: number): p5.Oscillator\r\n    \r\n    /**\r\n     *   Scale this oscillator's amplitude values to a \r\n     *   given range, and return the oscillator. Calling \r\n     *   this method again will override the initial \r\n     *   scale() with new values.\r\n     *\r\n     *   @param inMin input range minumum\r\n     *   @param inMax input range maximum\r\n     *   @param outMin input range minumum\r\n     *   @param outMax input range maximum\r\n     *   @return Oscillator Returns this oscillator with \r\n     *   scaled output\r\n     */\r\n    scale(inMin: number, inMax: number, outMin: number, outMax: number): p5.Oscillator\r\n  }\r\n  class SinOsc extends p5.Oscillator {\r\n    /**\r\n     *   Constructor: new p5.SinOsc(). This creates a Sine \r\n     *   Wave Oscillator and is equivalent to  new \r\n     *   p5.Oscillator('sine')  or creating a p5.Oscillator \r\n     *   and then calling its method setType('sine'). See \r\n     *   p5.Oscillator for methods.\r\n     *\r\n     *   @param [freq] Set the frequency\r\n     */\r\n    constructor(freq?: number)\r\n  }\r\n  class TriOsc extends p5.Oscillator {\r\n    /**\r\n     *   Constructor: new p5.TriOsc(). This creates a \r\n     *   Triangle Wave Oscillator and is equivalent to new \r\n     *   p5.Oscillator('triangle')  or creating a \r\n     *   p5.Oscillator and then calling its method \r\n     *   setType('triangle'). See p5.Oscillator for \r\n     *   methods.\r\n     *\r\n     *   @param [freq] Set the frequency\r\n     */\r\n    constructor(freq?: number)\r\n  }\r\n  class SawOsc extends p5.Oscillator {\r\n    /**\r\n     *   Constructor: new p5.SawOsc(). This creates a \r\n     *   SawTooth Wave Oscillator and is equivalent to  new \r\n     *   p5.Oscillator('sawtooth')  or creating a \r\n     *   p5.Oscillator and then calling its method \r\n     *   setType('sawtooth'). See p5.Oscillator for \r\n     *   methods.\r\n     *\r\n     *   @param [freq] Set the frequency\r\n     */\r\n    constructor(freq?: number)\r\n  }\r\n  class SqrOsc extends p5.Oscillator {\r\n    /**\r\n     *   Constructor: new p5.SqrOsc(). This creates a \r\n     *   Square Wave Oscillator and is equivalent to  new \r\n     *   p5.Oscillator('square')  or creating a \r\n     *   p5.Oscillator and then calling its method \r\n     *   setType('square'). See p5.Oscillator for methods.\r\n     *\r\n     *   @param [freq] Set the frequency\r\n     */\r\n    constructor(freq?: number)\r\n  }\r\n  class Env {\r\n    /**\r\n     *   Envelopes are pre-defined amplitude distribution \r\n     *   over time. Typically, envelopes are used to \r\n     *   control the output volume of an object, a series \r\n     *   of fades referred to as Attack, Decay, Sustain and \r\n     *   Release ( ADSR ). Envelopes can also control other \r\n     *   Web Audio Parameters—for example, a p5.Env can \r\n     *   control an Oscillator's frequency like this: \r\n     *   osc.freq(env). Use setRange to change the \r\n     *   attack/release level. Use setADSR to change \r\n     *   attackTime, decayTime, sustainPercent and \r\n     *   releaseTime. \r\n     * \r\n     *   Use the play method to play the entire envelope, \r\n     *   the ramp method for a pingable trigger, or \r\n     *   triggerAttack/ triggerRelease to trigger \r\n     *   noteOn/noteOff.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Time until envelope reaches attackLevel\r\n     *\r\n     */\r\n    attackTime: any\r\n    \r\n    /**\r\n     *   Level once attack is complete.\r\n     *\r\n     */\r\n    attackLevel: any\r\n    \r\n    /**\r\n     *   Time until envelope reaches decayLevel.\r\n     *\r\n     */\r\n    decayTime: any\r\n    \r\n    /**\r\n     *   Level after decay. The envelope will sustain here \r\n     *   until it is released.\r\n     *\r\n     */\r\n    decayLevel: any\r\n    \r\n    /**\r\n     *   Duration of the release portion of the envelope.\r\n     *\r\n     */\r\n    releaseTime: any\r\n    \r\n    /**\r\n     *   Level at the end of the release.\r\n     *\r\n     */\r\n    releaseLevel: any\r\n    \r\n    /**\r\n     *   Reset the envelope with a series of time/value \r\n     *   pairs.\r\n     *\r\n     *   @param attackTime Time (in seconds) before level \r\n     *   reaches attackLevel\r\n     *   @param attackLevel Typically an amplitude between \r\n     *   0.0 and 1.0\r\n     *   @param decayTime Time\r\n     *   @param decayLevel Amplitude (In a standard ADSR \r\n     *   envelope, decayLevel = sustainLevel)\r\n     *   @param releaseTime Release Time (in seconds)\r\n     *   @param releaseLevel Amplitude\r\n     */\r\n    set(attackTime: number, attackLevel: number, decayTime: number, decayLevel: number, releaseTime: number, releaseLevel: number): void\r\n    \r\n    /**\r\n     *   Set values like a traditional  ADSR envelope .\r\n     *\r\n     *   @param attackTime Time (in seconds before envelope \r\n     *   reaches Attack Level\r\n     *   @param [decayTime] Time (in seconds) before \r\n     *   envelope reaches Decay/Sustain Level\r\n     *   @param [susRatio] Ratio between attackLevel and \r\n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \r\n     *   attackLevel, 0.0 = releaseLevel. The susRatio \r\n     *   determines the decayLevel and the level at which \r\n     *   the sustain portion of the envelope will sustain. \r\n     *   For example, if attackLevel is 0.4, releaseLevel \r\n     *   is 0, and susAmt is 0.5, the decayLevel would be \r\n     *   0.2. If attackLevel is increased to 1.0 (using \r\n     *   setRange), then decayLevel would increase \r\n     *   proportionally, to become 0.5.\r\n     *   @param [releaseTime] Time in seconds from now \r\n     *   (defaults to 0)\r\n     */\r\n    setADSR(attackTime: number, decayTime?: number, susRatio?: number, releaseTime?: number): void\r\n    \r\n    /**\r\n     *   Set max (attackLevel) and min (releaseLevel) of \r\n     *   envelope.\r\n     *\r\n     *   @param aLevel attack level (defaults to 1)\r\n     *   @param rLevel release level (defaults to 0)\r\n     */\r\n    setRange(aLevel: number, rLevel: number): void\r\n    \r\n    /**\r\n     *   Assign a parameter to be controlled by this \r\n     *   envelope. If a p5.Sound object is given, then the \r\n     *   p5.Env will control its output gain. If multiple \r\n     *   inputs are provided, the env will control all of \r\n     *   them.\r\n     *\r\n     *   @param [inputs] A p5.sound object or Web Audio \r\n     *   Param.\r\n     */\r\n    setInput(inputs?: object): void\r\n    \r\n    /**\r\n     *   Set whether the envelope ramp is linear (default) \r\n     *   or exponential. Exponential ramps can be useful \r\n     *   because we perceive amplitude and frequency \r\n     *   logarithmically.\r\n     *\r\n     *   @param isExp true is exponential, false is linear\r\n     */\r\n    setExp(isExp: boolean): void\r\n    \r\n    /**\r\n     *   Play tells the envelope to start acting on a given \r\n     *   input. If the input is a p5.sound object (i.e. \r\n     *   AudioIn, Oscillator, SoundFile), then Env will \r\n     *   control its output volume. Envelopes can also be \r\n     *   used to control any  Web Audio Audio Param.\r\n     *\r\n     *   @param unit A p5.sound object or Web Audio Param.\r\n     *   @param [startTime] time from now (in seconds) at \r\n     *   which to play\r\n     *   @param [sustainTime] time to sustain before \r\n     *   releasing the envelope\r\n     */\r\n    play(unit: object, startTime?: number, sustainTime?: number): void\r\n    \r\n    /**\r\n     *   Trigger the Attack, and Decay portion of the \r\n     *   Envelope. Similar to holding down a key on a \r\n     *   piano, but it will hold the sustain level until \r\n     *   you let go. Input can be any p5.sound object, or a  \r\n     *   Web Audio Param.\r\n     *\r\n     *   @param unit p5.sound Object or Web Audio Param\r\n     *   @param secondsFromNow time from now (in seconds)\r\n     */\r\n    triggerAttack(unit: object, secondsFromNow: number): void\r\n    \r\n    /**\r\n     *   Trigger the Release of the Envelope. This is \r\n     *   similar to releasing the key on a piano and \r\n     *   letting the sound fade according to the release \r\n     *   level and release time.\r\n     *\r\n     *   @param unit p5.sound Object or Web Audio Param\r\n     *   @param secondsFromNow time to trigger the release\r\n     */\r\n    triggerRelease(unit: object, secondsFromNow: number): void\r\n    \r\n    /**\r\n     *   Exponentially ramp to a value using the first two \r\n     *   values from setADSR(attackTime, decayTime) as  \r\n     *   time constants for simple exponential ramps. If \r\n     *   the value is higher than current value, it uses \r\n     *   attackTime, while a decrease uses decayTime.\r\n     *\r\n     *   @param unit p5.sound Object or Web Audio Param\r\n     *   @param secondsFromNow When to trigger the ramp\r\n     *   @param v Target value\r\n     *   @param [v2] Second target value (optional)\r\n     */\r\n    ramp(unit: object, secondsFromNow: number, v: number, v2?: number): void\r\n    \r\n    /**\r\n     *   Add a value to the p5.Oscillator's output \r\n     *   amplitude, and return the oscillator. Calling this \r\n     *   method again will override the initial add() with \r\n     *   new values.\r\n     *\r\n     *   @param number Constant number to add\r\n     *   @return Envelope Returns this envelope with scaled \r\n     *   output\r\n     */\r\n    add(number: number): p5.Env\r\n    \r\n    /**\r\n     *   Multiply the p5.Env's output amplitude by a fixed \r\n     *   value. Calling this method again will override the \r\n     *   initial mult() with new values.\r\n     *\r\n     *   @param number Constant number to multiply\r\n     *   @return Envelope Returns this envelope with scaled \r\n     *   output\r\n     */\r\n    mult(number: number): p5.Env\r\n    \r\n    /**\r\n     *   Scale this envelope's amplitude values to a given \r\n     *   range, and return the envelope. Calling this \r\n     *   method again will override the initial scale() \r\n     *   with new values.\r\n     *\r\n     *   @param inMin input range minumum\r\n     *   @param inMax input range maximum\r\n     *   @param outMin input range minumum\r\n     *   @param outMax input range maximum\r\n     *   @return Envelope Returns this envelope with scaled \r\n     *   output\r\n     */\r\n    scale(inMin: number, inMax: number, outMin: number, outMax: number): p5.Env\r\n  }\r\n  class Pulse extends p5.Oscillator {\r\n    /**\r\n     *   Creates a Pulse object, an oscillator that \r\n     *   implements Pulse Width Modulation. The pulse is \r\n     *   created with two oscillators. Accepts a parameter \r\n     *   for frequency, and to set the width between the \r\n     *   pulses. See  p5.Oscillator for a full list of \r\n     *   methods.\r\n     *\r\n     *   @param [freq] Frequency in oscillations per second \r\n     *   (Hz)\r\n     *   @param [w] Width between the pulses (0 to 1.0, \r\n     *   defaults to 0)\r\n     */\r\n    constructor(freq?: number, w?: number)\r\n    \r\n    /**\r\n     *   Set the width of a Pulse object (an oscillator \r\n     *   that implements Pulse Width Modulation).\r\n     *\r\n     *   @param [width] Width between the pulses (0 to 1.0, \r\n     *   defaults to 0)\r\n     */\r\n    width(width?: number): void\r\n  }\r\n  class Noise extends p5.Oscillator {\r\n    /**\r\n     *   Noise is a type of oscillator that generates a \r\n     *   buffer with random values.\r\n     *\r\n     *   @param type Type of noise can be 'white' \r\n     *   (default), 'brown' or 'pink'.\r\n     */\r\n    constructor(type: string)\r\n    \r\n    /**\r\n     *   Set type of noise to 'white', 'pink' or 'brown'. \r\n     *   White is the default.\r\n     *\r\n     *   @param [type] 'white', 'pink' or 'brown'\r\n     */\r\n    setType(type?: string): void\r\n    \r\n    /**\r\n     *   Start the noise\r\n     *\r\n     */\r\n    start(): void\r\n    \r\n    /**\r\n     *   Stop the noise.\r\n     *\r\n     */\r\n    stop(): void\r\n    \r\n    /**\r\n     *   Pan the noise.\r\n     *\r\n     *   @param panning Number between -1 (left) and 1 \r\n     *   (right)\r\n     *   @param timeFromNow schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    pan(panning: number, timeFromNow: number): void\r\n    \r\n    /**\r\n     *   Set the amplitude of the noise between 0 and 1.0. \r\n     *   Or, modulate amplitude with an audio signal such \r\n     *   as an oscillator.\r\n     *\r\n     *   @param volume amplitude between 0 and 1.0 or \r\n     *   modulating signal/oscillator\r\n     *   @param [rampTime] create a fade that lasts \r\n     *   rampTime\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    amp(volume: number|object, rampTime?: number, timeFromNow?: number): AudioParam\r\n    \r\n    /**\r\n     *   Send output to a p5.sound or web audio object\r\n     *\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all output.\r\n     *\r\n     */\r\n    disconnect(): void\r\n  }\r\n  class AudioIn {\r\n    /**\r\n     *   Get audio from an input, i.e. your computer's \r\n     *   microphone. Turn the mic on/off with the start() \r\n     *   and stop() methods. When the mic is on, its volume \r\n     *   can be measured with getLevel or by connecting an \r\n     *   FFT object. \r\n     * \r\n     *   If you want to hear the AudioIn, use the \r\n     *   .connect() method. AudioIn does not connect to \r\n     *   p5.sound output by default to prevent feedback. \r\n     * \r\n     *   Note: This uses the getUserMedia/ Stream API, \r\n     *   which is not supported by certain browsers. Access \r\n     *   in Chrome browser is limited to localhost and \r\n     *   https, but access over http may be limited.\r\n     *\r\n     *   @param [errorCallback] A function to call if there \r\n     *   is an error accessing the AudioIn. For example, \r\n     *   Safari and iOS devices do not currently allow \r\n     *   microphone access.\r\n     */\r\n    constructor(errorCallback?: Function)\r\n    \r\n    /**\r\n     *   Client must allow browser to access their \r\n     *   microphone / audioin source. Default: false. Will \r\n     *   become true when the client enables acces.\r\n     *\r\n     */\r\n    enabled: boolean\r\n    \r\n    /**\r\n     *   Start processing audio input. This enables the use \r\n     *   of other AudioIn methods like getLevel(). Note \r\n     *   that by default, AudioIn is not connected to \r\n     *   p5.sound's output. So you won't hear anything \r\n     *   unless you use the connect() method. \r\n     * \r\n     *   Certain browsers limit access to the user's \r\n     *   microphone. For example, Chrome only allows access \r\n     *   from localhost and over https. For this reason, \r\n     *   you may want to include an errorCallback—a \r\n     *   function that is called in case the browser won't \r\n     *   provide mic access.\r\n     *\r\n     *   @param [successCallback] Name of a function to \r\n     *   call on success.\r\n     *   @param [errorCallback] Name of a function to call \r\n     *   if there was an error. For example, some browsers \r\n     *   do not support getUserMedia.\r\n     */\r\n    start(successCallback?: Function, errorCallback?: Function): void\r\n    \r\n    /**\r\n     *   Turn the AudioIn off. If the AudioIn is stopped, \r\n     *   it cannot getLevel(). If re-starting, the user may \r\n     *   be prompted for permission access.\r\n     *\r\n     */\r\n    stop(): void\r\n    \r\n    /**\r\n     *   Connect to an audio unit. If no parameter is \r\n     *   provided, will connect to the master output (i.e. \r\n     *   your speakers).\r\n     *\r\n     *   @param [unit] An object that accepts audio input, \r\n     *   such as an FFT\r\n     */\r\n    connect(unit?: object): void\r\n    \r\n    /**\r\n     *   Disconnect the AudioIn from all audio units. For \r\n     *   example, if connect() had been called, \r\n     *   disconnect() will stop sending signal to your \r\n     *   speakers.\r\n     *\r\n     */\r\n    disconnect(): void\r\n    \r\n    /**\r\n     *   Read the Amplitude (volume level) of an AudioIn. \r\n     *   The AudioIn class contains its own instance of the \r\n     *   Amplitude class to help make it easy to get a \r\n     *   microphone's volume level. Accepts an optional \r\n     *   smoothing value (0.0 < 1.0). NOTE: AudioIn must \r\n     *   .start() before using .getLevel().\r\n     *\r\n     *   @param [smoothing] Smoothing is 0.0 by default. \r\n     *   Smooths values based on previous values.\r\n     *   @return Volume level (between 0.0 and 1.0)\r\n     */\r\n    getLevel(smoothing?: number): number\r\n    \r\n    /**\r\n     *   Set amplitude (volume) of a mic input between 0 \r\n     *   and 1.0.\r\n     *\r\n     *   @param vol between 0 and 1.0\r\n     *   @param [time] ramp time (optional)\r\n     */\r\n    amp(vol: number, time?: number): void\r\n    \r\n    /**\r\n     *   Returns a list of available input sources. This is \r\n     *   a wrapper for <a \r\n     *   title=\"MediaDevices.enumerateDevices() - Web APIs \r\n     *   | MDN\" target=\"_blank\" href= \r\n     *   \"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"  \r\n     *   and it returns a Promise.\r\n     *\r\n     *   @param [successCallback] This callback function \r\n     *   handles the sources when they have been \r\n     *   enumerated. The callback function receives the \r\n     *   deviceList array as its only argument\r\n     *   @param [errorCallback] This optional callback \r\n     *   receives the error message as its argument.\r\n     *   @return Returns a Promise that can be used in \r\n     *   place of the callbacks, similar to the \r\n     *   enumerateDevices() method\r\n     */\r\n    getSources(successCallback?: Function, errorCallback?: Function): object\r\n    \r\n    /**\r\n     *   Set the input source. Accepts a number \r\n     *   representing a position in the array returned by \r\n     *   getSources(). This is only available in browsers \r\n     *   that support <a \r\n     *   title=\"MediaDevices.enumerateDevices() - Web APIs \r\n     *   | MDN\" target=\"_blank\" href= \r\n     *   \"https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/enumerateDevices\"  \r\n     *   navigator.mediaDevices.enumerateDevices().\r\n     *\r\n     *   @param num position of input source in the array\r\n     */\r\n    setSource(num: number): void\r\n  }\r\n  class Effect {\r\n    /**\r\n     *   Effect is a base class for audio effects in p5.  \r\n     *   This module handles the nodes and methods that are \r\n     *   common and useful for current and future effects. \r\n     * \r\n     *   This class is extended by p5.Distortion, \r\n     *   p5.Compressor, p5.Delay, p5.Filter, p5.Reverb.\r\n     *\r\n     *   @param [ac] Reference to the audio context of the \r\n     *   p5 object\r\n     *   @param [input] Gain Node effect wrapper\r\n     *   @param [output] Gain Node effect wrapper\r\n     *   @param [_drywet] Tone.JS CrossFade node (defaults \r\n     *   to value: 1)\r\n     *   @param [wet] Effects that extend this class should \r\n     *   connect to the wet signal to this gain node, so \r\n     *   that dry and wet signals are mixed properly.\r\n     */\r\n    constructor(ac?: object, input?: AudioNode, output?: AudioNode, _drywet?: object, wet?: AudioNode)\r\n    \r\n    /**\r\n     *   Set the output volume of the filter.\r\n     *\r\n     *   @param [vol] amplitude between 0 and 1.0\r\n     *   @param [rampTime] create a fade that lasts until \r\n     *   rampTime\r\n     *   @param [tFromNow] schedule this event to happen in \r\n     *   tFromNow seconds\r\n     */\r\n    amp(vol?: number, rampTime?: number, tFromNow?: number): void\r\n    \r\n    /**\r\n     *   Link effects together in a chain Example usage: \r\n     *   filter.chain(reverb, delay, panner); May be used \r\n     *   with an open-ended number of arguments\r\n     *\r\n     *   @param [arguments] Chain together multiple sound \r\n     *   objects\r\n     */\r\n    chain(arguments?: object): void\r\n    \r\n    /**\r\n     *   Adjust the dry/wet value.\r\n     *\r\n     *   @param [fade] The desired drywet value (0 - 1.0)\r\n     */\r\n    drywet(fade?: number): void\r\n    \r\n    /**\r\n     *   Send output to a p5.js-sound, Web Audio Node, or \r\n     *   use signal to control an AudioParam\r\n     *\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all output.\r\n     *\r\n     */\r\n    disconnect(): void\r\n  }\r\n  class Filter extends p5.Effect {\r\n    /**\r\n     *   A p5.Filter uses a Web Audio Biquad Filter to \r\n     *   filter the frequency response of an input source. \r\n     *   Subclasses include: \r\n     * \r\n     *   - p5.LowPass: Allows frequencies below the cutoff \r\n     *   frequency to pass through, and attenuates \r\n     *   frequencies above the cutoff.\r\n     *   - p5.HighPass: The opposite of a lowpass filter. \r\n     *   - p5.BandPass: Allows a range of frequencies to \r\n     *   pass through and attenuates the frequencies below \r\n     *   and above this frequency range. \r\n     * \r\n     *   The .res() method controls either width of the \r\n     *   bandpass, or resonance of the low/highpass cutoff \r\n     *   frequency. \r\n     * \r\n     *   This class extends p5.Effect. Methods amp(), \r\n     *   chain(), drywet(), connect(), and disconnect() are \r\n     *   available.\r\n     *\r\n     *   @param [type] 'lowpass' (default), 'highpass', \r\n     *   'bandpass'\r\n     */\r\n    constructor(type?: string)\r\n    \r\n    /**\r\n     *   The p5.Filter is built with a  Web Audio \r\n     *   BiquadFilter Node.\r\n     *\r\n     */\r\n    biquadFilter: DelayNode\r\n    \r\n    /**\r\n     *   Filter an audio signal according to a set of \r\n     *   filter parameters.\r\n     *\r\n     *   @param Signal An object that outputs audio\r\n     *   @param [freq] Frequency in Hz, from 10 to 22050\r\n     *   @param [res] Resonance/Width of the filter \r\n     *   frequency from 0.001 to 1000\r\n     */\r\n    process(Signal: object, freq?: number, res?: number): void\r\n    \r\n    /**\r\n     *   Set the frequency and the resonance of the filter.\r\n     *\r\n     *   @param [freq] Frequency in Hz, from 10 to 22050\r\n     *   @param [res] Resonance (Q) from 0.001 to 1000\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    set(freq?: number, res?: number, timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Set the filter frequency, in Hz, from 10 to 22050 \r\n     *   (the range of human hearing, although in reality \r\n     *   most people hear in a narrower range).\r\n     *\r\n     *   @param freq Filter Frequency\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     *   @return value Returns the current frequency value\r\n     */\r\n    freq(freq: number, timeFromNow?: number): number\r\n    \r\n    /**\r\n     *   Controls either width of a bandpass frequency, or \r\n     *   the resonance of a low/highpass cutoff frequency.\r\n     *\r\n     *   @param res Resonance/Width of filter freq from \r\n     *   0.001 to 1000\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     *   @return value Returns the current res value\r\n     */\r\n    res(res: number, timeFromNow?: number): number\r\n    \r\n    /**\r\n     *   Controls the gain attribute of a Biquad Filter. \r\n     *   This is distinctly different from .amp() which is \r\n     *   inherited from p5.Effect .amp() controls the \r\n     *   volume via the output gain node p5.Filter.gain() \r\n     *   controls the gain parameter of a Biquad Filter \r\n     *   node.\r\n     *\r\n     *   @return Returns the current or updated gain value\r\n     */\r\n    gain(gain: number): number\r\n    \r\n    /**\r\n     *   Toggle function. Switches between the specified \r\n     *   type and allpass\r\n     *\r\n     *   @return [Toggle value]\r\n     */\r\n    toggle(): boolean\r\n    \r\n    /**\r\n     *   Set the type of a p5.Filter. Possible types \r\n     *   include: \"lowpass\" (default), \"highpass\", \r\n     *   \"bandpass\", \"lowshelf\", \"highshelf\", \"peaking\", \r\n     *   \"notch\", \"allpass\".\r\n     *\r\n     */\r\n    setType(t: string): void\r\n  }\r\n  class LowPass extends p5.Filter {\r\n    /**\r\n     *   Constructor: new p5.LowPass() Filter. This is the \r\n     *   same as creating a p5.Filter and then calling its \r\n     *   method setType('lowpass'). See p5.Filter for \r\n     *   methods.\r\n     *\r\n     */\r\n    constructor()\r\n  }\r\n  class HighPass extends p5.Filter {\r\n    /**\r\n     *   Constructor: new p5.HighPass() Filter. This is the \r\n     *   same as creating a p5.Filter and then calling its \r\n     *   method setType('highpass'). See p5.Filter for \r\n     *   methods.\r\n     *\r\n     */\r\n    constructor()\r\n  }\r\n  class BandPass extends p5.Filter {\r\n    /**\r\n     *   Constructor: new p5.BandPass() Filter. This is the \r\n     *   same as creating a p5.Filter and then calling its \r\n     *   method setType('bandpass'). See p5.Filter for \r\n     *   methods.\r\n     *\r\n     */\r\n    constructor()\r\n  }\r\n  class EQ extends p5.Effect {\r\n    /**\r\n     *   p5.EQ is an audio effect that performs the \r\n     *   function of a multiband audio equalizer. \r\n     *   Equalization is used to adjust the balance of \r\n     *   frequency compoenents of an audio signal. This \r\n     *   process is commonly used in sound production and \r\n     *   recording to change the waveform before it reaches \r\n     *   a sound output device. EQ can also be used as an \r\n     *   audio effect to create interesting distortions by \r\n     *   filtering out parts of the spectrum. p5.EQ is \r\n     *   built using a chain of Web Audio Biquad Filter \r\n     *   Nodes and can be instantiated with 3 or 8 bands. \r\n     *   Bands can be added or removed from the EQ by \r\n     *   directly modifying p5.EQ.bands (the array that \r\n     *   stores filters). This class extends p5.Effect. \r\n     *   Methods amp(), chain(), drywet(), connect(), and \r\n     *   disconnect() are available.\r\n     *\r\n     *   @param [_eqsize] Constructor will accept 3 or 8, \r\n     *   defaults to 3\r\n     *   @return p5.EQ object\r\n     */\r\n    constructor(_eqsize?: number)\r\n    \r\n    /**\r\n     *   The p5.EQ is built with abstracted p5.Filter \r\n     *   objects. To modify any bands, use methods of the  \r\n     *   p5.Filter API, especially gain and freq. Bands are \r\n     *   stored in an array, with indices 0 - 3, or 0 - 7\r\n     *\r\n     */\r\n    bands: any[]\r\n    \r\n    /**\r\n     *   Process an input by connecting it to the EQ\r\n     *\r\n     *   @param src Audio source\r\n     */\r\n    process(src: object): void\r\n  }\r\n  class Panner3D {\r\n    /**\r\n     *   Panner3D is based on the  Web Audio Spatial Panner \r\n     *   Node. This panner is a spatial processing node \r\n     *   that allows audio to be positioned and oriented in \r\n     *   3D space. The position is relative to an  Audio \r\n     *   Context Listener, which can be accessed by \r\n     *   p5.soundOut.audiocontext.listener\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Web Audio Spatial Panner Node Properties include \r\n     * \r\n     *   - <a title=\"w3 spec for Panning Model\" \r\n     *   href=\"https://www.w3.org/TR/webaudio/#idl-def-PanningModelType\" \r\n     *   panningModel: \"equal power\" or \"HRTF\" \r\n     *   - <a title=\"w3 spec for Distance Model\" \r\n     *   href=\"https://www.w3.org/TR/webaudio/#idl-def-DistanceModelType\" \r\n     *   distanceModel: \"linear\", \"inverse\", or \r\n     *   \"exponential\"\r\n     *\r\n     */\r\n    panner: AudioNode\r\n    \r\n    /**\r\n     *   Connect an audio sorce\r\n     *\r\n     *   @param src Input source\r\n     */\r\n    process(src: object): void\r\n    \r\n    /**\r\n     *   Set the X,Y,Z position of the Panner\r\n     *\r\n     *   @return Updated x, y, z values as an array\r\n     */\r\n    set(xVal: number, yVal: number, zVal: number, time: number): any[]\r\n    \r\n    /**\r\n     *   Getter and setter methods for position coordinates\r\n     *\r\n     *   @return updated coordinate value\r\n     */\r\n    positionX(): number\r\n    \r\n    /**\r\n     *   Getter and setter methods for position coordinates\r\n     *\r\n     *   @return updated coordinate value\r\n     */\r\n    positionY(): number\r\n    \r\n    /**\r\n     *   Getter and setter methods for position coordinates\r\n     *\r\n     *   @return updated coordinate value\r\n     */\r\n    positionZ(): number\r\n    \r\n    /**\r\n     *   Set the X,Y,Z position of the Panner\r\n     *\r\n     *   @return Updated x, y, z values as an array\r\n     */\r\n    orient(xVal: number, yVal: number, zVal: number, time: number): any[]\r\n    \r\n    /**\r\n     *   Getter and setter methods for orient coordinates\r\n     *\r\n     *   @return updated coordinate value\r\n     */\r\n    orientX(): number\r\n    \r\n    /**\r\n     *   Getter and setter methods for orient coordinates\r\n     *\r\n     *   @return updated coordinate value\r\n     */\r\n    orientY(): number\r\n    \r\n    /**\r\n     *   Getter and setter methods for orient coordinates\r\n     *\r\n     *   @return updated coordinate value\r\n     */\r\n    orientZ(): number\r\n    \r\n    /**\r\n     *   Set the rolloff factor and max distance\r\n     *\r\n     */\r\n    setFalloff(maxDistance?: number, rolloffFactor?: number): void\r\n    \r\n    /**\r\n     *   Maxium distance between the source and the \r\n     *   listener\r\n     *\r\n     *   @return updated value\r\n     */\r\n    maxDist(maxDistance: number): number\r\n    \r\n    /**\r\n     *   How quickly the volume is reduced as the source \r\n     *   moves away from the listener\r\n     *\r\n     *   @return updated value\r\n     */\r\n    rollof(rolloffFactor: number): number\r\n  }\r\n  class Delay extends p5.Effect {\r\n    /**\r\n     *   Delay is an echo effect. It processes an existing \r\n     *   sound source, and outputs a delayed version of \r\n     *   that sound. The p5.Delay can produce different \r\n     *   effects depending on the delayTime, feedback, \r\n     *   filter, and type. In the example below, a feedback \r\n     *   of 0.5 (the defaul value) will produce a looping \r\n     *   delay that decreases in volume by 50% each repeat. \r\n     *   A filter will cut out the high frequencies so that \r\n     *   the delay does not sound as piercing as the \r\n     *   original source. This class extends p5.Effect. \r\n     *   Methods amp(), chain(), drywet(), connect(), and \r\n     *   disconnect() are available.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   The p5.Delay is built with two  Web Audio Delay \r\n     *   Nodes, one for each stereo channel.\r\n     *\r\n     */\r\n    leftDelay: DelayNode\r\n    \r\n    /**\r\n     *   The p5.Delay is built with two  Web Audio Delay \r\n     *   Nodes, one for each stereo channel.\r\n     *\r\n     */\r\n    rightDelay: DelayNode\r\n    \r\n    /**\r\n     *   Add delay to an audio signal according to a set of \r\n     *   delay parameters.\r\n     *\r\n     *   @param Signal An object that outputs audio\r\n     *   @param [delayTime] Time (in seconds) of the \r\n     *   delay/echo. Some browsers limit delayTime to 1 \r\n     *   second.\r\n     *   @param [feedback] sends the delay back through \r\n     *   itself in a loop that decreases in volume each \r\n     *   time.\r\n     *   @param [lowPass] Cutoff frequency. Only \r\n     *   frequencies below the lowPass will be part of the \r\n     *   delay.\r\n     */\r\n    process(Signal: object, delayTime?: number, feedback?: number, lowPass?: number): void\r\n    \r\n    /**\r\n     *   Set the delay (echo) time, in seconds. Usually \r\n     *   this value will be a floating point number between \r\n     *   0.0 and 1.0.\r\n     *\r\n     *   @param delayTime Time (in seconds) of the delay\r\n     */\r\n    delayTime(delayTime: number): void\r\n    \r\n    /**\r\n     *   Feedback occurs when Delay sends its signal back \r\n     *   through its input in a loop. The feedback amount \r\n     *   determines how much signal to send each time \r\n     *   through the loop. A feedback greater than 1.0 is \r\n     *   not desirable because it will increase the overall \r\n     *   output each time through the loop, creating an \r\n     *   infinite feedback loop. The default value is 0.5\r\n     *\r\n     *   @param feedback 0.0 to 1.0, or an object such as \r\n     *   an Oscillator that can be used to modulate this \r\n     *   param\r\n     *   @return Feedback value\r\n     */\r\n    feedback(feedback: number|object): number\r\n    \r\n    /**\r\n     *   Set a lowpass filter frequency for the delay. A \r\n     *   lowpass filter will cut off any frequencies higher \r\n     *   than the filter frequency.\r\n     *\r\n     *   @param cutoffFreq A lowpass filter will cut off \r\n     *   any frequencies higher than the filter frequency.\r\n     *   @param res Resonance of the filter frequency \r\n     *   cutoff, or an object (i.e. a p5.Oscillator) that \r\n     *   can be used to modulate this parameter. High \r\n     *   numbers (i.e. 15) will produce a resonance, low \r\n     *   numbers (i.e. .2) will produce a slope.\r\n     */\r\n    filter(cutoffFreq: number|object, res: number|object): void\r\n    \r\n    /**\r\n     *   Choose a preset type of delay. 'pingPong' bounces \r\n     *   the signal from the left to the right channel to \r\n     *   produce a stereo effect. Any other parameter will \r\n     *   revert to the default delay setting.\r\n     *\r\n     *   @param type 'pingPong' (1) or 'default' (0)\r\n     */\r\n    setType(type: string|number): void\r\n    \r\n    /**\r\n     *   Set the output level of the delay effect.\r\n     *\r\n     *   @param volume amplitude between 0 and 1.0\r\n     *   @param [rampTime] create a fade that lasts \r\n     *   rampTime\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    amp(volume: number, rampTime?: number, timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Send output to a p5.sound or web audio object\r\n     *\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all output.\r\n     *\r\n     */\r\n    disconnect(): void\r\n  }\r\n  class Reverb extends p5.Effect {\r\n    /**\r\n     *   Reverb adds depth to a sound through a large \r\n     *   number of decaying echoes. It creates the \r\n     *   perception that sound is occurring in a physical \r\n     *   space. The p5.Reverb has paramters for Time (how \r\n     *   long does the reverb last) and decayRate (how much \r\n     *   the sound decays with each echo) that can be set \r\n     *   with the .set() or .process() methods. The \r\n     *   p5.Convolver extends p5.Reverb allowing you to \r\n     *   recreate the sound of actual physical spaces \r\n     *   through convolution. This class extends p5.Effect. \r\n     *   Methods amp(), chain(), drywet(), connect(), and \r\n     *   disconnect() are available.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Connect a source to the reverb, and assign reverb \r\n     *   parameters.\r\n     *\r\n     *   @param src p5.sound / Web Audio object with a \r\n     *   sound output.\r\n     *   @param [seconds] Duration of the reverb, in \r\n     *   seconds. Min: 0, Max: 10. Defaults to 3.\r\n     *   @param [decayRate] Percentage of decay with each \r\n     *   echo. Min: 0, Max: 100. Defaults to 2.\r\n     *   @param [reverse] Play the reverb backwards or \r\n     *   forwards.\r\n     */\r\n    process(src: object, seconds?: number, decayRate?: number, reverse?: boolean): void\r\n    \r\n    /**\r\n     *   Set the reverb settings. Similar to .process(), \r\n     *   but without assigning a new input.\r\n     *\r\n     *   @param [seconds] Duration of the reverb, in \r\n     *   seconds. Min: 0, Max: 10. Defaults to 3.\r\n     *   @param [decayRate] Percentage of decay with each \r\n     *   echo. Min: 0, Max: 100. Defaults to 2.\r\n     *   @param [reverse] Play the reverb backwards or \r\n     *   forwards.\r\n     */\r\n    set(seconds?: number, decayRate?: number, reverse?: boolean): void\r\n    \r\n    /**\r\n     *   Set the output level of the reverb effect.\r\n     *\r\n     *   @param volume amplitude between 0 and 1.0\r\n     *   @param [rampTime] create a fade that lasts \r\n     *   rampTime\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    amp(volume: number, rampTime?: number, timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Send output to a p5.sound or web audio object\r\n     *\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all output.\r\n     *\r\n     */\r\n    disconnect(): void\r\n  }\r\n  class Convolver extends p5.Effect {\r\n    /**\r\n     *   p5.Convolver extends p5.Reverb. It can emulate the \r\n     *   sound of real physical spaces through a process \r\n     *   called  convolution. Convolution multiplies any \r\n     *   audio input by an \"impulse response\" to simulate \r\n     *   the dispersion of sound over time. The impulse \r\n     *   response is generated from an audio file that you \r\n     *   provide. One way to generate an impulse response \r\n     *   is to pop a balloon in a reverberant space and \r\n     *   record the echo. Convolution can also be used to \r\n     *   experiment with sound. \r\n     * \r\n     *   Use the method createConvolution(path) to \r\n     *   instantiate a p5.Convolver with a path to your \r\n     *   impulse response audio file.\r\n     *\r\n     *   @param path path to a sound file\r\n     *   @param [callback] function to call when loading \r\n     *   succeeds\r\n     *   @param [errorCallback] function to call if loading \r\n     *   fails. This function will receive an error or \r\n     *   XMLHttpRequest object with information about what \r\n     *   went wrong.\r\n     */\r\n    constructor(path: string, callback?: Function, errorCallback?: Function)\r\n    \r\n    /**\r\n     *   Internally, the p5.Convolver uses the a  Web Audio \r\n     *   Convolver Node.\r\n     *\r\n     */\r\n    convolverNod: ConvolverNode\r\n    \r\n    /**\r\n     *   Create a p5.Convolver. Accepts a path to a \r\n     *   soundfile that will be used to generate an impulse \r\n     *   response.\r\n     *\r\n     *   @param path path to a sound file\r\n     *   @param [callback] function to call if loading is \r\n     *   successful. The object will be passed in as the \r\n     *   argument to the callback function.\r\n     *   @param [errorCallback] function to call if loading \r\n     *   is not successful. A custom error will be passed \r\n     *   in as the argument to the callback function.\r\n     */\r\n    createConvolver(path: string, callback?: Function, errorCallback?: Function): p5.Convolver\r\n    \r\n    /**\r\n     *   Connect a source to the reverb, and assign reverb \r\n     *   parameters.\r\n     *\r\n     *   @param src p5.sound / Web Audio object with a \r\n     *   sound output.\r\n     */\r\n    process(src: object): void\r\n    \r\n    /**\r\n     *   If you load multiple impulse files using the \r\n     *   .addImpulse method, they will be stored as Objects \r\n     *   in this Array. Toggle between them with the \r\n     *   toggleImpulse(id) method.\r\n     *\r\n     */\r\n    impulses: any[]\r\n    \r\n    /**\r\n     *   Load and assign a new Impulse Response to the \r\n     *   p5.Convolver. The impulse is added to the \r\n     *   .impulses array. Previous impulses can be accessed \r\n     *   with the .toggleImpulse(id) method.\r\n     *\r\n     *   @param path path to a sound file\r\n     *   @param callback function (optional)\r\n     *   @param errorCallback function (optional)\r\n     */\r\n    addImpulse(path: string, callback: Function, errorCallback: Function): void\r\n    \r\n    /**\r\n     *   Similar to .addImpulse, except that the .impulses \r\n     *   Array is reset to save memory. A new .impulses \r\n     *   array is created with this impulse as the only \r\n     *   item.\r\n     *\r\n     *   @param path path to a sound file\r\n     *   @param callback function (optional)\r\n     *   @param errorCallback function (optional)\r\n     */\r\n    resetImpulse(path: string, callback: Function, errorCallback: Function): void\r\n    \r\n    /**\r\n     *   If you have used .addImpulse() to add multiple \r\n     *   impulses to a p5.Convolver, then you can use this \r\n     *   method to toggle between the items in the \r\n     *   .impulses Array. Accepts a parameter to identify \r\n     *   which impulse you wish to use, identified either \r\n     *   by its original filename (String) or by its \r\n     *   position in the .impulses  Array (Number). You can \r\n     *   access the objects in the .impulses Array \r\n     *   directly. Each Object has two attributes: an \r\n     *   .audioBuffer (type: Web Audio  AudioBuffer) and a \r\n     *   .name, a String that corresponds with the original \r\n     *   filename.\r\n     *\r\n     *   @param id Identify the impulse by its original \r\n     *   filename (String), or by its position in the \r\n     *   .impulses Array (Number).\r\n     */\r\n    toggleImpulse(id: string|number): void\r\n    \r\n    /**\r\n     *   Set the global tempo, in beats per minute, for all \r\n     *   p5.Parts. This method will impact all active \r\n     *   p5.Parts.\r\n     *\r\n     *   @param BPM Beats Per Minute\r\n     *   @param rampTime Seconds from now\r\n     */\r\n    setBPM(BPM: number, rampTime: number): void\r\n  }\r\n  class Phrase {\r\n    /**\r\n     *   A phrase is a pattern of musical events over time, \r\n     *   i.e. a series of notes and rests. Phrases must be \r\n     *   added to a p5.Part for playback, and each part can \r\n     *   play multiple phrases at the same time. For \r\n     *   example, one Phrase might be a kick drum, another \r\n     *   could be a snare, and another could be the \r\n     *   bassline. \r\n     * \r\n     *   The first parameter is a name so that the phrase \r\n     *   can be modified or deleted later. The callback is \r\n     *   a a function that this phrase will call at every \r\n     *   step—for example it might be called \r\n     *   playNote(value){}. The array determines which \r\n     *   value is passed into the callback at each step of \r\n     *   the phrase. It can be numbers, an object with \r\n     *   multiple numbers, or a zero (0) indicates a rest \r\n     *   so the callback won't be called).\r\n     *\r\n     *   @param name Name so that you can access the \r\n     *   Phrase.\r\n     *   @param callback The name of a function that this \r\n     *   phrase will call. Typically it will play a sound, \r\n     *   and accept two parameters: a time at which to play \r\n     *   the sound (in seconds from now), and a value from \r\n     *   the sequence array. The time should be passed into \r\n     *   the play() or start() method to ensure precision.\r\n     *   @param sequence Array of values to pass into the \r\n     *   callback at each step of the phrase.\r\n     */\r\n    constructor(name: string, callback: Function, sequence: any[])\r\n    \r\n    /**\r\n     *   Array of values to pass into the callback at each \r\n     *   step of the phrase. Depending on the callback \r\n     *   function's requirements, these values may be \r\n     *   numbers, strings, or an object with multiple \r\n     *   parameters. Zero (0) indicates a rest.\r\n     *\r\n     */\r\n    sequence: any[]\r\n  }\r\n  class Part {\r\n    /**\r\n     *   A p5.Part plays back one or more p5.Phrases. \r\n     *   Instantiate a part with steps and tatums. By \r\n     *   default, each step represents 1/16th note. See \r\n     *   p5.Phrase for more about musical timing.\r\n     *\r\n     *   @param [steps] Steps in the part\r\n     *   @param [tatums] Divisions of a beat (default is \r\n     *   1/16, a quarter note)\r\n     */\r\n    constructor(steps?: number, tatums?: number)\r\n    \r\n    /**\r\n     *   Set the tempo of this part, in Beats Per Minute.\r\n     *\r\n     *   @param BPM Beats Per Minute\r\n     *   @param [rampTime] Seconds from now\r\n     */\r\n    setBPM(BPM: number, rampTime?: number): void\r\n    \r\n    /**\r\n     *   Returns the Beats Per Minute of this currently \r\n     *   part.\r\n     *\r\n     */\r\n    getBPM(): number\r\n    \r\n    /**\r\n     *   Start playback of this part. It will play through \r\n     *   all of its phrases at a speed determined by \r\n     *   setBPM.\r\n     *\r\n     *   @param [time] seconds from now\r\n     */\r\n    start(time?: number): void\r\n    \r\n    /**\r\n     *   Loop playback of this part. It will begin looping \r\n     *   through all of its phrases at a speed determined \r\n     *   by setBPM.\r\n     *\r\n     *   @param [time] seconds from now\r\n     */\r\n    loop(time?: number): void\r\n    \r\n    /**\r\n     *   Tell the part to stop looping.\r\n     *\r\n     */\r\n    noLoop(): void\r\n    \r\n    /**\r\n     *   Stop the part and cue it to step 0.\r\n     *\r\n     *   @param [time] seconds from now\r\n     */\r\n    stop(time?: number): void\r\n    \r\n    /**\r\n     *   Pause the part. Playback will resume from the \r\n     *   current step.\r\n     *\r\n     *   @param time seconds from now\r\n     */\r\n    pause(time: number): void\r\n    \r\n    /**\r\n     *   Add a p5.Phrase to this Part.\r\n     *\r\n     *   @param phrase reference to a p5.Phrase\r\n     */\r\n    addPhrase(phrase: p5.Phrase): void\r\n    \r\n    /**\r\n     *   Remove a phrase from this part, based on the name \r\n     *   it was given when it was created.\r\n     *\r\n     */\r\n    removePhrase(phraseName: string): void\r\n    \r\n    /**\r\n     *   Get a phrase from this part, based on the name it \r\n     *   was given when it was created. Now you can modify \r\n     *   its array.\r\n     *\r\n     */\r\n    getPhrase(phraseName: string): void\r\n    \r\n    /**\r\n     *   Get a phrase from this part, based on the name it \r\n     *   was given when it was created. Now you can modify \r\n     *   its array.\r\n     *\r\n     *   @param sequence Array of values to pass into the \r\n     *   callback at each step of the phrase.\r\n     */\r\n    replaceSequence(phraseName: string, sequence: any[]): void\r\n    \r\n    /**\r\n     *   Fire a callback function at every step.\r\n     *\r\n     *   @param callback The name of the callback you want \r\n     *   to fire on every beat/tatum.\r\n     */\r\n    onStep(callback: Function): void\r\n  }\r\n  class Score {\r\n    /**\r\n     *   A Score consists of a series of Parts. The parts \r\n     *   will be played back in order. For example, you \r\n     *   could have an A part, a B part, and a C part, and \r\n     *   play them back in this order new p5.Score(a, a, b, \r\n     *   a, c)\r\n     *\r\n     *   @param [parts] One or multiple parts, to be played \r\n     *   in sequence.\r\n     */\r\n    constructor(parts?: p5.Part)\r\n    \r\n    /**\r\n     *   Start playback of the score.\r\n     *\r\n     */\r\n    start(): void\r\n    \r\n    /**\r\n     *   Stop playback of the score.\r\n     *\r\n     */\r\n    stop(): void\r\n    \r\n    /**\r\n     *   Pause playback of the score.\r\n     *\r\n     */\r\n    pause(): void\r\n    \r\n    /**\r\n     *   Loop playback of the score.\r\n     *\r\n     */\r\n    loop(): void\r\n    \r\n    /**\r\n     *   Stop looping playback of the score. If it is \r\n     *   currently playing, this will go into effect after \r\n     *   the current round of playback completes.\r\n     *\r\n     */\r\n    noLoop(): void\r\n    \r\n    /**\r\n     *   Set the tempo for all parts in the score\r\n     *\r\n     *   @param BPM Beats Per Minute\r\n     *   @param rampTime Seconds from now\r\n     */\r\n    setBPM(BPM: number, rampTime: number): void\r\n  }\r\n  class SoundLoop {\r\n    /**\r\n     *   SoundLoop\r\n     *\r\n     *   @param callback this function will be called on \r\n     *   each iteration of theloop\r\n     *   @param [interval] amount of time or beats for each \r\n     *   iteration of the loop defaults to 1\r\n     */\r\n    constructor(callback: Function, interval?: number|string)\r\n    \r\n    /**\r\n     *   musicalTimeMode uses Tone.Time convention true if \r\n     *   string, false if number\r\n     *\r\n     */\r\n    musicalTimeMode: boolean\r\n    \r\n    /**\r\n     *   Set a limit to the number of loops to play. \r\n     *   defaults to Infinity\r\n     *\r\n     */\r\n    maxIterations: number\r\n    \r\n    /**\r\n     *   Start the loop\r\n     *\r\n     *   @param [timeFromNow] schedule a starting time\r\n     */\r\n    start(timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Stop the loop\r\n     *\r\n     *   @param [timeFromNow] schedule a stopping time\r\n     */\r\n    stop(timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Pause the loop\r\n     *\r\n     *   @param [timeFromNow] schedule a pausing time\r\n     */\r\n    pause(timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Synchronize loops. Use this method to start two \r\n     *   more more loops in synchronization or to start a \r\n     *   loop in synchronization with a loop that is \r\n     *   already playing This method will schedule the \r\n     *   implicit loop in sync with the explicit master \r\n     *   loop i.e. loopToStart.syncedStart(loopToSyncWith)\r\n     *\r\n     *   @param otherLoop a p5.SoundLoop to sync with\r\n     *   @param [timeFromNow] Start the loops in sync after \r\n     *   timeFromNow seconds\r\n     */\r\n    syncedStart(otherLoop: object, timeFromNow?: number): void\r\n    \r\n    /**\r\n     *   Getters and Setters, setting any paramter will \r\n     *   result in a change in the clock's frequency, that \r\n     *   will be reflected after the next callback beats \r\n     *   per minute (defaults to 60)\r\n     *\r\n     */\r\n    bpm: number\r\n    \r\n    /**\r\n     *   number of quarter notes in a measure (defaults to \r\n     *   4)\r\n     *\r\n     */\r\n    timeSignature: number\r\n    \r\n    /**\r\n     *   length of the loops interval\r\n     *\r\n     */\r\n    interval: number|string\r\n    \r\n    /**\r\n     *   how many times the callback has been called so far\r\n     *\r\n     */\r\n    iterations: number\r\n  }\r\n  class Compressor extends p5.Effect {\r\n    /**\r\n     *   Compressor is an audio effect class that performs \r\n     *   dynamics compression on an audio input source. \r\n     *   This is a very commonly used technique in music \r\n     *   and sound production. Compression creates an \r\n     *   overall louder, richer, and fuller sound by \r\n     *   lowering the volume of louds and raising that of \r\n     *   softs. Compression can be used to avoid clipping \r\n     *   (sound distortion due to peaks in volume) and is \r\n     *   especially useful when many sounds are played at \r\n     *   once. Compression can be used on indivudal sound \r\n     *   sources in addition to the master output. This \r\n     *   class extends p5.Effect. Methods amp(), chain(), \r\n     *   drywet(), connect(), and disconnect() are \r\n     *   available.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   The p5.Compressor is built with a Web Audio \r\n     *   Dynamics Compressor Node\r\n     *\r\n     */\r\n    compressor: AudioNode\r\n    \r\n    /**\r\n     *   Performs the same function as .connect, but also \r\n     *   accepts optional parameters to set compressor's \r\n     *   audioParams\r\n     *\r\n     *   @param src Sound source to be connected\r\n     *   @param [attack] The amount of time (in seconds) to \r\n     *   reduce the gain by 10dB, default = .003, range 0 - \r\n     *   1\r\n     *   @param [knee] A decibel value representing the \r\n     *   range above the threshold where the curve smoothly \r\n     *   transitions to the \"ratio\" portion. default = 30, \r\n     *   range 0 - 40\r\n     *   @param [ratio] The amount of dB change in input \r\n     *   for a 1 dB change in output default = 12, range 1 \r\n     *   - 20\r\n     *   @param [threshold] The decibel value above which \r\n     *   the compression will start taking effect default = \r\n     *   -24, range -100 - 0\r\n     *   @param [release] The amount of time (in seconds) \r\n     *   to increase the gain by 10dB default = .25, range \r\n     *   0 - 1\r\n     */\r\n    process(src: object, attack?: number, knee?: number, ratio?: number, threshold?: number, release?: number): void\r\n    \r\n    /**\r\n     *   Set the paramters of a compressor.\r\n     *\r\n     *   @param attack The amount of time (in seconds) to \r\n     *   reduce the gain by 10dB, default = .003, range 0 - \r\n     *   1\r\n     *   @param knee A decibel value representing the range \r\n     *   above the threshold where the curve smoothly \r\n     *   transitions to the \"ratio\" portion. default = 30, \r\n     *   range 0 - 40\r\n     *   @param ratio The amount of dB change in input for \r\n     *   a 1 dB change in output default = 12, range 1 - 20\r\n     *   @param threshold The decibel value above which the \r\n     *   compression will start taking effect default = \r\n     *   -24, range -100 - 0\r\n     *   @param release The amount of time (in seconds) to \r\n     *   increase the gain by 10dB default = .25, range 0 - \r\n     *   1\r\n     */\r\n    set(attack: number, knee: number, ratio: number, threshold: number, release: number): void\r\n    \r\n    /**\r\n     *   Get current attack or set value w/ time ramp\r\n     *\r\n     *   @param [attack] Attack is the amount of time (in \r\n     *   seconds) to reduce the gain by 10dB, default = \r\n     *   .003, range 0 - 1\r\n     *   @param [time] Assign time value to schedule the \r\n     *   change in value\r\n     */\r\n    attack(attack?: number, time?: number): void\r\n    \r\n    /**\r\n     *   Get current knee or set value w/ time ramp\r\n     *\r\n     *   @param [knee] A decibel value representing the \r\n     *   range above the threshold where the curve smoothly \r\n     *   transitions to the \"ratio\" portion. default = 30, \r\n     *   range 0 - 40\r\n     *   @param [time] Assign time value to schedule the \r\n     *   change in value\r\n     */\r\n    knee(knee?: number, time?: number): void\r\n    \r\n    /**\r\n     *   Get current ratio or set value w/ time ramp\r\n     *\r\n     *   @param [ratio] The amount of dB change in input \r\n     *   for a 1 dB change in output default = 12, range 1 \r\n     *   - 20\r\n     *   @param [time] Assign time value to schedule the \r\n     *   change in value\r\n     */\r\n    ratio(ratio?: number, time?: number): void\r\n    \r\n    /**\r\n     *   Get current threshold or set value w/ time ramp\r\n     *\r\n     *   @param threshold The decibel value above which the \r\n     *   compression will start taking effect default = \r\n     *   -24, range -100 - 0\r\n     *   @param [time] Assign time value to schedule the \r\n     *   change in value\r\n     */\r\n    threshold(threshold: number, time?: number): void\r\n    \r\n    /**\r\n     *   Get current release or set value w/ time ramp\r\n     *\r\n     *   @param release The amount of time (in seconds) to \r\n     *   increase the gain by 10dB default = .25, range 0 - \r\n     *   1\r\n     *   @param [time] Assign time value to schedule the \r\n     *   change in value\r\n     */\r\n    release(release: number, time?: number): void\r\n    \r\n    /**\r\n     *   Return the current reduction value\r\n     *\r\n     *   @return Value of the amount of gain reduction that \r\n     *   is applied to the signal\r\n     */\r\n    reduction(): number\r\n  }\r\n  class SoundRecorder {\r\n    /**\r\n     *   Record sounds for playback and/or to save as a \r\n     *   .wav file. The p5.SoundRecorder records all sound \r\n     *   output from your sketch, or can be assigned a \r\n     *   specific source with setInput(). The record() \r\n     *   method accepts a p5.SoundFile as a parameter. When \r\n     *   playback is stopped (either after the given amount \r\n     *   of time, or with the stop() method), the \r\n     *   p5.SoundRecorder will send its recording to that \r\n     *   p5.SoundFile for playback.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Connect a specific device to the p5.SoundRecorder. \r\n     *   If no parameter is given, p5.SoundRecorer will \r\n     *   record all audible p5.sound from your sketch.\r\n     *\r\n     *   @param [unit] p5.sound object or a web audio unit \r\n     *   that outputs sound\r\n     */\r\n    setInput(unit?: object): void\r\n    \r\n    /**\r\n     *   Start recording. To access the recording, provide \r\n     *   a p5.SoundFile as the first parameter. The \r\n     *   p5.SoundRecorder will send its recording to that \r\n     *   p5.SoundFile for playback once recording is \r\n     *   complete. Optional parameters include duration (in \r\n     *   seconds) of the recording, and a callback function \r\n     *   that will be called once the complete recording \r\n     *   has been transfered to the p5.SoundFile.\r\n     *\r\n     *   @param soundFile p5.SoundFile\r\n     *   @param [duration] Time (in seconds)\r\n     *   @param [callback] The name of a function that will \r\n     *   be called once the recording completes\r\n     */\r\n    record(soundFile: p5.SoundFile, duration?: number, callback?: Function): void\r\n    \r\n    /**\r\n     *   Stop the recording. Once the recording is stopped, \r\n     *   the results will be sent to the p5.SoundFile that \r\n     *   was given on .record(), and if a callback function \r\n     *   was provided on record, that function will be \r\n     *   called.\r\n     *\r\n     */\r\n    stop(): void\r\n    \r\n    /**\r\n     *   Save a p5.SoundFile as a .wav audio file.\r\n     *\r\n     *   @param soundFile p5.SoundFile that you wish to \r\n     *   save\r\n     *   @param name name of the resulting .wav file.\r\n     */\r\n    saveSound(soundFile: p5.SoundFile, name: string): void\r\n  }\r\n  class PeakDetect {\r\n    /**\r\n     *   PeakDetect works in conjunction with p5.FFT to \r\n     *   look for onsets in some or all of the frequency \r\n     *   spectrum.   To use p5.PeakDetect, call update in \r\n     *   the draw loop and pass in a p5.FFT object.  \r\n     * \r\n     *  \r\n     *   You can listen for a specific part of the \r\n     *   frequency spectrum by setting the range between \r\n     *   freq1 and freq2.  \r\n     * \r\n     *   threshold is the threshold for detecting a peak, \r\n     *   scaled between 0 and 1. It is logarithmic, so 0.1 \r\n     *   is half as loud as 1.0. \r\n     * \r\n     *  \r\n     *   The update method is meant to be run in the draw \r\n     *   loop, and frames determines how many loops must \r\n     *   pass before another peak can be detected. For \r\n     *   example, if the frameRate() = 60, you could detect \r\n     *   the beat of a 120 beat-per-minute song with this \r\n     *   equation:  framesPerPeak = 60 / (estimatedBPM / 60 \r\n     *   );  \r\n     * \r\n     *  \r\n     *   Based on example contribtued by @b2renger, and a \r\n     *   simple beat detection explanation by a \r\n     *   href=\"http://www.airtightinteractive.com/2013/10/making-audio-reactive-visuals/\" \r\n     *   target=\"_blank\"Felix Turner.\r\n     *\r\n     *   @param [freq1] lowFrequency - defaults to 20Hz\r\n     *   @param [freq2] highFrequency - defaults to 20000 \r\n     *   Hz\r\n     *   @param [threshold] Threshold for detecting a beat \r\n     *   between 0 and 1 scaled logarithmically where 0.1 \r\n     *   is 1/2 the loudness of 1.0. Defaults to 0.35.\r\n     *   @param [framesPerPeak] Defaults to 20.\r\n     */\r\n    constructor(freq1?: number, freq2?: number, threshold?: number, framesPerPeak?: number)\r\n    // TODO: Annotate attribute \"isDetected\", defined in lib/addons/p5.sound.js, line 11388\r\n    \r\n    /**\r\n     *   The update method is run in the draw loop. Accepts \r\n     *   an FFT object. You must call .analyze() on the FFT \r\n     *   object prior to updating the peakDetect because it \r\n     *   relies on a completed FFT analysis.\r\n     *\r\n     *   @param fftObject A p5.FFT object\r\n     */\r\n    update(fftObject: p5.FFT): void\r\n    \r\n    /**\r\n     *   onPeak accepts two arguments: a function to call \r\n     *   when a peak is detected. The value of the peak, \r\n     *   between 0.0 and 1.0, is passed to the callback.\r\n     *\r\n     *   @param callback Name of a function that will be \r\n     *   called when a peak is detected.\r\n     *   @param [val] Optional value to pass into the \r\n     *   function when a peak is detected.\r\n     */\r\n    onPeak(callback: Function, val?: object): void\r\n  }\r\n  class Gain {\r\n    /**\r\n     *   A gain node is usefull to set the relative volume \r\n     *   of sound. It's typically used to build mixers.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Connect a source to the gain node.\r\n     *\r\n     *   @param src p5.sound / Web Audio object with a \r\n     *   sound output.\r\n     */\r\n    setInput(src: object): void\r\n    \r\n    /**\r\n     *   Send output to a p5.sound or web audio object\r\n     *\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all output.\r\n     *\r\n     */\r\n    disconnect(): void\r\n    \r\n    /**\r\n     *   Set the output level of the gain node.\r\n     *\r\n     *   @param volume amplitude between 0 and 1.0\r\n     *   @param [rampTime] create a fade that lasts \r\n     *   rampTime\r\n     *   @param [timeFromNow] schedule this event to happen \r\n     *   seconds from now\r\n     */\r\n    amp(volume: number, rampTime?: number, timeFromNow?: number): void\r\n  }\r\n  class AudioVoice {\r\n    /**\r\n     *   Base class for monophonic synthesizers. Any \r\n     *   extensions of this class should follow the API and \r\n     *   implement the methods below in order to remain \r\n     *   compatible with p5.PolySynth();\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Connect to p5 objects or Web Audio Nodes\r\n     *\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect from soundOut\r\n     *\r\n     */\r\n    disconnect(): void\r\n  }\r\n  class MonoSynth {\r\n    /**\r\n     *   An MonoSynth is used as a single voice for sound \r\n     *   synthesis. This is a class to be used in \r\n     *   conjonction with the PolySynth class. Custom \r\n     *   synthetisers should be built inheriting from this \r\n     *   class.\r\n     *\r\n     */\r\n    constructor()\r\n    \r\n    /**\r\n     *   Play tells the MonoSynth to start playing a note. \r\n     *   This method schedules the calling of \r\n     *   .triggerAttack and .triggerRelease.\r\n     *\r\n     *   @param note the note you want to play, specified \r\n     *   as a frequency in Hertz (Number) or as a midi \r\n     *   value in Note/Octave format (\"C4\", \"Eb3\"...etc\") \r\n     *   See  Tone. Defaults to 440 hz.\r\n     *   @param [velocity] velocity of the note to play \r\n     *   (ranging from 0 to 1)\r\n     *   @param [secondsFromNow] time from now (in seconds) \r\n     *   at which to play\r\n     *   @param [sustainTime] time to sustain before \r\n     *   releasing the envelope\r\n     */\r\n    play(note: string|number, velocity?: number, secondsFromNow?: number, sustainTime?: number): void\r\n    \r\n    /**\r\n     *   Trigger the Attack, and Decay portion of the \r\n     *   Envelope. Similar to holding down a key on a \r\n     *   piano, but it will hold the sustain level until \r\n     *   you let go.\r\n     *\r\n     *   @param note the note you want to play, specified \r\n     *   as a frequency in Hertz (Number) or as a midi \r\n     *   value in Note/Octave format (\"C4\", \"Eb3\"...etc\") \r\n     *   See  Tone. Defaults to 440 hz\r\n     *   @param [velocity] velocity of the note to play \r\n     *   (ranging from 0 to 1)\r\n     *   @param [secondsFromNow] time from now (in seconds) \r\n     *   at which to play\r\n     */\r\n    triggerAttack(note: string|number, velocity?: number, secondsFromNow?: number): void\r\n    \r\n    /**\r\n     *   Trigger the release of the Envelope. This is \r\n     *   similar to releasing the key on a piano and \r\n     *   letting the sound fade according to the release \r\n     *   level and release time.\r\n     *\r\n     *   @param secondsFromNow time to trigger the release\r\n     */\r\n    triggerRelease(secondsFromNow: number): void\r\n    \r\n    /**\r\n     *   Set values like a traditional  ADSR envelope .\r\n     *\r\n     *   @param attackTime Time (in seconds before envelope \r\n     *   reaches Attack Level\r\n     *   @param [decayTime] Time (in seconds) before \r\n     *   envelope reaches Decay/Sustain Level\r\n     *   @param [susRatio] Ratio between attackLevel and \r\n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \r\n     *   attackLevel, 0.0 = releaseLevel. The susRatio \r\n     *   determines the decayLevel and the level at which \r\n     *   the sustain portion of the envelope will sustain. \r\n     *   For example, if attackLevel is 0.4, releaseLevel \r\n     *   is 0, and susAmt is 0.5, the decayLevel would be \r\n     *   0.2. If attackLevel is increased to 1.0 (using \r\n     *   setRange), then decayLevel would increase \r\n     *   proportionally, to become 0.5.\r\n     *   @param [releaseTime] Time in seconds from now \r\n     *   (defaults to 0)\r\n     */\r\n    setADSR(attackTime: number, decayTime?: number, susRatio?: number, releaseTime?: number): void\r\n    \r\n    /**\r\n     *   Getters and Setters\r\n     *\r\n     */\r\n    attack: number\r\n    decay: number\r\n    sustain: number\r\n    release: number\r\n    \r\n    /**\r\n     *   MonoSynth amp\r\n     *\r\n     *   @param vol desired volume\r\n     *   @param [rampTime] Time to reach new volume\r\n     *   @return new volume value\r\n     */\r\n    amp(vol: number, rampTime?: number): number\r\n    \r\n    /**\r\n     *   Connect to a p5.sound / Web Audio object.\r\n     *\r\n     *   @param unit A p5.sound or Web Audio object\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all outputs\r\n     *\r\n     */\r\n    disconnect(): void\r\n    \r\n    /**\r\n     *   Get rid of the MonoSynth and free up its resources \r\n     *   / memory.\r\n     *\r\n     */\r\n    dispose(): void\r\n  }\r\n  class PolySynth {\r\n    /**\r\n     *   An AudioVoice is used as a single voice for sound \r\n     *   synthesis. The PolySynth class holds an array of \r\n     *   AudioVoice, and deals with voices allocations, \r\n     *   with setting notes to be played, and parameters to \r\n     *   be set.\r\n     *\r\n     *   @param [synthVoice] A monophonic synth voice \r\n     *   inheriting the AudioVoice class. Defaults to \r\n     *   p5.MonoSynth\r\n     *   @param [polyValue] Number of voices, defaults to \r\n     *   8;\r\n     */\r\n    constructor(synthVoice?: number, polyValue?: number)\r\n    \r\n    /**\r\n     *   An object that holds information about which notes \r\n     *   have been played and which notes are currently \r\n     *   being played. New notes are added as keys on the \r\n     *   fly. While a note has been attacked, but not \r\n     *   released, the value of the key is the audiovoice \r\n     *   which is generating that note. When notes are \r\n     *   released, the value of the key becomes undefined.\r\n     *\r\n     */\r\n    notes: any\r\n    \r\n    /**\r\n     *   A PolySynth must have at least 1 voice, defaults \r\n     *   to 8\r\n     *\r\n     */\r\n    polyvalue: any\r\n    \r\n    /**\r\n     *   Monosynth that generates the sound for each note \r\n     *   that is triggered. The p5.PolySynth defaults to \r\n     *   using the p5.MonoSynth as its voice.\r\n     *\r\n     */\r\n    AudioVoice: any\r\n    \r\n    /**\r\n     *   Play a note by triggering noteAttack and \r\n     *   noteRelease with sustain time\r\n     *\r\n     *   @param [note] midi note to play (ranging from 0 to \r\n     *   127 - 60 being a middle C)\r\n     *   @param [velocity] velocity of the note to play \r\n     *   (ranging from 0 to 1)\r\n     *   @param [secondsFromNow] time from now (in seconds) \r\n     *   at which to play\r\n     *   @param [sustainTime] time to sustain before \r\n     *   releasing the envelope\r\n     */\r\n    play(note?: number, velocity?: number, secondsFromNow?: number, sustainTime?: number): void\r\n    \r\n    /**\r\n     *   noteADSR sets the envelope for a specific note \r\n     *   that has just been triggered. Using this method \r\n     *   modifies the envelope of whichever audiovoice is \r\n     *   being used to play the desired note. The envelope \r\n     *   should be reset before noteRelease is called in \r\n     *   order to prevent the modified envelope from being \r\n     *   used on other notes.\r\n     *\r\n     *   @param [note] Midi note on which ADSR should be \r\n     *   set.\r\n     *   @param [attackTime] Time (in seconds before \r\n     *   envelope reaches Attack Level\r\n     *   @param [decayTime] Time (in seconds) before \r\n     *   envelope reaches Decay/Sustain Level\r\n     *   @param [susRatio] Ratio between attackLevel and \r\n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \r\n     *   attackLevel, 0.0 = releaseLevel. The susRatio \r\n     *   determines the decayLevel and the level at which \r\n     *   the sustain portion of the envelope will sustain. \r\n     *   For example, if attackLevel is 0.4, releaseLevel \r\n     *   is 0, and susAmt is 0.5, the decayLevel would be \r\n     *   0.2. If attackLevel is increased to 1.0 (using \r\n     *   setRange), then decayLevel would increase \r\n     *   proportionally, to become 0.5.\r\n     *   @param [releaseTime] Time in seconds from now \r\n     *   (defaults to 0)\r\n     */\r\n    noteADSR(note?: number, attackTime?: number, decayTime?: number, susRatio?: number, releaseTime?: number): void\r\n    \r\n    /**\r\n     *   Set the PolySynths global envelope. This method \r\n     *   modifies the envelopes of each monosynth so that \r\n     *   all notes are played with this envelope.\r\n     *\r\n     *   @param [note] Midi note on which ADSR should be \r\n     *   set.\r\n     *   @param [attackTime] Time (in seconds before \r\n     *   envelope reaches Attack Level\r\n     *   @param [decayTime] Time (in seconds) before \r\n     *   envelope reaches Decay/Sustain Level\r\n     *   @param [susRatio] Ratio between attackLevel and \r\n     *   releaseLevel, on a scale from 0 to 1, where 1.0 = \r\n     *   attackLevel, 0.0 = releaseLevel. The susRatio \r\n     *   determines the decayLevel and the level at which \r\n     *   the sustain portion of the envelope will sustain. \r\n     *   For example, if attackLevel is 0.4, releaseLevel \r\n     *   is 0, and susAmt is 0.5, the decayLevel would be \r\n     *   0.2. If attackLevel is increased to 1.0 (using \r\n     *   setRange), then decayLevel would increase \r\n     *   proportionally, to become 0.5.\r\n     *   @param [releaseTime] Time in seconds from now \r\n     *   (defaults to 0)\r\n     */\r\n    setADSR(note?: number, attackTime?: number, decayTime?: number, susRatio?: number, releaseTime?: number): void\r\n    \r\n    /**\r\n     *   Trigger the Attack, and Decay portion of a \r\n     *   MonoSynth. Similar to holding down a key on a \r\n     *   piano, but it will hold the sustain level until \r\n     *   you let go.\r\n     *\r\n     *   @param [note] midi note on which attack should be \r\n     *   triggered.\r\n     *   @param [velocity] velocity of the note to play \r\n     *   (ranging from 0 to 1)/\r\n     *   @param [secondsFromNow] time from now (in seconds)\r\n     */\r\n    noteAttack(note?: number, velocity?: number, secondsFromNow?: number): void\r\n    \r\n    /**\r\n     *   Trigger the Release of an AudioVoice note. This is \r\n     *   similar to releasing the key on a piano and \r\n     *   letting the sound fade according to the release \r\n     *   level and release time.\r\n     *\r\n     *   @param [note] midi note on which attack should be \r\n     *   triggered.\r\n     *   @param [secondsFromNow] time to trigger the \r\n     *   release\r\n     */\r\n    noteRelease(note?: number, secondsFromNow?: number): void\r\n    \r\n    /**\r\n     *   Connect to a p5.sound / Web Audio object.\r\n     *\r\n     *   @param unit A p5.sound or Web Audio object\r\n     */\r\n    connect(unit: object): void\r\n    \r\n    /**\r\n     *   Disconnect all outputs\r\n     *\r\n     */\r\n    disconnect(): void\r\n    \r\n    /**\r\n     *   Get rid of the MonoSynth and free up its resources \r\n     *   / memory.\r\n     *\r\n     */\r\n    dispose(): void\r\n  }\r\n  class Distortion extends p5.Effect {\r\n    /**\r\n     *   A Distortion effect created with a Waveshaper \r\n     *   Node, with an approach adapted from Kevin Ennis \r\n     *   This class extends p5.Effect. Methods amp(), \r\n     *   chain(), drywet(), connect(), and disconnect() are \r\n     *   available.\r\n     *\r\n     *   @param [amount] Unbounded distortion amount. \r\n     *   Normal values range from 0-1.\r\n     *   @param [oversample] 'none', '2x', or '4x'.\r\n     */\r\n    constructor(amount?: number, oversample?: string)\r\n    \r\n    /**\r\n     *   The p5.Distortion is built with a  Web Audio \r\n     *   WaveShaper Node.\r\n     *\r\n     */\r\n    WaveShaperNode: AudioNode\r\n    \r\n    /**\r\n     *   Process a sound source, optionally specify amount \r\n     *   and oversample values.\r\n     *\r\n     *   @param [amount] Unbounded distortion amount. \r\n     *   Normal values range from 0-1.\r\n     *   @param [oversample] 'none', '2x', or '4x'.\r\n     */\r\n    process(amount?: number, oversample?: string): void\r\n    \r\n    /**\r\n     *   Set the amount and oversample of the waveshaper \r\n     *   distortion.\r\n     *\r\n     *   @param [amount] Unbounded distortion amount. \r\n     *   Normal values range from 0-1.\r\n     *   @param [oversample] 'none', '2x', or '4x'.\r\n     */\r\n    set(amount?: number, oversample?: string): void\r\n    \r\n    /**\r\n     *   Return the distortion amount, typically between \r\n     *   0-1.\r\n     *\r\n     *   @return Unbounded distortion amount. Normal values \r\n     *   range from 0-1.\r\n     */\r\n    getAmount(): number\r\n    \r\n    /**\r\n     *   Return the oversampling.\r\n     *\r\n     *   @return Oversample can either be 'none', '2x', or \r\n     *   '4x'.\r\n     */\r\n    getOversample(): string\r\n  }\r\n}\r\n","// This file was auto-generated. Please do not edit it.\n\n///<reference path=\"p5.d.ts\" />\n\n\n// Properties from p5\n\n/**\n *   This is the p5 instance constructor. A p5 instance \n *   holds all the properties and methods related to a \n *   p5 sketch. It expects an incoming sketch closure \n *   and it can also take an optional node parameter \n *   for attaching the generated p5 canvas to a node. \n *   The sketch closure takes the newly created p5 \n *   instance as its sole argument and may optionally \n *   set preload(), setup(), and/or draw() properties \n *   on it for running a sketch. \n * \n *   A p5 sketch can run in \"global\" or \"instance\" \n *   mode: \"global\" - all properties and methods are \n *   attached to the window \"instance\" - all properties \n *   and methods are bound to this p5 object\n *\n *   @param sketch a closure that can set optional \n *   preload(), setup(), and/or draw() properties on \n *   the given p5 instance\n *   @param [node] element to attach canvas to, if a \n *   boolean is passed in use it as sync\n *   @param [sync] start synchronously (optional)\n *   @return a p5 instance\n */\ndeclare function constructor(sketch: Function, node?: HTMLElement|boolean, sync?: boolean);\n\n// src/color/creating_reading.js\n\n/**\n *   Extracts the alpha value from a color or pixel \n *   array.\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the alpha value\n */\ndeclare function alpha(color: p5.Color|number[]|string): number;\n\n/**\n *   Extracts the blue value from a color or pixel \n *   array.\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the blue value\n */\ndeclare function blue(color: p5.Color|number[]|string): number;\n\n/**\n *   Extracts the HSB brightness value from a color or \n *   pixel array.\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the brightness value\n */\ndeclare function brightness(color: p5.Color|number[]|string): number;\n\n/**\n *   Creates colors for storing in variables of the \n *   color datatype. The parameters are interpreted as \n *   RGB or HSB values depending on the current \n *   colorMode(). The default mode is RGB values from 0 \n *   to 255 and, therefore, the function call \n *   color(255, 204, 0) will return a bright yellow \n *   color.  Note that if only one value is provided to \n *   color(), it will be interpreted as a grayscale \n *   value. Add a second value, and it will be used for \n *   alpha transparency. When three values are \n *   specified, they are interpreted as either RGB or \n *   HSB values. Adding a fourth value applies alpha \n *   transparency. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used.\n *\n *   @param gray number specifying value between white \n *   and black.\n *   @param [alpha] alpha value relative to current \n *   color range (default is 0-255)\n *   @return resulting color\n */\ndeclare function color(gray: number, alpha?: number): p5.Color;\n\n/**\n *   Creates colors for storing in variables of the \n *   color datatype. The parameters are interpreted as \n *   RGB or HSB values depending on the current \n *   colorMode(). The default mode is RGB values from 0 \n *   to 255 and, therefore, the function call \n *   color(255, 204, 0) will return a bright yellow \n *   color.  Note that if only one value is provided to \n *   color(), it will be interpreted as a grayscale \n *   value. Add a second value, and it will be used for \n *   alpha transparency. When three values are \n *   specified, they are interpreted as either RGB or \n *   HSB values. Adding a fourth value applies alpha \n *   transparency. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used.\n *\n *   @param v1 red or hue value relative to the current \n *   color range\n *   @param v2 green or saturation value relative to \n *   the current color range\n *   @param v3 blue or brightness value relative to the \n *   current color range\n *   @param [alpha] alpha value relative to current \n *   color range (default is 0-255)\n */\ndeclare function color(v1: number, v2: number, v3: number, alpha?: number): p5.Color;\n\n/**\n *   Creates colors for storing in variables of the \n *   color datatype. The parameters are interpreted as \n *   RGB or HSB values depending on the current \n *   colorMode(). The default mode is RGB values from 0 \n *   to 255 and, therefore, the function call \n *   color(255, 204, 0) will return a bright yellow \n *   color.  Note that if only one value is provided to \n *   color(), it will be interpreted as a grayscale \n *   value. Add a second value, and it will be used for \n *   alpha transparency. When three values are \n *   specified, they are interpreted as either RGB or \n *   HSB values. Adding a fourth value applies alpha \n *   transparency. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used.\n *\n *   @param value a color string\n */\ndeclare function color(value: string): p5.Color;\n\n/**\n *   Creates colors for storing in variables of the \n *   color datatype. The parameters are interpreted as \n *   RGB or HSB values depending on the current \n *   colorMode(). The default mode is RGB values from 0 \n *   to 255 and, therefore, the function call \n *   color(255, 204, 0) will return a bright yellow \n *   color.  Note that if only one value is provided to \n *   color(), it will be interpreted as a grayscale \n *   value. Add a second value, and it will be used for \n *   alpha transparency. When three values are \n *   specified, they are interpreted as either RGB or \n *   HSB values. Adding a fourth value applies alpha \n *   transparency. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used.\n *\n *   @param values an array containing the \n *   red,green,blue & and alpha components of the color\n */\ndeclare function color(values: number[]): p5.Color;\n\n/**\n *   Creates colors for storing in variables of the \n *   color datatype. The parameters are interpreted as \n *   RGB or HSB values depending on the current \n *   colorMode(). The default mode is RGB values from 0 \n *   to 255 and, therefore, the function call \n *   color(255, 204, 0) will return a bright yellow \n *   color.  Note that if only one value is provided to \n *   color(), it will be interpreted as a grayscale \n *   value. Add a second value, and it will be used for \n *   alpha transparency. When three values are \n *   specified, they are interpreted as either RGB or \n *   HSB values. Adding a fourth value applies alpha \n *   transparency. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used.\n *\n */\ndeclare function color(color: p5.Color): p5.Color;\n\n/**\n *   Extracts the green value from a color or pixel \n *   array.\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the green value\n */\ndeclare function green(color: p5.Color|number[]|string): number;\n\n/**\n *   Extracts the hue value from a color or pixel \n *   array. Hue exists in both HSB and HSL. This \n *   function will return the HSB-normalized hue when \n *   supplied with an HSB color object (or when \n *   supplied with a pixel array while the color mode \n *   is HSB), but will default to the HSL-normalized \n *   hue otherwise. (The values will only be different \n *   if the maximum hue setting for each system is \n *   different.)\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the hue\n */\ndeclare function hue(color: p5.Color|number[]|string): number;\n\n/**\n *   Blends two colors to find a third color somewhere \n *   between them. The amt parameter is the amount to \n *   interpolate between the two values where 0.0 equal \n *   to the first color, 0.1 is very near the first \n *   color, 0.5 is halfway in between, etc. An amount \n *   below 0 will be treated as 0. Likewise, amounts \n *   above 1 will be capped at 1. This is different \n *   from the behavior of lerp(), but necessary because \n *   otherwise numbers outside the range will produce \n *   strange and unexpected colors.  The way that \n *   colours are interpolated depends on the current \n *   color mode.\n *\n *   @param c1 interpolate from this color\n *   @param c2 interpolate to this color\n *   @param amt number between 0 and 1\n *   @return interpolated color\n */\ndeclare function lerpColor(c1: p5.Color, c2: p5.Color, amt: number): p5.Color;\n\n/**\n *   Extracts the HSL lightness value from a color or \n *   pixel array.\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the lightness\n */\ndeclare function lightness(color: p5.Color|number[]|string): number;\n\n/**\n *   Extracts the red value from a color or pixel \n *   array.\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the red value\n */\ndeclare function red(color: p5.Color|number[]|string): number;\n\n/**\n *   Extracts the saturation value from a color or \n *   pixel array. Saturation is scaled differently in \n *   HSB and HSL. This function will return the HSB \n *   saturation when supplied with an HSB color object \n *   (or when supplied with a pixel array while the \n *   color mode is HSB), but will default to the HSL \n *   saturation otherwise.\n *\n *   @param color p5.Color object, color components, or \n *   CSS color\n *   @return the saturation value\n */\ndeclare function saturation(color: p5.Color|number[]|string): number;\n\n// src/color/setting.js\n\n/**\n *   The background() function sets the color used for \n *   the background of the p5.js canvas. The default \n *   background is light gray. This function is \n *   typically used within draw() to clear the display \n *   window at the beginning of each frame, but it can \n *   be used inside setup() to set the background on \n *   the first frame of animation or if the background \n *   need only be set once.  The color is either \n *   specified in terms of the RGB, HSB, or HSL color \n *   depending on the current colorMode. (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used. \n * \n *  \n *   A p5.Color object can also be provided to set the \n *   background color. \n * \n *  \n *   A p5.Image can also be provided to set the \n *   background image.\n *\n *   @param color any value created by the color() \n *   function\n *   @chainable\n */\ndeclare function background(color: p5.Color): p5;\n\n/**\n *   The background() function sets the color used for \n *   the background of the p5.js canvas. The default \n *   background is light gray. This function is \n *   typically used within draw() to clear the display \n *   window at the beginning of each frame, but it can \n *   be used inside setup() to set the background on \n *   the first frame of animation or if the background \n *   need only be set once.  The color is either \n *   specified in terms of the RGB, HSB, or HSL color \n *   depending on the current colorMode. (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used. \n * \n *  \n *   A p5.Color object can also be provided to set the \n *   background color. \n * \n *  \n *   A p5.Image can also be provided to set the \n *   background image.\n *\n *   @param colorstring color string, possible formats \n *   include: integer rgb() or rgba(), percentage rgb() \n *   or rgba(), 3-digit hex, 6-digit hex\n *   @param [a] opacity of the background relative to \n *   current color range (default is 0-255)\n *   @chainable\n */\ndeclare function background(colorstring: string, a?: number): p5;\n\n/**\n *   The background() function sets the color used for \n *   the background of the p5.js canvas. The default \n *   background is light gray. This function is \n *   typically used within draw() to clear the display \n *   window at the beginning of each frame, but it can \n *   be used inside setup() to set the background on \n *   the first frame of animation or if the background \n *   need only be set once.  The color is either \n *   specified in terms of the RGB, HSB, or HSL color \n *   depending on the current colorMode. (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used. \n * \n *  \n *   A p5.Color object can also be provided to set the \n *   background color. \n * \n *  \n *   A p5.Image can also be provided to set the \n *   background image.\n *\n *   @param gray specifies a value between white and \n *   black\n *   @param [a] opacity of the background relative to \n *   current color range (default is 0-255)\n *   @chainable\n */\ndeclare function background(gray: number, a?: number): p5;\n\n/**\n *   The background() function sets the color used for \n *   the background of the p5.js canvas. The default \n *   background is light gray. This function is \n *   typically used within draw() to clear the display \n *   window at the beginning of each frame, but it can \n *   be used inside setup() to set the background on \n *   the first frame of animation or if the background \n *   need only be set once.  The color is either \n *   specified in terms of the RGB, HSB, or HSL color \n *   depending on the current colorMode. (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used. \n * \n *  \n *   A p5.Color object can also be provided to set the \n *   background color. \n * \n *  \n *   A p5.Image can also be provided to set the \n *   background image.\n *\n *   @param v1 red or hue value (depending on the \n *   current color mode)\n *   @param v2 green or saturation value (depending on \n *   the current color mode)\n *   @param v3 blue or brightness value (depending on \n *   the current color mode)\n *   @param [a] opacity of the background relative to \n *   current color range (default is 0-255)\n *   @chainable\n */\ndeclare function background(v1: number, v2: number, v3: number, a?: number): p5;\n\n/**\n *   The background() function sets the color used for \n *   the background of the p5.js canvas. The default \n *   background is light gray. This function is \n *   typically used within draw() to clear the display \n *   window at the beginning of each frame, but it can \n *   be used inside setup() to set the background on \n *   the first frame of animation or if the background \n *   need only be set once.  The color is either \n *   specified in terms of the RGB, HSB, or HSL color \n *   depending on the current colorMode. (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used. \n * \n *  \n *   A p5.Color object can also be provided to set the \n *   background color. \n * \n *  \n *   A p5.Image can also be provided to set the \n *   background image.\n *\n *   @param values an array containing the \n *   red,green,blue & and alpha components of the color\n *   @chainable\n */\ndeclare function background(values: number[]): p5;\n\n/**\n *   The background() function sets the color used for \n *   the background of the p5.js canvas. The default \n *   background is light gray. This function is \n *   typically used within draw() to clear the display \n *   window at the beginning of each frame, but it can \n *   be used inside setup() to set the background on \n *   the first frame of animation or if the background \n *   need only be set once.  The color is either \n *   specified in terms of the RGB, HSB, or HSL color \n *   depending on the current colorMode. (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255. \n * \n *  \n *   If a single string argument is provided, RGB, RGBA \n *   and Hex CSS color strings and all named color \n *   strings are supported. In this case, an alpha \n *   number value as a second argument is not \n *   supported, the RGBA form should be used. \n * \n *  \n *   A p5.Color object can also be provided to set the \n *   background color. \n * \n *  \n *   A p5.Image can also be provided to set the \n *   background image.\n *\n *   @param image image created with loadImage() or \n *   createImage(), to set as background (must be same \n *   size as the sketch window)\n *   @param [a] opacity of the background relative to \n *   current color range (default is 0-255)\n *   @chainable\n */\ndeclare function background(image: p5.Image, a?: number): p5;\n\n/**\n *   Clears the pixels within a buffer. This function \n *   only works on p5.Canvas objects created with the \n *   createCanvas() function; it won't work with the \n *   main display window. Unlike the main graphics \n *   context, pixels in additional graphics areas \n *   created with createGraphics() can be entirely or \n *   partially transparent. This function clears \n *   everything to make all of the pixels 100% \n *   transparent.\n *\n *   @chainable\n */\ndeclare function clear(): p5;\n\n/**\n *   colorMode() changes the way p5.js interprets color \n *   data. By default, the parameters for fill(), \n *   stroke(), background(), and color() are defined by \n *   values between 0 and 255 using the RGB color \n *   model. This is equivalent to setting \n *   colorMode(RGB, 255). Setting colorMode(HSB) lets \n *   you use the HSB system instead. By default, this \n *   is colorMode(HSB, 360, 100, 100, 1). You can also \n *   use HSL.  Note: existing color objects remember \n *   the mode that they were created in, so you can \n *   change modes as you like without affecting their \n *   appearance.\n *\n *   @param mode either RGB, HSB or HSL, corresponding \n *   to Red/Green/Blue and Hue/Saturation/Brightness \n *   (or Lightness)\n *   @param [max] range for all values\n *   @chainable\n */\ndeclare function colorMode(mode: COLOR_MODE, max?: number): p5;\n\n/**\n *   colorMode() changes the way p5.js interprets color \n *   data. By default, the parameters for fill(), \n *   stroke(), background(), and color() are defined by \n *   values between 0 and 255 using the RGB color \n *   model. This is equivalent to setting \n *   colorMode(RGB, 255). Setting colorMode(HSB) lets \n *   you use the HSB system instead. By default, this \n *   is colorMode(HSB, 360, 100, 100, 1). You can also \n *   use HSL.  Note: existing color objects remember \n *   the mode that they were created in, so you can \n *   change modes as you like without affecting their \n *   appearance.\n *\n *   @param mode either RGB, HSB or HSL, corresponding \n *   to Red/Green/Blue and Hue/Saturation/Brightness \n *   (or Lightness)\n *   @param max1 range for the red or hue depending on \n *   the current color mode\n *   @param max2 range for the green or saturation \n *   depending on the current color mode\n *   @param max3 range for the blue or \n *   brightness/lighntess depending on the current \n *   color mode\n *   @param [maxA] range for the alpha\n *   @chainable\n */\ndeclare function colorMode(mode: any, max1: number, max2: number, max3: number, maxA?: number): p5;\n\n/**\n *   Sets the color used to fill shapes. For example, \n *   if you run fill(204, 102, 0), all subsequent \n *   shapes will be filled with orange. This color is \n *   either specified in terms of the RGB or HSB color \n *   depending on the current colorMode(). (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255.  If a single string argument is \n *   provided, RGB, RGBA and Hex CSS color strings and \n *   all named color strings are supported. In this \n *   case, an alpha number value as a second argument \n *   is not supported, the RGBA form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   fill color.\n *\n *   @param v1 red or hue value relative to the current \n *   color range\n *   @param v2 green or saturation value relative to \n *   the current color range\n *   @param v3 blue or brightness value relative to the \n *   current color range\n *   @chainable\n */\ndeclare function fill(v1: number, v2: number, v3: number, alpha?: number): p5;\n\n/**\n *   Sets the color used to fill shapes. For example, \n *   if you run fill(204, 102, 0), all subsequent \n *   shapes will be filled with orange. This color is \n *   either specified in terms of the RGB or HSB color \n *   depending on the current colorMode(). (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255.  If a single string argument is \n *   provided, RGB, RGBA and Hex CSS color strings and \n *   all named color strings are supported. In this \n *   case, an alpha number value as a second argument \n *   is not supported, the RGBA form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   fill color.\n *\n *   @param value a color string\n *   @chainable\n */\ndeclare function fill(value: string): p5;\n\n/**\n *   Sets the color used to fill shapes. For example, \n *   if you run fill(204, 102, 0), all subsequent \n *   shapes will be filled with orange. This color is \n *   either specified in terms of the RGB or HSB color \n *   depending on the current colorMode(). (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255.  If a single string argument is \n *   provided, RGB, RGBA and Hex CSS color strings and \n *   all named color strings are supported. In this \n *   case, an alpha number value as a second argument \n *   is not supported, the RGBA form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   fill color.\n *\n *   @param gray a gray value\n *   @chainable\n */\ndeclare function fill(gray: number, alpha?: number): p5;\n\n/**\n *   Sets the color used to fill shapes. For example, \n *   if you run fill(204, 102, 0), all subsequent \n *   shapes will be filled with orange. This color is \n *   either specified in terms of the RGB or HSB color \n *   depending on the current colorMode(). (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255.  If a single string argument is \n *   provided, RGB, RGBA and Hex CSS color strings and \n *   all named color strings are supported. In this \n *   case, an alpha number value as a second argument \n *   is not supported, the RGBA form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   fill color.\n *\n *   @param values an array containing the \n *   red,green,blue & and alpha components of the color\n *   @chainable\n */\ndeclare function fill(values: number[]): p5;\n\n/**\n *   Sets the color used to fill shapes. For example, \n *   if you run fill(204, 102, 0), all subsequent \n *   shapes will be filled with orange. This color is \n *   either specified in terms of the RGB or HSB color \n *   depending on the current colorMode(). (The default \n *   color space is RGB, with each value in the range \n *   from 0 to 255). The alpha range by default is also \n *   0 to 255.  If a single string argument is \n *   provided, RGB, RGBA and Hex CSS color strings and \n *   all named color strings are supported. In this \n *   case, an alpha number value as a second argument \n *   is not supported, the RGBA form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   fill color.\n *\n *   @param color the fill color\n *   @chainable\n */\ndeclare function fill(color: p5.Color): p5;\n\n/**\n *   Disables filling geometry. If both noStroke() and \n *   noFill() are called, nothing will be drawn to the \n *   screen.\n *\n *   @chainable\n */\ndeclare function noFill(): p5;\n\n/**\n *   Disables drawing the stroke (outline). If both \n *   noStroke() and noFill() are called, nothing will \n *   be drawn to the screen.\n *\n *   @chainable\n */\ndeclare function noStroke(): p5;\n\n/**\n *   Sets the color used to draw lines and borders \n *   around shapes. This color is either specified in \n *   terms of the RGB or HSB color depending on the \n *   current colorMode() (the default color space is \n *   RGB, with each value in the range from 0 to 255). \n *   The alpha range by default is also 0 to 255.  If a \n *   single string argument is provided, RGB, RGBA and \n *   Hex CSS color strings and all named color strings \n *   are supported. In this case, an alpha number value \n *   as a second argument is not supported, the RGBA \n *   form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   stroke color.\n *\n *   @param v1 red or hue value relative to the current \n *   color range\n *   @param v2 green or saturation value relative to \n *   the current color range\n *   @param v3 blue or brightness value relative to the \n *   current color range\n *   @chainable\n */\ndeclare function stroke(v1: number, v2: number, v3: number, alpha?: number): p5;\n\n/**\n *   Sets the color used to draw lines and borders \n *   around shapes. This color is either specified in \n *   terms of the RGB or HSB color depending on the \n *   current colorMode() (the default color space is \n *   RGB, with each value in the range from 0 to 255). \n *   The alpha range by default is also 0 to 255.  If a \n *   single string argument is provided, RGB, RGBA and \n *   Hex CSS color strings and all named color strings \n *   are supported. In this case, an alpha number value \n *   as a second argument is not supported, the RGBA \n *   form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   stroke color.\n *\n *   @param value a color string\n *   @chainable\n */\ndeclare function stroke(value: string): p5;\n\n/**\n *   Sets the color used to draw lines and borders \n *   around shapes. This color is either specified in \n *   terms of the RGB or HSB color depending on the \n *   current colorMode() (the default color space is \n *   RGB, with each value in the range from 0 to 255). \n *   The alpha range by default is also 0 to 255.  If a \n *   single string argument is provided, RGB, RGBA and \n *   Hex CSS color strings and all named color strings \n *   are supported. In this case, an alpha number value \n *   as a second argument is not supported, the RGBA \n *   form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   stroke color.\n *\n *   @param gray a gray value\n *   @chainable\n */\ndeclare function stroke(gray: number, alpha?: number): p5;\n\n/**\n *   Sets the color used to draw lines and borders \n *   around shapes. This color is either specified in \n *   terms of the RGB or HSB color depending on the \n *   current colorMode() (the default color space is \n *   RGB, with each value in the range from 0 to 255). \n *   The alpha range by default is also 0 to 255.  If a \n *   single string argument is provided, RGB, RGBA and \n *   Hex CSS color strings and all named color strings \n *   are supported. In this case, an alpha number value \n *   as a second argument is not supported, the RGBA \n *   form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   stroke color.\n *\n *   @param values an array containing the \n *   red,green,blue & and alpha components of the color\n *   @chainable\n */\ndeclare function stroke(values: number[]): p5;\n\n/**\n *   Sets the color used to draw lines and borders \n *   around shapes. This color is either specified in \n *   terms of the RGB or HSB color depending on the \n *   current colorMode() (the default color space is \n *   RGB, with each value in the range from 0 to 255). \n *   The alpha range by default is also 0 to 255.  If a \n *   single string argument is provided, RGB, RGBA and \n *   Hex CSS color strings and all named color strings \n *   are supported. In this case, an alpha number value \n *   as a second argument is not supported, the RGBA \n *   form should be used. \n * \n *  \n *   A p5 Color object can also be provided to set the \n *   stroke color.\n *\n *   @param color the stroke color\n *   @chainable\n */\ndeclare function stroke(color: p5.Color): p5;\n\n// src/core/2d_primitives.js\n\n/**\n *   Draw an arc to the screen. If called with only x, \n *   y, w, h, start, and stop, the arc will be drawn \n *   and filled as an open pie segment. If a mode \n *   parameter is provided, the arc will be filled like \n *   an open semi-circle (OPEN) , a closed semi-circle \n *   (CHORD), or as a closed pie segment (PIE). The \n *   origin may be changed with the ellipseMode() \n *   function. Note that drawing a full circle (ex: 0 \n *   to TWO_PI) will appear blank because 0 and TWO_PI \n *   are the same position on the unit circle. The best \n *   way to handle this is by using the ellipse() \n *   function instead to create a closed ellipse, and \n *   to use the arc() function only to draw parts of an \n *   ellipse.\n *\n *   @param x x-coordinate of the arc's ellipse\n *   @param y y-coordinate of the arc's ellipse\n *   @param w width of the arc's ellipse by default\n *   @param h height of the arc's ellipse by default\n *   @param start angle to start the arc, specified in \n *   radians\n *   @param stop angle to stop the arc, specified in \n *   radians\n *   @param [mode] optional parameter to determine the \n *   way of drawing the arc. either CHORD, PIE or OPEN\n *   @chainable\n */\ndeclare function arc(x: number, y: number, w: number, h: number, start: number, stop: number, mode?: ARC_MODE): p5;\n\n/**\n *   Draws an ellipse (oval) to the screen. An ellipse \n *   with equal width and height is a circle. By \n *   default, the first two parameters set the \n *   location, and the third and fourth parameters set \n *   the shape's width and height. If no height is \n *   specified, the value of width is used for both the \n *   width and height. If a negative height or width is \n *   specified, the absolute value is taken. The origin \n *   may be changed with the ellipseMode() function.\n *\n *   @param x x-coordinate of the ellipse.\n *   @param y y-coordinate of the ellipse.\n *   @param w width of the ellipse.\n *   @param [h] height of the ellipse.\n *   @chainable\n */\ndeclare function ellipse(x: number, y: number, w: number, h?: number): p5;\n\n/**\n *   Draws an ellipse (oval) to the screen. An ellipse \n *   with equal width and height is a circle. By \n *   default, the first two parameters set the \n *   location, and the third and fourth parameters set \n *   the shape's width and height. If no height is \n *   specified, the value of width is used for both the \n *   width and height. If a negative height or width is \n *   specified, the absolute value is taken. The origin \n *   may be changed with the ellipseMode() function.\n *\n *   @param x x-coordinate of the ellipse.\n *   @param y y-coordinate of the ellipse.\n *   @param w width of the ellipse.\n *   @param h height of the ellipse.\n *   @param detail number of radial sectors to draw\n */\ndeclare function ellipse(x: number, y: number, w: number, h: number, detail: number): void;\n\n/**\n *   Draws a line (a direct path between two points) to \n *   the screen. The version of line() with four \n *   parameters draws the line in 2D. To color a line, \n *   use the stroke() function. A line cannot be \n *   filled, therefore the fill() function will not \n *   affect the color of a line. 2D lines are drawn \n *   with a width of one pixel by default, but this can \n *   be changed with the strokeWeight() function.\n *\n *   @param x1 the x-coordinate of the first point\n *   @param y1 the y-coordinate of the first point\n *   @param x2 the x-coordinate of the second point\n *   @param y2 the y-coordinate of the second point\n *   @chainable\n */\ndeclare function line(x1: number, y1: number, x2: number, y2: number): p5;\n\n/**\n *   Draws a line (a direct path between two points) to \n *   the screen. The version of line() with four \n *   parameters draws the line in 2D. To color a line, \n *   use the stroke() function. A line cannot be \n *   filled, therefore the fill() function will not \n *   affect the color of a line. 2D lines are drawn \n *   with a width of one pixel by default, but this can \n *   be changed with the strokeWeight() function.\n *\n *   @param x1 the x-coordinate of the first point\n *   @param y1 the y-coordinate of the first point\n *   @param z1 the z-coordinate of the first point\n *   @param x2 the x-coordinate of the second point\n *   @param y2 the y-coordinate of the second point\n *   @param z2 the z-coordinate of the second point\n *   @chainable\n */\ndeclare function line(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): p5;\n\n/**\n *   Draws a point, a coordinate in space at the \n *   dimension of one pixel. The first parameter is the \n *   horizontal value for the point, the second value \n *   is the vertical value for the point. The color of \n *   the point is determined by the current stroke.\n *\n *   @param x the x-coordinate\n *   @param y the y-coordinate\n *   @param [z] the z-coordinate (for WEBGL mode)\n *   @chainable\n */\ndeclare function point(x: number, y: number, z?: number): p5;\n\n/**\n *   Draw a quad. A quad is a quadrilateral, a four \n *   sided polygon. It is similar to a rectangle, but \n *   the angles between its edges are not constrained \n *   to ninety degrees. The first pair of parameters \n *   (x1,y1) sets the first vertex and the subsequent \n *   pairs should proceed clockwise or \n *   counter-clockwise around the defined shape.\n *\n *   @param x1 the x-coordinate of the first point\n *   @param y1 the y-coordinate of the first point\n *   @param x2 the x-coordinate of the second point\n *   @param y2 the y-coordinate of the second point\n *   @param x3 the x-coordinate of the third point\n *   @param y3 the y-coordinate of the third point\n *   @param x4 the x-coordinate of the fourth point\n *   @param y4 the y-coordinate of the fourth point\n *   @chainable\n */\ndeclare function quad(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5;\n\n/**\n *   Draw a quad. A quad is a quadrilateral, a four \n *   sided polygon. It is similar to a rectangle, but \n *   the angles between its edges are not constrained \n *   to ninety degrees. The first pair of parameters \n *   (x1,y1) sets the first vertex and the subsequent \n *   pairs should proceed clockwise or \n *   counter-clockwise around the defined shape.\n *\n *   @param x1 the x-coordinate of the first point\n *   @param y1 the y-coordinate of the first point\n *   @param x2 the x-coordinate of the second point\n *   @param y2 the y-coordinate of the second point\n *   @param x3 the x-coordinate of the third point\n *   @param y3 the y-coordinate of the third point\n *   @param x4 the x-coordinate of the fourth point\n *   @param y4 the y-coordinate of the fourth point\n *   @chainable\n */\ndeclare function quad(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number): p5;\n\n/**\n *   Draws a rectangle to the screen. A rectangle is a \n *   four-sided shape with every angle at ninety \n *   degrees. By default, the first two parameters set \n *   the location of the upper-left corner, the third \n *   sets the width, and the fourth sets the height. \n *   The way these parameters are interpreted, however, \n *   may be changed with the rectMode() function.  The \n *   fifth, sixth, seventh and eighth parameters, if \n *   specified, determine corner radius for the \n *   top-right, top-left, lower-right and lower-left \n *   corners, respectively. An omitted corner radius \n *   parameter is set to the value of the previously \n *   specified radius value in the parameter list.\n *\n *   @param x x-coordinate of the rectangle.\n *   @param y y-coordinate of the rectangle.\n *   @param w width of the rectangle.\n *   @param h height of the rectangle.\n *   @param [tl] optional radius of top-left corner.\n *   @param [tr] optional radius of top-right corner.\n *   @param [br] optional radius of bottom-right \n *   corner.\n *   @param [bl] optional radius of bottom-left corner.\n *   @chainable\n */\ndeclare function rect(x: number, y: number, w: number, h: number, tl?: number, tr?: number, br?: number, bl?: number): p5;\n\n/**\n *   Draws a rectangle to the screen. A rectangle is a \n *   four-sided shape with every angle at ninety \n *   degrees. By default, the first two parameters set \n *   the location of the upper-left corner, the third \n *   sets the width, and the fourth sets the height. \n *   The way these parameters are interpreted, however, \n *   may be changed with the rectMode() function.  The \n *   fifth, sixth, seventh and eighth parameters, if \n *   specified, determine corner radius for the \n *   top-right, top-left, lower-right and lower-left \n *   corners, respectively. An omitted corner radius \n *   parameter is set to the value of the previously \n *   specified radius value in the parameter list.\n *\n *   @param x x-coordinate of the rectangle.\n *   @param y y-coordinate of the rectangle.\n *   @param w width of the rectangle.\n *   @param h height of the rectangle.\n *   @param [detailX] number of segments in the \n *   x-direction\n *   @param [detailY] number of segments in the \n *   y-direction\n *   @chainable\n */\ndeclare function rect(x: number, y: number, w: number, h: number, detailX?: number, detailY?: number): p5;\n\n/**\n *   A triangle is a plane created by connecting three \n *   points. The first two arguments specify the first \n *   point, the middle two arguments specify the second \n *   point, and the last two arguments specify the \n *   third point.\n *\n *   @param x1 x-coordinate of the first point\n *   @param y1 y-coordinate of the first point\n *   @param x2 x-coordinate of the second point\n *   @param y2 y-coordinate of the second point\n *   @param x3 x-coordinate of the third point\n *   @param y3 y-coordinate of the third point\n *   @chainable\n */\ndeclare function triangle(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number): p5;\n\n// src/core/attributes.js\n\n/**\n *   Modifies the location from which ellipses are \n *   drawn by changing the way in which parameters \n *   given to ellipse() are interpreted.  The default \n *   mode is ellipseMode(CENTER), which interprets the \n *   first two parameters of ellipse() as the shape's \n *   center point, while the third and fourth \n *   parameters are its width and height. \n * \n *  \n *   ellipseMode(RADIUS) also uses the first two \n *   parameters of ellipse() as the shape's center \n *   point, but uses the third and fourth parameters to \n *   specify half of the shapes's width and height. \n * \n *  \n *   ellipseMode(CORNER) interprets the first two \n *   parameters of ellipse() as the upper-left corner \n *   of the shape, while the third and fourth \n *   parameters are its width and height. \n * \n *  \n *   ellipseMode(CORNERS) interprets the first two \n *   parameters of ellipse() as the location of one \n *   corner of the ellipse's bounding box, and the \n *   third and fourth parameters as the location of the \n *   opposite corner. \n * \n *  \n *   The parameter must be written in ALL CAPS because \n *   Javascript is a case-sensitive language.\n *\n *   @param mode either CENTER, RADIUS, CORNER, or \n *   CORNERS\n *   @chainable\n */\ndeclare function ellipseMode(mode: ELLIPSE_MODE): p5;\n\n/**\n *   Draws all geometry with jagged (aliased) edges. \n *   Note that smooth() is active by default, so it is \n *   necessary to call noSmooth() to disable smoothing \n *   of geometry, images, and fonts.\n *\n *   @chainable\n */\ndeclare function noSmooth(): p5;\n\n/**\n *   Modifies the location from which rectangles are \n *   drawn by changing the way in which parameters \n *   given to rect() are interpreted.  The default mode \n *   is rectMode(CORNER), which interprets the first \n *   two parameters of rect() as the upper-left corner \n *   of the shape, while the third and fourth \n *   parameters are its width and height. \n * \n *  \n *   rectMode(CORNERS) interprets the first two \n *   parameters of rect() as the location of one \n *   corner, and the third and fourth parameters as the \n *   location of the opposite corner. \n * \n *  \n *   rectMode(CENTER) interprets the first two \n *   parameters of rect() as the shape's center point, \n *   while the third and fourth parameters are its \n *   width and height. \n * \n *  \n *   rectMode(RADIUS) also uses the first two \n *   parameters of rect() as the shape's center point, \n *   but uses the third and fourth parameters to \n *   specify half of the shapes's width and height. \n * \n *  \n *   The parameter must be written in ALL CAPS because \n *   Javascript is a case-sensitive language.\n *\n *   @param mode either CORNER, CORNERS, CENTER, or \n *   RADIUS\n *   @chainable\n */\ndeclare function rectMode(mode: RECT_MODE): p5;\n\n/**\n *   Draws all geometry with smooth (anti-aliased) \n *   edges. smooth() will also improve image quality of \n *   resized images. Note that smooth() is active by \n *   default; noSmooth() can be used to disable \n *   smoothing of geometry, images, and fonts.\n *\n *   @chainable\n */\ndeclare function smooth(): p5;\n\n/**\n *   Sets the style for rendering line endings. These \n *   ends are either squared, extended, or rounded, \n *   each of which specified with the corresponding \n *   parameters: SQUARE, PROJECT, and ROUND. The \n *   default cap is ROUND.\n *\n *   @param cap either SQUARE, PROJECT, or ROUND\n *   @chainable\n */\ndeclare function strokeCap(cap: STROKE_CAP): p5;\n\n/**\n *   Sets the style of the joints which connect line \n *   segments. These joints are either mitered, \n *   beveled, or rounded and specified with the \n *   corresponding parameters MITER, BEVEL, and ROUND. \n *   The default joint is MITER.\n *\n *   @param join either MITER, BEVEL, ROUND\n *   @chainable\n */\ndeclare function strokeJoin(join: STROKE_JOIN): p5;\n\n/**\n *   Sets the width of the stroke used for lines, \n *   points, and the border around shapes. All widths \n *   are set in units of pixels.\n *\n *   @param weight the weight (in pixels) of the stroke\n *   @chainable\n */\ndeclare function strokeWeight(weight: number): p5;\n\n// src/core/constants.js\n\ndeclare const P2D: 'p2d';\ndeclare const WEBGL: 'webgl';\n\n/**\n *   HALF_PI is a mathematical constant with the value \n *   1.57079632679489661923. It is half the ratio of \n *   the circumference of a circle to its diameter. It \n *   is useful in combination with the trigonometric \n *   functions sin() and cos().\n *\n */\ndeclare const HALF_PI: number;\n\n/**\n *   PI is a mathematical constant with the value \n *   3.14159265358979323846. It is the ratio of the \n *   circumference of a circle to its diameter. It is \n *   useful in combination with the trigonometric \n *   functions sin() and cos().\n *\n */\ndeclare const PI: number;\n\n/**\n *   QUARTER_PI is a mathematical constant with the \n *   value 0.7853982. It is one quarter the ratio of \n *   the circumference of a circle to its diameter. It \n *   is useful in combination with the trigonometric \n *   functions sin() and cos().\n *\n */\ndeclare const QUARTER_PI: number;\n\n/**\n *   TAU is an alias for TWO_PI, a mathematical \n *   constant with the value 6.28318530717958647693. It \n *   is twice the ratio of the circumference of a \n *   circle to its diameter. It is useful in \n *   combination with the trigonometric functions sin() \n *   and cos().\n *\n */\ndeclare const TAU: number;\n\n/**\n *   TWO_PI is a mathematical constant with the value \n *   6.28318530717958647693. It is twice the ratio of \n *   the circumference of a circle to its diameter. It \n *   is useful in combination with the trigonometric \n *   functions sin() and cos().\n *\n */\ndeclare const TWO_PI: number;\n\n/**\n *   Constant to be used with angleMode() function, to \n *   set the mode which p5.js interprates and \n *   calculates angles (either DEGREES or RADIANS).\n *\n */\ndeclare const DEGREES: 'degrees';\n\n/**\n *   Constant to be used with angleMode() function, to \n *   set the mode which p5.js interprates and \n *   calculates angles (either RADIANS or DEGREES).\n *\n */\ndeclare const RADIANS: 'radians';\ndeclare const CORNER: 'corner';\ndeclare const CORNERS: 'corners';\ndeclare const RADIUS: 'radius';\ndeclare const RIGHT: 'right';\ndeclare const LEFT: 'left';\ndeclare const CENTER: 'center';\ndeclare const TOP: 'top';\ndeclare const BOTTOM: 'bottom';\ndeclare const BASELINE: 'alphabetic';\ndeclare const POINTS: 0x0000;\ndeclare const LINES: 0x0001;\ndeclare const LINE_STRIP: 0x0003;\ndeclare const LINE_LOOP: 0x0002;\ndeclare const TRIANGLES: 0x0004;\ndeclare const TRIANGLE_FAN: 0x0006;\ndeclare const TRIANGLE_STRIP: 0x0005;\ndeclare const QUADS: 'quads';\ndeclare const QUAD_STRIP: 'quad_strip';\ndeclare const CLOSE: 'close';\ndeclare const OPEN: 'open';\ndeclare const CHORD: 'chord';\ndeclare const PIE: 'pie';\ndeclare const PROJECT: 'square';\ndeclare const SQUARE: 'butt';\ndeclare const ROUND: 'round';\ndeclare const BEVEL: 'bevel';\ndeclare const MITER: 'miter';\ndeclare const RGB: 'rgb';\ndeclare const HSB: 'hsb';\ndeclare const HSL: 'hsl';\ndeclare const BLEND: 'source-over';\ndeclare const ADD: 'lighter';\ndeclare const DARKEST: 'darkest';\ndeclare const LIGHTEST: 'lighten';\ndeclare const DIFFERENCE: 'difference';\ndeclare const EXCLUSION: 'exclusion';\ndeclare const MULTIPLY: 'multiply';\ndeclare const SCREEN: 'screen';\ndeclare const REPLACE: 'copy';\ndeclare const OVERLAY: 'overlay';\ndeclare const HARD_LIGHT: 'hard-light';\ndeclare const SOFT_LIGHT: 'soft-light';\ndeclare const DODGE: 'color-dodge';\ndeclare const BURN: 'color-burn';\ndeclare const THRESHOLD: 'threshold';\ndeclare const GRAY: 'gray';\ndeclare const OPAQUE: 'opaque';\ndeclare const INVERT: 'invert';\ndeclare const POSTERIZE: 'posterize';\ndeclare const DILATE: 'dilate';\ndeclare const ERODE: 'erode';\ndeclare const BLUR: 'blur';\ndeclare const NORMAL: 'normal';\ndeclare const ITALIC: 'italic';\ndeclare const BOLD: 'bold';\ndeclare const LANDSCAPE: 'landscape';\ndeclare const PORTRAIT: 'portrait';\n\n// src/core/core.js\n\n/**\n *   Called directly before setup(), the preload() \n *   function is used to handle asynchronous loading of \n *   external files in a blocking way. If a preload \n *   function is defined, setup() will wait until any \n *   load calls within have finished. Nothing besides \n *   load calls (loadImage, loadJSON, loadFont, \n *   loadStrings, etc.) should be inside preload \n *   function. If asynchronous loading is preferred, \n *   the load methods can instead be called in setup() \n *   or anywhere else with the use of a callback \n *   parameter.  By default the text \"loading...\" will \n *   be displayed. To make your own loading page, \n *   include an HTML element with id \"p5_loading\" in \n *   your page. More information here.\n *\n */\ndeclare function preload(): void;\n\n/**\n *   The setup() function is called once when the \n *   program starts. It's used to define initial \n *   environment properties such as screen size and \n *   background color and to load media such as images \n *   and fonts as the program starts. There can only be \n *   one setup() function for each program and it \n *   shouldn't be called again after its initial \n *   execution.  Note: Variables declared within \n *   setup() are not accessible within other functions, \n *   including draw().\n *\n */\ndeclare function setup(): void;\n\n/**\n *   Called directly after setup(), the draw() function \n *   continuously executes the lines of code contained \n *   inside its block until the program is stopped or \n *   noLoop() is called. Note if noLoop() is called in \n *   setup(), draw() will still be executed once before \n *   stopping. draw() is called automatically and \n *   should never be called explicitly.  It should \n *   always be controlled with noLoop(), redraw() and \n *   loop(). After noLoop() stops the code in draw() \n *   from executing, redraw() causes the code inside \n *   draw() to execute once, and loop() will cause the \n *   code inside draw() to resume executing \n *   continuously. \n * \n *  \n *   The number of times draw() executes in each second \n *   may be controlled with the frameRate() function. \n * \n *  \n *   There can only be one draw() function for each \n *   sketch, and draw() must exist if you want the code \n *   to run continuously, or to process events such as \n *   mousePressed(). Sometimes, you might have an empty \n *   call to draw() in your program, as shown in the \n *   above example. \n * \n *  \n *   It is important to note that the drawing \n *   coordinate system will be reset at the beginning \n *   of each draw() call. If any transformations are \n *   performed within draw() (ex: scale, rotate, \n *   translate), their effects will be undone at the \n *   beginning of draw(), so transformations will not \n *   accumulate over time. On the other hand, styling \n *   applied (ex: fill, stroke, etc) will remain in \n *   effect.\n *\n */\ndeclare function draw(): void;\n\n/**\n *   Removes the entire p5 sketch. This will remove the \n *   canvas and any elements created by p5.js. It will \n *   also stop the draw loop and unbind any properties \n *   or methods from the window global scope. It will \n *   leave a variable p5 in case you wanted to create a \n *   new p5 sketch. If you like, you can set p5 = null \n *   to erase it. While all functions and variables and \n *   objects created by the p5 library will be removed, \n *   any other global variables created by your code \n *   will remain.\n *\n */\ndeclare function remove(): void;\n\n// src/core/curves.js\n\n/**\n *   Draws a cubic Bezier curve on the screen. These \n *   curves are defined by a series of anchor and \n *   control points. The first two parameters specify \n *   the first anchor point and the last two parameters \n *   specify the other anchor point, which become the \n *   first and last points on the curve. The middle \n *   parameters specify the two control points which \n *   define the shape of the curve. Approximately \n *   speaking, control points \"pull\" the curve towards \n *   them.Bezier curves were developed by French \n *   automotive engineer Pierre Bezier, and are \n *   commonly used in computer graphics to define \n *   gently sloping curves. See also curve().\n *\n *   @param x1 x-coordinate for the first anchor point\n *   @param y1 y-coordinate for the first anchor point\n *   @param x2 x-coordinate for the first control point\n *   @param y2 y-coordinate for the first control point\n *   @param x3 x-coordinate for the second control \n *   point\n *   @param y3 y-coordinate for the second control \n *   point\n *   @param x4 x-coordinate for the second anchor point\n *   @param y4 y-coordinate for the second anchor point\n *   @chainable\n */\ndeclare function bezier(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5;\n\n/**\n *   Draws a cubic Bezier curve on the screen. These \n *   curves are defined by a series of anchor and \n *   control points. The first two parameters specify \n *   the first anchor point and the last two parameters \n *   specify the other anchor point, which become the \n *   first and last points on the curve. The middle \n *   parameters specify the two control points which \n *   define the shape of the curve. Approximately \n *   speaking, control points \"pull\" the curve towards \n *   them.Bezier curves were developed by French \n *   automotive engineer Pierre Bezier, and are \n *   commonly used in computer graphics to define \n *   gently sloping curves. See also curve().\n *\n *   @param x1 x-coordinate for the first anchor point\n *   @param y1 y-coordinate for the first anchor point\n *   @param z1 z-coordinate for the first anchor point\n *   @param x2 x-coordinate for the first control point\n *   @param y2 y-coordinate for the first control point\n *   @param z2 z-coordinate for the first control point\n *   @param x3 x-coordinate for the second control \n *   point\n *   @param y3 y-coordinate for the second control \n *   point\n *   @param z3 z-coordinate for the second control \n *   point\n *   @param x4 x-coordinate for the second anchor point\n *   @param y4 y-coordinate for the second anchor point\n *   @param z4 z-coordinate for the second anchor point\n *   @chainable\n */\ndeclare function bezier(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number): p5;\n\n/**\n *   Sets the resolution at which Beziers display. The \n *   default value is 20. \n * \n *   This function is only useful when using the WEBGL \n *   renderer as the default canvas renderer does not \n *   use this information.\n *\n *   @param detail resolution of the curves\n *   @chainable\n */\ndeclare function bezierDetail(detail: number): p5;\n\n/**\n *   Evaluates the Bezier at position t for points a, \n *   b, c, d. The parameters a and d are the first and \n *   last points on the curve, and b and c are the \n *   control points. The final parameter t varies \n *   between 0 and 1. This can be done once with the x \n *   coordinates and a second time with the y \n *   coordinates to get the location of a bezier curve \n *   at t.\n *\n *   @param a coordinate of first point on the curve\n *   @param b coordinate of first control point\n *   @param c coordinate of second control point\n *   @param d coordinate of second point on the curve\n *   @param t value between 0 and 1\n *   @return the value of the Bezier at position t\n */\ndeclare function bezierPoint(a: number, b: number, c: number, d: number, t: number): number;\n\n/**\n *   Evaluates the tangent to the Bezier at position t \n *   for points a, b, c, d. The parameters a and d are \n *   the first and last points on the curve, and b and \n *   c are the control points. The final parameter t \n *   varies between 0 and 1.\n *\n *   @param a coordinate of first point on the curve\n *   @param b coordinate of first control point\n *   @param c coordinate of second control point\n *   @param d coordinate of second point on the curve\n *   @param t value between 0 and 1\n *   @return the tangent at position t\n */\ndeclare function bezierTangent(a: number, b: number, c: number, d: number, t: number): number;\n\n/**\n *   Draws a curved line on the screen between two \n *   points, given as the middle four parameters. The \n *   first two parameters are a control point, as if \n *   the curve came from this point even though it's \n *   not drawn. The last two parameters similarly \n *   describe the other control point.  Longer curves \n *   can be created by putting a series of curve() \n *   functions together or using curveVertex(). An \n *   additional function called curveTightness() \n *   provides control for the visual quality of the \n *   curve. The curve() function is an implementation \n *   of Catmull-Rom splines.\n *\n *   @param x1 x-coordinate for the beginning control \n *   point\n *   @param y1 y-coordinate for the beginning control \n *   point\n *   @param x2 x-coordinate for the first point\n *   @param y2 y-coordinate for the first point\n *   @param x3 x-coordinate for the second point\n *   @param y3 y-coordinate for the second point\n *   @param x4 x-coordinate for the ending control \n *   point\n *   @param y4 y-coordinate for the ending control \n *   point\n *   @chainable\n */\ndeclare function curve(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5;\n\n/**\n *   Draws a curved line on the screen between two \n *   points, given as the middle four parameters. The \n *   first two parameters are a control point, as if \n *   the curve came from this point even though it's \n *   not drawn. The last two parameters similarly \n *   describe the other control point.  Longer curves \n *   can be created by putting a series of curve() \n *   functions together or using curveVertex(). An \n *   additional function called curveTightness() \n *   provides control for the visual quality of the \n *   curve. The curve() function is an implementation \n *   of Catmull-Rom splines.\n *\n *   @param x1 x-coordinate for the beginning control \n *   point\n *   @param y1 y-coordinate for the beginning control \n *   point\n *   @param z1 z-coordinate for the beginning control \n *   point\n *   @param x2 x-coordinate for the first point\n *   @param y2 y-coordinate for the first point\n *   @param z2 z-coordinate for the first point\n *   @param x3 x-coordinate for the second point\n *   @param y3 y-coordinate for the second point\n *   @param z3 z-coordinate for the second point\n *   @param x4 x-coordinate for the ending control \n *   point\n *   @param y4 y-coordinate for the ending control \n *   point\n *   @param z4 z-coordinate for the ending control \n *   point\n *   @chainable\n */\ndeclare function curve(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number, x3: number, y3: number, z3: number, x4: number, y4: number, z4: number): p5;\n\n/**\n *   Sets the resolution at which curves display. The \n *   default value is 20. \n * \n *   This function is only useful when using the WEBGL \n *   renderer as the default canvas renderer does not \n *   use this information.\n *\n *   @param resolution of the curves\n *   @chainable\n */\ndeclare function curveDetail(resolution: number): p5;\n\n/**\n *   Modifies the quality of forms created with curve() \n *   and curveVertex(). The parameter tightness \n *   determines how the curve fits to the vertex \n *   points. The value 0.0 is the default value for \n *   tightness (this value defines the curves to be \n *   Catmull-Rom splines) and the value 1.0 connects \n *   all the points with straight lines. Values within \n *   the range -5.0 and 5.0 will deform the curves but \n *   will leave them recognizable and as values \n *   increase in magnitude, they will continue to \n *   deform.\n *\n *   @param amount of deformation from the original \n *   vertices\n *   @chainable\n */\ndeclare function curveTightness(amount: number): p5;\n\n/**\n *   Evaluates the curve at position t for points a, b, \n *   c, d. The parameter t varies between 0 and 1, a \n *   and d are points on the curve, and b and c are the \n *   control points. This can be done once with the x \n *   coordinates and a second time with the y \n *   coordinates to get the location of a curve at t.\n *\n *   @param a coordinate of first point on the curve\n *   @param b coordinate of first control point\n *   @param c coordinate of second control point\n *   @param d coordinate of second point on the curve\n *   @param t value between 0 and 1\n *   @return bezier value at position t\n */\ndeclare function curvePoint(a: number, b: number, c: number, d: number, t: number): number;\n\n/**\n *   Evaluates the tangent to the curve at position t \n *   for points a, b, c, d. The parameter t varies \n *   between 0 and 1, a and d are points on the curve, \n *   and b and c are the control points.\n *\n *   @param a coordinate of first point on the curve\n *   @param b coordinate of first control point\n *   @param c coordinate of second control point\n *   @param d coordinate of second point on the curve\n *   @param t value between 0 and 1\n *   @return the tangent at position t\n */\ndeclare function curveTangent(a: number, b: number, c: number, d: number, t: number): number;\n\n// src/core/environment.js\n\n/**\n *   The print() function writes to the console area of \n *   your browser. This function is often helpful for \n *   looking at the data a program is producing. This \n *   function creates a new line of text for each call \n *   to the function. Individual elements can be \n *   separated with quotes (\"\") and joined with the \n *   addition operator (+).\n *\n *   @param contents any combination of Number, String, \n *   Object, Boolean, Array to print\n */\ndeclare function print(contents: any): void;\n\n/**\n *   The system variable frameCount contains the number \n *   of frames that have been displayed since the \n *   program started. Inside setup() the value is 0, \n *   after the first iteration of draw it is 1, etc.\n *\n */\ndeclare var frameCount: number;\n\n/**\n *   Confirms if the window a p5.js program is in is \n *   \"focused,\" meaning that the sketch will accept \n *   mouse or keyboard input. This variable is \"true\" \n *   if the window is focused and \"false\" if not.\n *\n */\ndeclare var focused: boolean;\n\n/**\n *   Sets the cursor to a predefined symbol or an \n *   image, or makes it visible if already hidden. If \n *   you are trying to set an image as the cursor, the \n *   recommended size is 16x16 or 32x32 pixels. It is \n *   not possible to load an image as the cursor if you \n *   are exporting your program for the Web, and not \n *   all MODES work with all browsers. The values for \n *   parameters x and y must be less than the \n *   dimensions of the image.\n *\n *   @param type either ARROW, CROSS, HAND, MOVE, TEXT, \n *   or WAIT, or path for image\n *   @param [x] the horizontal active spot of the \n *   cursor\n *   @param [y] the vertical active spot of the cursor\n */\ndeclare function cursor(type: string|any, x?: number, y?: number): void;\n\n/**\n *   Specifies the number of frames to be displayed \n *   every second. For example, the function call \n *   frameRate(30) will attempt to refresh 30 times a \n *   second. If the processor is not fast enough to \n *   maintain the specified rate, the frame rate will \n *   not be achieved. Setting the frame rate within \n *   setup() is recommended. The default rate is 60 \n *   frames per second. This is the same as \n *   setFrameRate(val).  Calling frameRate() with no \n *   arguments returns the current framerate. The draw \n *   function must run at least once before it will \n *   return a value. This is the same as \n *   getFrameRate(). \n * \n *  \n *   Calling frameRate() with arguments that are not of \n *   the type numbers or are non positive also returns \n *   current framerate.\n *\n *   @param fps number of frames to be displayed every \n *   second\n *   @chainable\n */\ndeclare function frameRate(fps: number): p5;\n\n/**\n *   Specifies the number of frames to be displayed \n *   every second. For example, the function call \n *   frameRate(30) will attempt to refresh 30 times a \n *   second. If the processor is not fast enough to \n *   maintain the specified rate, the frame rate will \n *   not be achieved. Setting the frame rate within \n *   setup() is recommended. The default rate is 60 \n *   frames per second. This is the same as \n *   setFrameRate(val).  Calling frameRate() with no \n *   arguments returns the current framerate. The draw \n *   function must run at least once before it will \n *   return a value. This is the same as \n *   getFrameRate(). \n * \n *  \n *   Calling frameRate() with arguments that are not of \n *   the type numbers or are non positive also returns \n *   current framerate.\n *\n *   @return current frameRate\n */\ndeclare function frameRate(): number;\n\n/**\n *   Hides the cursor from view.\n *\n */\ndeclare function noCursor(): void;\n\n/**\n *   System variable that stores the width of the \n *   entire screen display. This is used to run a \n *   full-screen program on any display size.\n *\n */\ndeclare var displayWidth: number;\n\n/**\n *   System variable that stores the height of the \n *   entire screen display. This is used to run a \n *   full-screen program on any display size.\n *\n */\ndeclare var displayHeight: number;\n\n/**\n *   System variable that stores the width of the inner \n *   window, it maps to window.innerWidth.\n *\n */\ndeclare var windowWidth: number;\n\n/**\n *   System variable that stores the height of the \n *   inner window, it maps to window.innerHeight.\n *\n */\ndeclare var windowHeight: number;\n\n/**\n *   The windowResized() function is called once every \n *   time the browser window is resized. This is a good \n *   place to resize the canvas or do any other \n *   adjustments to accommodate the new window size.\n *\n */\ndeclare function windowResized(): void;\n\n/**\n *   System variable that stores the width of the \n *   drawing canvas. This value is set by the first \n *   parameter of the createCanvas() function. For \n *   example, the function call createCanvas(320, 240) \n *   sets the width variable to the value 320. The \n *   value of width defaults to 100 if createCanvas() \n *   is not used in a program.\n *\n */\ndeclare var width: number;\n\n/**\n *   System variable that stores the height of the \n *   drawing canvas. This value is set by the second \n *   parameter of the createCanvas() function. For \n *   example, the function call createCanvas(320, 240) \n *   sets the height variable to the value 240. The \n *   value of height defaults to 100 if createCanvas() \n *   is not used in a program.\n *\n */\ndeclare var height: number;\n\n/**\n *   If argument is given, sets the sketch to \n *   fullscreen or not based on the value of the \n *   argument. If no argument is given, returns the \n *   current fullscreen state. Note that due to browser \n *   restrictions this can only be called on user \n *   input, for example, on mouse press like the \n *   example below.\n *\n *   @param [val] whether the sketch should be in \n *   fullscreen mode or not\n *   @return current fullscreen state\n */\ndeclare function fullscreen(val?: boolean): boolean;\n\n/**\n *   Sets the pixel scaling for high pixel density \n *   displays. By default pixel density is set to match \n *   display density, call pixelDensity(1) to turn this \n *   off. Calling pixelDensity() with no arguments \n *   returns the current pixel density of the sketch.\n *\n *   @param [val] whether or how much the sketch should \n *   scale\n *   @return current pixel density of the sketch\n */\ndeclare function pixelDensity(val?: number): number;\n\n/**\n *   Returns the pixel density of the current display \n *   the sketch is running on.\n *\n *   @return current pixel density of the display\n */\ndeclare function displayDensity(): number;\n\n/**\n *   Gets the current URL.\n *\n *   @return url\n */\ndeclare function getURL(): string;\n\n/**\n *   Gets the current URL path as an array.\n *\n *   @return path components\n */\ndeclare function getURLPath(): string[];\n\n/**\n *   Gets the current URL params as an Object.\n *\n *   @return URL params\n */\ndeclare function getURLParams(): object;\n\n// src/core/rendering.js\n\n/**\n *   Creates a canvas element in the document, and sets \n *   the dimensions of it in pixels. This method should \n *   be called only once at the start of setup. Calling \n *   createCanvas more than once in a sketch will \n *   result in very unpredictable behavior. If you want \n *   more than one drawing canvas you could use \n *   createGraphics (hidden by default but it can be \n *   shown).  The system variables width and height are \n *   set by the parameters passed to this function. If \n *   createCanvas() is not used, the window will be \n *   given a default size of 100x100 pixels. \n * \n *  \n *   For more ways to position the canvas, see the  \n *   positioning the canvas wiki page.\n *\n *   @param w width of the canvas\n *   @param h height of the canvas\n *   @param [renderer] either P2D or WEBGL\n */\ndeclare function createCanvas(w: number, h: number, renderer?: RENDERER): p5.Renderer;\n\n/**\n *   Resizes the canvas to given width and height. The \n *   canvas will be cleared and draw will be called \n *   immediately, allowing the sketch to re-render \n *   itself in the resized canvas.\n *\n *   @param w width of the canvas\n *   @param h height of the canvas\n *   @param [noRedraw] don't redraw the canvas \n *   immediately\n */\ndeclare function resizeCanvas(w: number, h: number, noRedraw?: boolean): void;\n\n/**\n *   Removes the default canvas for a p5 sketch that \n *   doesn't require a canvas\n *\n */\ndeclare function noCanvas(): void;\n\n/**\n *   Creates and returns a new p5.Renderer object. Use \n *   this class if you need to draw into an off-screen \n *   graphics buffer. The two parameters define the \n *   width and height in pixels.\n *\n *   @param w width of the offscreen graphics buffer\n *   @param h height of the offscreen graphics buffer\n *   @param [renderer] either P2D or WEBGL undefined \n *   defaults to p2d\n *   @return offscreen graphics buffer\n */\ndeclare function createGraphics(w: number, h: number, renderer?: RENDERER): p5.Graphics;\n\n/**\n *   Blends the pixels in the display window according \n *   to the defined mode. There is a choice of the \n *   following modes to blend the source pixels (A) \n *   with the ones of pixels already in the display \n *   window (B): - BLEND - linear interpolation of \n *   colours: C = A*factor + B. This is the default \n *   blending mode.\n *   - ADD - sum of A and B\n *   - DARKEST - only the darkest colour succeeds: C = \n *   min(A*factor, B).\n *   - LIGHTEST - only the lightest colour succeeds: C \n *   = max(A*factor, B).\n *   - DIFFERENCE - subtract colors from underlying \n *   image.\n *   - EXCLUSION - similar to DIFFERENCE, but less \n *   extreme.\n *   - MULTIPLY - multiply the colors, result will \n *   always be darker.\n *   - SCREEN - opposite multiply, uses inverse values \n *   of the colors.\n *   - REPLACE - the pixels entirely replace the others \n *   and don't utilize alpha (transparency) values.\n *   - OVERLAY - mix of MULTIPLY and SCREEN . \n *   Multiplies dark values, and screens light values.\n *   - HARD_LIGHT - SCREEN when greater than 50% gray, \n *   MULTIPLY when lower.\n *   - SOFT_LIGHT - mix of DARKEST and LIGHTEST. Works \n *   like OVERLAY, but not as harsh. \n *   - DODGE - lightens light tones and increases \n *   contrast, ignores darks.\n *   - BURN - darker areas are applied, increasing \n *   contrast, ignores lights.\n *\n *   @param mode blend mode to set for canvas. either \n *   BLEND, DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL\n */\ndeclare function blendMode(mode: BLEND_MODE): void;\n\n// src/core/structure.js\n\n/**\n *   Stops p5.js from continuously executing the code \n *   within draw(). If loop() is called, the code in \n *   draw() begins to run continuously again. If using \n *   noLoop() in setup(), it should be the last line \n *   inside the block.  When noLoop() is used, it's not \n *   possible to manipulate or access the screen inside \n *   event handling functions such as mousePressed() or \n *   keyPressed(). Instead, use those functions to call \n *   redraw() or loop(), which will run draw(), which \n *   can update the screen properly. This means that \n *   when noLoop() has been called, no drawing can \n *   happen, and functions like saveFrame() or \n *   loadPixels() may not be used. \n * \n *  \n *   Note that if the sketch is resized, redraw() will \n *   be called to update the sketch, even after \n *   noLoop() has been specified. Otherwise, the sketch \n *   would enter an odd state until loop() was called.\n *\n */\ndeclare function noLoop(): void;\n\n/**\n *   By default, p5.js loops through draw() \n *   continuously, executing the code within it. \n *   However, the draw() loop may be stopped by calling \n *   noLoop(). In that case, the draw() loop can be \n *   resumed with loop().\n *\n */\ndeclare function loop(): void;\n\n/**\n *   The push() function saves the current drawing \n *   style settings and transformations, while pop() \n *   restores these settings. Note that these functions \n *   are always used together. They allow you to change \n *   the style and transformation settings and later \n *   return to what you had. When a new state is \n *   started with push(), it builds on the current \n *   style and transform information. The push() and \n *   pop() functions can be embedded to provide more \n *   control. (See the second example for a \n *   demonstration.)  push() stores information related \n *   to the current transformation state and style \n *   settings controlled by the following functions: \n *   fill(), stroke(), tint(), strokeWeight(), \n *   strokeCap(), strokeJoin(), imageMode(), \n *   rectMode(), ellipseMode(), colorMode(), \n *   textAlign(), textFont(), textMode(), textSize(), \n *   textLeading().\n *\n */\ndeclare function push(): void;\n\n/**\n *   The push() function saves the current drawing \n *   style settings and transformations, while pop() \n *   restores these settings. Note that these functions \n *   are always used together. They allow you to change \n *   the style and transformation settings and later \n *   return to what you had. When a new state is \n *   started with push(), it builds on the current \n *   style and transform information. The push() and \n *   pop() functions can be embedded to provide more \n *   control. (See the second example for a \n *   demonstration.)  push() stores information related \n *   to the current transformation state and style \n *   settings controlled by the following functions: \n *   fill(), stroke(), tint(), strokeWeight(), \n *   strokeCap(), strokeJoin(), imageMode(), \n *   rectMode(), ellipseMode(), colorMode(), \n *   textAlign(), textFont(), textMode(), textSize(), \n *   textLeading().\n *\n */\ndeclare function pop(): void;\n\n/**\n *   Executes the code within draw() one time. This \n *   functions allows the program to update the display \n *   window only when necessary, for example when an \n *   event registered by mousePressed() or keyPressed() \n *   occurs.  In structuring a program, it only makes \n *   sense to call redraw() within events such as \n *   mousePressed(). This is because redraw() does not \n *   run draw() immediately (it only sets a flag that \n *   indicates an update is needed). \n * \n *  \n *   The redraw() function does not work properly when \n *   called inside draw(). To enable/disable \n *   animations, use loop() and noLoop(). \n * \n *  \n *   In addition you can set the number of redraws per \n *   method call. Just add an integer as single \n *   parameter for the number of redraws.\n *\n *   @param [n] Redraw for n-times. The default value \n *   is 1.\n */\ndeclare function redraw(n?: number): void;\n\n// src/core/transform.js\n\n/**\n *   Multiplies the current matrix by the one specified \n *   through the parameters. This is a powerful \n *   operation that can perform the equivalent of \n *   translate, scale, shear and rotate all at once. \n *   You can learn more about transformation matrices \n *   on  Wikipedia. The naming of the arguments here \n *   follows the naming of the  WHATWG specification \n *   and corresponds to a transformation matrix of the \n *   form:\n *\n *   @param a numbers which define the 2x3 matrix to be \n *   multiplied\n *   @param b numbers which define the 2x3 matrix to be \n *   multiplied\n *   @param c numbers which define the 2x3 matrix to be \n *   multiplied\n *   @param d numbers which define the 2x3 matrix to be \n *   multiplied\n *   @param e numbers which define the 2x3 matrix to be \n *   multiplied\n *   @param f numbers which define the 2x3 matrix to be \n *   multiplied\n *   @chainable\n */\ndeclare function applyMatrix(a: number, b: number, c: number, d: number, e: number, f: number): p5;\n\n/**\n *   Replaces the current matrix with the identity \n *   matrix.\n *\n *   @chainable\n */\ndeclare function resetMatrix(): p5;\n\n/**\n *   Rotates a shape the amount specified by the angle \n *   parameter. This function accounts for angleMode, \n *   so angles can be entered in either RADIANS or \n *   DEGREES.  Objects are always rotated around their \n *   relative position to the origin and positive \n *   numbers rotate objects in a clockwise direction. \n *   Transformations apply to everything that happens \n *   after and subsequent calls to the function \n *   accumulates the effect. For example, calling \n *   rotate(HALF_PI) and then rotate(HALF_PI) is the \n *   same as rotate(PI). All tranformations are reset \n *   when draw() begins again. \n * \n *  \n *   Technically, rotate() multiplies the current \n *   transformation matrix by a rotation matrix. This \n *   function can be further controlled by the push() \n *   and pop().\n *\n *   @param angle the angle of rotation, specified in \n *   radians or degrees, depending on current angleMode\n *   @param [axis] (in 3d) the axis to rotate around\n *   @chainable\n */\ndeclare function rotate(angle: number, axis?: p5.Vector|number[]): p5;\n\n/**\n *   Rotates around X axis.\n *\n *   @param angle the angle of rotation, specified in \n *   radians or degrees, depending on current angleMode\n *   @chainable\n */\ndeclare function rotateX(angle: number): p5;\n\n/**\n *   Rotates around Y axis.\n *\n *   @param angle the angle of rotation, specified in \n *   radians or degrees, depending on current angleMode\n *   @chainable\n */\ndeclare function rotateY(angle: number): p5;\n\n/**\n *   Rotates around Z axis. Webgl mode only.\n *\n *   @param angle the angle of rotation, specified in \n *   radians or degrees, depending on current angleMode\n *   @chainable\n */\ndeclare function rotateZ(angle: number): p5;\n\n/**\n *   Increases or decreases the size of a shape by \n *   expanding and contracting vertices. Objects always \n *   scale from their relative origin to the coordinate \n *   system. Scale values are specified as decimal \n *   percentages. For example, the function call \n *   scale(2.0) increases the dimension of a shape by \n *   200%.  Transformations apply to everything that \n *   happens after and subsequent calls to the function \n *   multiply the effect. For example, calling \n *   scale(2.0) and then scale(1.5) is the same as \n *   scale(3.0). If scale() is called within draw(), \n *   the transformation is reset when the loop begins \n *   again. \n * \n *  \n *   Using this function with the z parameter is only \n *   available in WEBGL mode. This function can be \n *   further controlled with push() and pop().\n *\n *   @param s percent to scale the object, or \n *   percentage to scale the object in the x-axis if \n *   multiple arguments are given\n *   @param [y] percent to scale the object in the \n *   y-axis\n *   @param [z] percent to scale the object in the \n *   z-axis (webgl only)\n *   @chainable\n */\ndeclare function scale(s: number|p5.Vector|number[], y?: number, z?: number): p5;\n\n/**\n *   Increases or decreases the size of a shape by \n *   expanding and contracting vertices. Objects always \n *   scale from their relative origin to the coordinate \n *   system. Scale values are specified as decimal \n *   percentages. For example, the function call \n *   scale(2.0) increases the dimension of a shape by \n *   200%.  Transformations apply to everything that \n *   happens after and subsequent calls to the function \n *   multiply the effect. For example, calling \n *   scale(2.0) and then scale(1.5) is the same as \n *   scale(3.0). If scale() is called within draw(), \n *   the transformation is reset when the loop begins \n *   again. \n * \n *  \n *   Using this function with the z parameter is only \n *   available in WEBGL mode. This function can be \n *   further controlled with push() and pop().\n *\n *   @param scales per-axis percents to scale the \n *   object\n *   @chainable\n */\ndeclare function scale(scales: p5.Vector|number[]): p5;\n\n/**\n *   Shears a shape around the x-axis the amount \n *   specified by the angle parameter. Angles should be \n *   specified in the current angleMode. Objects are \n *   always sheared around their relative position to \n *   the origin and positive numbers shear objects in a \n *   clockwise direction.  Transformations apply to \n *   everything that happens after and subsequent calls \n *   to the function accumulates the effect. For \n *   example, calling shearX(PI/2) and then \n *   shearX(PI/2) is the same as shearX(PI). If \n *   shearX() is called within the draw(), the \n *   transformation is reset when the loop begins \n *   again. \n * \n *  \n *   Technically, shearX() multiplies the current \n *   transformation matrix by a rotation matrix. This \n *   function can be further controlled by the push() \n *   and pop() functions.\n *\n *   @param angle angle of shear specified in radians \n *   or degrees, depending on current angleMode\n *   @chainable\n */\ndeclare function shearX(angle: number): p5;\n\n/**\n *   Shears a shape around the y-axis the amount \n *   specified by the angle parameter. Angles should be \n *   specified in the current angleMode. Objects are \n *   always sheared around their relative position to \n *   the origin and positive numbers shear objects in a \n *   clockwise direction.  Transformations apply to \n *   everything that happens after and subsequent calls \n *   to the function accumulates the effect. For \n *   example, calling shearY(PI/2) and then \n *   shearY(PI/2) is the same as shearY(PI). If \n *   shearY() is called within the draw(), the \n *   transformation is reset when the loop begins \n *   again. \n * \n *  \n *   Technically, shearY() multiplies the current \n *   transformation matrix by a rotation matrix. This \n *   function can be further controlled by the push() \n *   and pop() functions.\n *\n *   @param angle angle of shear specified in radians \n *   or degrees, depending on current angleMode\n *   @chainable\n */\ndeclare function shearY(angle: number): p5;\n\n/**\n *   Specifies an amount to displace objects within the \n *   display window. The x parameter specifies \n *   left/right translation, the y parameter specifies \n *   up/down translation.  Transformations are \n *   cumulative and apply to everything that happens \n *   after and subsequent calls to the function \n *   accumulates the effect. For example, calling \n *   translate(50, 0) and then translate(20, 0) is the \n *   same as translate(70, 0). If translate() is called \n *   within draw(), the transformation is reset when \n *   the loop begins again. This function can be \n *   further controlled by using push() and pop().\n *\n *   @param x left/right translation\n *   @param y up/down translation\n *   @param [z] forward/backward translation (webgl \n *   only)\n *   @chainable\n */\ndeclare function translate(x: number, y: number, z?: number): p5;\n\n/**\n *   Specifies an amount to displace objects within the \n *   display window. The x parameter specifies \n *   left/right translation, the y parameter specifies \n *   up/down translation.  Transformations are \n *   cumulative and apply to everything that happens \n *   after and subsequent calls to the function \n *   accumulates the effect. For example, calling \n *   translate(50, 0) and then translate(20, 0) is the \n *   same as translate(70, 0). If translate() is called \n *   within draw(), the transformation is reset when \n *   the loop begins again. This function can be \n *   further controlled by using push() and pop().\n *\n *   @param vector the vector to translate by\n *   @chainable\n */\ndeclare function translate(vector: p5.Vector): p5;\n\n// src/core/vertex.js\n\n/**\n *   Use the beginContour() and endContour() functions \n *   to create negative shapes within shapes such as \n *   the center of the letter 'O'. beginContour() \n *   begins recording vertices for the shape and \n *   endContour() stops recording. The vertices that \n *   define a negative shape must \"wind\" in the \n *   opposite direction from the exterior shape. First \n *   draw vertices for the exterior clockwise order, \n *   then for internal shapes, draw vertices shape in \n *   counter-clockwise.  These functions can only be \n *   used within a beginShape()/endShape() pair and \n *   transformations such as translate(), rotate(), and \n *   scale() do not work within a \n *   beginContour()/endContour() pair. It is also not \n *   possible to use other shapes, such as ellipse() or \n *   rect() within.\n *\n *   @chainable\n */\ndeclare function beginContour(): p5;\n\n/**\n *   Using the beginShape() and endShape() functions \n *   allow creating more complex forms. beginShape() \n *   begins recording vertices for a shape and \n *   endShape() stops recording. The value of the kind \n *   parameter tells it which types of shapes to create \n *   from the provided vertices. With no mode \n *   specified, the shape can be any irregular polygon.  \n *   The parameters available for beginShape() are \n *   POINTS, LINES, TRIANGLES, TRIANGLE_FAN, \n *   TRIANGLE_STRIP, QUADS, and QUAD_STRIP. After \n *   calling the beginShape() function, a series of \n *   vertex() commands must follow. To stop drawing the \n *   shape, call endShape(). Each shape will be \n *   outlined with the current stroke color and filled \n *   with the fill color. \n * \n *  \n *   Transformations such as translate(), rotate(), and \n *   scale() do not work within beginShape(). It is \n *   also not possible to use other shapes, such as \n *   ellipse() or rect() within beginShape().\n *\n *   @param [kind] either POINTS, LINES, TRIANGLES, \n *   TRIANGLE_FAN TRIANGLE_STRIP, QUADS, or QUAD_STRIP\n *   @chainable\n */\ndeclare function beginShape(kind?: BEGIN_KIND): p5;\n\n/**\n *   Specifies vertex coordinates for Bezier curves. \n *   Each call to bezierVertex() defines the position \n *   of two control points and one anchor point of a \n *   Bezier curve, adding a new segment to a line or \n *   shape.  The first time bezierVertex() is used \n *   within a beginShape() call, it must be prefaced \n *   with a call to vertex() to set the first anchor \n *   point. This function must be used between \n *   beginShape() and endShape() and only when there is \n *   no MODE parameter specified to beginShape().\n *\n *   @param x2 x-coordinate for the first control point\n *   @param y2 y-coordinate for the first control point\n *   @param x3 x-coordinate for the second control \n *   point\n *   @param y3 y-coordinate for the second control \n *   point\n *   @param x4 x-coordinate for the anchor point\n *   @param y4 y-coordinate for the anchor point\n *   @chainable\n */\ndeclare function bezierVertex(x2: number, y2: number, x3: number, y3: number, x4: number, y4: number): p5;\n\n/**\n *   Specifies vertex coordinates for curves. This \n *   function may only be used between beginShape() and \n *   endShape() and only when there is no MODE \n *   parameter specified to beginShape().  The first \n *   and last points in a series of curveVertex() lines \n *   will be used to guide the beginning and end of a \n *   the curve. A minimum of four points is required to \n *   draw a tiny curve between the second and third \n *   points. Adding a fifth point with curveVertex() \n *   will draw the curve between the second, third, and \n *   fourth points. The curveVertex() function is an \n *   implementation of Catmull-Rom splines.\n *\n *   @param x x-coordinate of the vertex\n *   @param y y-coordinate of the vertex\n *   @chainable\n */\ndeclare function curveVertex(x: number, y: number): p5;\n\n/**\n *   Use the beginContour() and endContour() functions \n *   to create negative shapes within shapes such as \n *   the center of the letter 'O'. beginContour() \n *   begins recording vertices for the shape and \n *   endContour() stops recording. The vertices that \n *   define a negative shape must \"wind\" in the \n *   opposite direction from the exterior shape. First \n *   draw vertices for the exterior clockwise order, \n *   then for internal shapes, draw vertices shape in \n *   counter-clockwise.  These functions can only be \n *   used within a beginShape()/endShape() pair and \n *   transformations such as translate(), rotate(), and \n *   scale() do not work within a \n *   beginContour()/endContour() pair. It is also not \n *   possible to use other shapes, such as ellipse() or \n *   rect() within.\n *\n *   @chainable\n */\ndeclare function endContour(): p5;\n\n/**\n *   The endShape() function is the companion to \n *   beginShape() and may only be called after \n *   beginShape(). When endshape() is called, all of \n *   image data defined since the previous call to \n *   beginShape() is written into the image buffer. The \n *   constant CLOSE as the value for the MODE parameter \n *   to close the shape (to connect the beginning and \n *   the end).\n *\n *   @param [mode] use CLOSE to close the shape\n *   @chainable\n */\ndeclare function endShape(mode?: END_MODE): p5;\n\n/**\n *   Specifies vertex coordinates for quadratic Bezier \n *   curves. Each call to quadraticVertex() defines the \n *   position of one control points and one anchor \n *   point of a Bezier curve, adding a new segment to a \n *   line or shape. The first time quadraticVertex() is \n *   used within a beginShape() call, it must be \n *   prefaced with a call to vertex() to set the first \n *   anchor point. This function must be used between \n *   beginShape() and endShape() and only when there is \n *   no MODE parameter specified to beginShape().\n *\n *   @param cx x-coordinate for the control point\n *   @param cy y-coordinate for the control point\n *   @param x3 x-coordinate for the anchor point\n *   @param y3 y-coordinate for the anchor point\n *   @chainable\n */\ndeclare function quadraticVertex(cx: number, cy: number, x3: number, y3: number): p5;\n\n/**\n *   All shapes are constructed by connecting a series \n *   of vertices. vertex() is used to specify the \n *   vertex coordinates for points, lines, triangles, \n *   quads, and polygons. It is used exclusively within \n *   the beginShape() and endShape() functions.\n *\n *   @param x x-coordinate of the vertex\n *   @param y y-coordinate of the vertex\n *   @chainable\n */\ndeclare function vertex(x: number, y: number): p5;\n\n/**\n *   All shapes are constructed by connecting a series \n *   of vertices. vertex() is used to specify the \n *   vertex coordinates for points, lines, triangles, \n *   quads, and polygons. It is used exclusively within \n *   the beginShape() and endShape() functions.\n *\n *   @param x x-coordinate of the vertex\n *   @param y y-coordinate of the vertex\n *   @param [z] z-coordinate of the vertex\n *   @param [u] the vertex's texture u-coordinate\n *   @param [v] the vertex's texture v-coordinate\n */\ndeclare function vertex(x: number, y: number, z?: number, u?: number, v?: number): void;\n\n// src/data/p5.TypedDict.js\n\n/**\n *   Creates a new instance of p5.StringDict using the \n *   key, value pair or object you provide.\n *\n */\ndeclare function createStringDict(key: string, value: string): p5.StringDict;\n\n/**\n *   Creates a new instance of p5.StringDict using the \n *   key, value pair or object you provide.\n *\n *   @param object object\n */\ndeclare function createStringDict(object: object): p5.StringDict;\n\n/**\n *   Creates a new instance of p5.NumberDict using the \n *   key, value pair or object you provide.\n *\n */\ndeclare function createNumberDict(key: number, value: number): p5.NumberDict;\n\n/**\n *   Creates a new instance of p5.NumberDict using the \n *   key, value pair or object you provide.\n *\n *   @param object object\n */\ndeclare function createNumberDict(object: object): p5.NumberDict;\n\n// src/events/acceleration.js\n\n/**\n *   The system variable deviceOrientation always \n *   contains the orientation of the device. The value \n *   of this variable will either be set 'landscape' or \n *   'portrait'. If no data is available it will be set \n *   to 'undefined'. either LANDSCAPE or PORTRAIT.\n *\n */\ndeclare var deviceOrientation: any;\n\n/**\n *   The system variable accelerationX always contains \n *   the acceleration of the device along the x axis. \n *   Value is represented as meters per second squared.\n *\n */\ndeclare var accelerationX: number;\n\n/**\n *   The system variable accelerationY always contains \n *   the acceleration of the device along the y axis. \n *   Value is represented as meters per second squared.\n *\n */\ndeclare var accelerationY: number;\n\n/**\n *   The system variable accelerationZ always contains \n *   the acceleration of the device along the z axis. \n *   Value is represented as meters per second squared.\n *\n */\ndeclare var accelerationZ: number;\n\n/**\n *   The system variable pAccelerationX always contains \n *   the acceleration of the device along the x axis in \n *   the frame previous to the current frame. Value is \n *   represented as meters per second squared.\n *\n */\ndeclare var pAccelerationX: number;\n\n/**\n *   The system variable pAccelerationY always contains \n *   the acceleration of the device along the y axis in \n *   the frame previous to the current frame. Value is \n *   represented as meters per second squared.\n *\n */\ndeclare var pAccelerationY: number;\n\n/**\n *   The system variable pAccelerationZ always contains \n *   the acceleration of the device along the z axis in \n *   the frame previous to the current frame. Value is \n *   represented as meters per second squared.\n *\n */\ndeclare var pAccelerationZ: number;\n\n/**\n *   The system variable rotationX always contains the \n *   rotation of the device along the x axis. Value is \n *   represented as 0 to +/-180 degrees.  Note: The \n *   order the rotations are called is important, ie. \n *   if used together, it must be called in the order \n *   Z-X-Y or there might be unexpected behaviour.\n *\n */\ndeclare var rotationX: number;\n\n/**\n *   The system variable rotationY always contains the \n *   rotation of the device along the y axis. Value is \n *   represented as 0 to +/-90 degrees.  Note: The \n *   order the rotations are called is important, ie. \n *   if used together, it must be called in the order \n *   Z-X-Y or there might be unexpected behaviour.\n *\n */\ndeclare var rotationY: number;\n\n/**\n *   The system variable rotationZ always contains the \n *   rotation of the device along the z axis. Value is \n *   represented as 0 to 359 degrees.  Unlike rotationX \n *   and rotationY, this variable is available for \n *   devices with a built-in compass only. \n * \n *  \n *   Note: The order the rotations are called is \n *   important, ie. if used together, it must be called \n *   in the order Z-X-Y or there might be unexpected \n *   behaviour.\n *\n */\ndeclare var rotationZ: number;\n\n/**\n *   The system variable pRotationX always contains the \n *   rotation of the device along the x axis in the \n *   frame previous to the current frame. Value is \n *   represented as 0 to +/-180 degrees.  pRotationX \n *   can also be used with rotationX to determine the \n *   rotate direction of the device along the X-axis.\n *\n */\ndeclare var pRotationX: number;\n\n/**\n *   The system variable pRotationY always contains the \n *   rotation of the device along the y axis in the \n *   frame previous to the current frame. Value is \n *   represented as 0 to +/-90 degrees.  pRotationY can \n *   also be used with rotationY to determine the \n *   rotate direction of the device along the Y-axis.\n *\n */\ndeclare var pRotationY: number;\n\n/**\n *   The system variable pRotationZ always contains the \n *   rotation of the device along the z axis in the \n *   frame previous to the current frame. Value is \n *   represented as 0 to 359 degrees.  pRotationZ can \n *   also be used with rotationZ to determine the \n *   rotate direction of the device along the Z-axis.\n *\n */\ndeclare var pRotationZ: number;\ndeclare var turnAxis: string;\n\n/**\n *   The setMoveThreshold() function is used to set the \n *   movement threshold for the deviceMoved() function. \n *   The default threshold is set to 0.5.\n *\n *   @param value The threshold value\n */\ndeclare function setMoveThreshold(value: number): void;\n\n/**\n *   The setShakeThreshold() function is used to set \n *   the movement threshold for the deviceShaken() \n *   function. The default threshold is set to 30.\n *\n *   @param value The threshold value\n */\ndeclare function setShakeThreshold(value: number): void;\n\n/**\n *   The deviceMoved() function is called when the \n *   device is moved by more than the threshold value \n *   along X, Y or Z axis. The default threshold is set \n *   to 0.5.\n *\n */\ndeclare function deviceMoved(): void;\n\n/**\n *   The deviceTurned() function is called when the \n *   device rotates by more than 90 degrees \n *   continuously.  The axis that triggers the \n *   deviceTurned() method is stored in the turnAxis \n *   variable. The deviceTurned() method can be locked \n *   to trigger on any axis: X, Y or Z by comparing the \n *   turnAxis variable to 'X', 'Y' or 'Z'.\n *\n */\ndeclare function deviceTurned(): void;\n\n/**\n *   The deviceShaken() function is called when the \n *   device total acceleration changes of accelerationX \n *   and accelerationY values is more than the \n *   threshold value. The default threshold is set to \n *   30.\n *\n */\ndeclare function deviceShaken(): void;\n\n// src/events/keyboard.js\n\n/**\n *   The boolean system variable keyIsPressed is true \n *   if any key is pressed and false if no keys are \n *   pressed.\n *\n */\ndeclare var keyIsPressed: boolean;\n\n/**\n *   The system variable key always contains the value \n *   of the most recent key on the keyboard that was \n *   typed. To get the proper capitalization, it is \n *   best to use it within keyTyped(). For non-ASCII \n *   keys, use the keyCode variable.\n *\n */\ndeclare var key: string;\n\n/**\n *   The variable keyCode is used to detect special \n *   keys such as BACKSPACE, DELETE, ENTER, RETURN, \n *   TAB, ESCAPE, SHIFT, CONTROL, OPTION, ALT, \n *   UP_ARROW, DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW. You \n *   can also check for custom keys by looking up the \n *   keyCode of any key on a site like this: \n *   keycode.info.\n *\n */\ndeclare var keyCode: number;\n\n/**\n *   The keyPressed() function is called once every \n *   time a key is pressed. The keyCode for the key \n *   that was pressed is stored in the keyCode \n *   variable.  For non-ASCII keys, use the keyCode \n *   variable. You can check if the keyCode equals \n *   BACKSPACE, DELETE, ENTER, RETURN, TAB, ESCAPE, \n *   SHIFT, CONTROL, OPTION, ALT, UP_ARROW, DOWN_ARROW, \n *   LEFT_ARROW, RIGHT_ARROW. \n * \n *  \n *   For ASCII keys that was pressed is stored in the \n *   key variable. However, it does not distinguish \n *   between uppercase and lowercase. For this reason, \n *   it is recommended to use keyTyped() to read the \n *   key variable, in which the case of the variable \n *   will be distinguished. \n * \n *  \n *   Because of how operating systems handle key \n *   repeats, holding down a key may cause multiple \n *   calls to keyTyped() (and keyReleased() as well). \n *   The rate of repeat is set by the operating system \n *   and how each computer is configured.\n * \n *  \n *   Browsers may have different default behaviors \n *   attached to various key events. To prevent any \n *   default behavior for this event, add \"return \n *   false\" to the end of the method.\n *\n */\ndeclare function keyPressed(): void;\n\n/**\n *   The keyReleased() function is called once every \n *   time a key is released. See key and keyCode for \n *   more information. Browsers may have different \n *   default behaviors attached to various key events. \n *   To prevent any default behavior for this event, \n *   add \"return false\" to the end of the method.\n *\n */\ndeclare function keyReleased(): void;\n\n/**\n *   The keyTyped() function is called once every time \n *   a key is pressed, but action keys such as Ctrl, \n *   Shift, and Alt are ignored. The most recent key \n *   pressed will be stored in the key variable.  \n *   Because of how operating systems handle key \n *   repeats, holding down a key will cause multiple \n *   calls to keyTyped() (and keyReleased() as well). \n *   The rate of repeat is set by the operating system \n *   and how each computer is configured.\n * \n *  \n *   Browsers may have different default behaviors \n *   attached to various key events. To prevent any \n *   default behavior for this event, add \"return \n *   false\" to the end of the method.\n *\n */\ndeclare function keyTyped(): void;\n\n/**\n *   The keyIsDown() function checks if the key is \n *   currently down, i.e. pressed. It can be used if \n *   you have an object that moves, and you want \n *   several keys to be able to affect its behaviour \n *   simultaneously, such as moving a sprite \n *   diagonally. You can put in any number representing \n *   the keyCode of the key, or use any of the variable \n *   keyCode names listed here.\n *\n *   @param code The key to check for.\n *   @return whether key is down or not\n */\ndeclare function keyIsDown(code: number): boolean;\n\n// src/events/mouse.js\n\n/**\n *   The system variable mouseX always contains the \n *   current horizontal position of the mouse, relative \n *   to (0, 0) of the canvas. If touch is used instead \n *   of mouse input, mouseX will hold the x value of \n *   the most recent touch point.\n *\n */\ndeclare var mouseX: number;\n\n/**\n *   The system variable mouseY always contains the \n *   current vertical position of the mouse, relative \n *   to (0, 0) of the canvas. If touch is used instead \n *   of mouse input, mouseY will hold the y value of \n *   the most recent touch point.\n *\n */\ndeclare var mouseY: number;\n\n/**\n *   The system variable pmouseX always contains the \n *   horizontal position of the mouse or finger in the \n *   frame previous to the current frame, relative to \n *   (0, 0) of the canvas.\n *\n */\ndeclare var pmouseX: number;\n\n/**\n *   The system variable pmouseY always contains the \n *   vertical position of the mouse or finger in the \n *   frame previous to the current frame, relative to \n *   (0, 0) of the canvas.\n *\n */\ndeclare var pmouseY: number;\n\n/**\n *   The system variable winMouseX always contains the \n *   current horizontal position of the mouse, relative \n *   to (0, 0) of the window.\n *\n */\ndeclare var winMouseX: number;\n\n/**\n *   The system variable winMouseY always contains the \n *   current vertical position of the mouse, relative \n *   to (0, 0) of the window.\n *\n */\ndeclare var winMouseY: number;\n\n/**\n *   The system variable pwinMouseX always contains the \n *   horizontal position of the mouse in the frame \n *   previous to the current frame, relative to (0, 0) \n *   of the window.\n *\n */\ndeclare var pwinMouseX: number;\n\n/**\n *   The system variable pwinMouseY always contains the \n *   vertical position of the mouse in the frame \n *   previous to the current frame, relative to (0, 0) \n *   of the window.\n *\n */\ndeclare var pwinMouseY: number;\n\n/**\n *   Processing automatically tracks if the mouse \n *   button is pressed and which button is pressed. The \n *   value of the system variable mouseButton is either \n *   LEFT, RIGHT, or CENTER depending on which button \n *   was pressed last. Warning: different browsers may \n *   track mouseButton differently.\n *\n */\ndeclare var mouseButton: any;\n\n/**\n *   The boolean system variable mouseIsPressed is true \n *   if the mouse is pressed and false if not.\n *\n */\ndeclare var mouseIsPressed: boolean;\n\n/**\n *   The mouseMoved() function is called every time the \n *   mouse moves and a mouse button is not pressed. \n *   Browsers may have different default behaviors \n *   attached to various mouse events. To prevent any \n *   default behavior for this event, add \"return \n *   false\" to the end of the method.\n *\n */\ndeclare function mouseMoved(): void;\n\n/**\n *   The mouseDragged() function is called once every \n *   time the mouse moves and a mouse button is \n *   pressed. If no mouseDragged() function is defined, \n *   the touchMoved() function will be called instead \n *   if it is defined. Browsers may have different \n *   default behaviors attached to various mouse \n *   events. To prevent any default behavior for this \n *   event, add \"return false\" to the end of the \n *   method.\n *\n */\ndeclare function mouseDragged(): void;\n\n/**\n *   The mousePressed() function is called once after \n *   every time a mouse button is pressed. The \n *   mouseButton variable (see the related reference \n *   entry) can be used to determine which button has \n *   been pressed. If no mousePressed() function is \n *   defined, the touchStarted() function will be \n *   called instead if it is defined. Browsers may have \n *   different default behaviors attached to various \n *   mouse events. To prevent any default behavior for \n *   this event, add \"return false\" to the end of the \n *   method.\n *\n */\ndeclare function mousePressed(): void;\n\n/**\n *   The mouseReleased() function is called every time \n *   a mouse button is released. If no mouseReleased() \n *   function is defined, the touchEnded() function \n *   will be called instead if it is defined. Browsers \n *   may have different default behaviors attached to \n *   various mouse events. To prevent any default \n *   behavior for this event, add \"return false\" to the \n *   end of the method.\n *\n */\ndeclare function mouseReleased(): void;\n\n/**\n *   The mouseClicked() function is called once after a \n *   mouse button has been pressed and then released. \n *   Browsers handle clicks differently, so this \n *   function is only guaranteed to be run when the \n *   left mouse button is clicked. To handle other \n *   mouse buttons being pressed or released, see \n *   mousePressed() or mouseReleased().\n * \n *  \n *   Browsers may have different default behaviors \n *   attached to various mouse events. To prevent any \n *   default behavior for this event, add \"return \n *   false\" to the end of the method.\n *\n */\ndeclare function mouseClicked(): void;\n\n/**\n *   The doubleClicked() function is executed every \n *   time a event listener has detected a dblclick \n *   event which is a part of the DOM L3 specification. \n *   The doubleClicked event is fired when a pointing \n *   device button (usually a mouse's primary button) \n *   is clicked twice on a single element. For more \n *   info on the dblclick event refer to mozilla's \n *   documentation here: \n *   https://developer.mozilla.org/en-US/docs/Web/Events/dblclick\n *\n */\ndeclare function doubleClicked(): void;\n\n/**\n *   The function mouseWheel() is executed every time a \n *   vertical mouse wheel event is detected either \n *   triggered by an actual mouse wheel or by a \n *   touchpad. The event.delta property returns the \n *   amount the mouse wheel have scrolled. The values \n *   can be positive or negative depending on the \n *   scroll direction (on OS X with \"natural\" scrolling \n *   enabled, the signs are inverted).\n * \n *  \n *   Browsers may have different default behaviors \n *   attached to various mouse events. To prevent any \n *   default behavior for this event, add \"return \n *   false\" to the end of the method.\n * \n *  \n *   Due to the current support of the \"wheel\" event on \n *   Safari, the function may only work as expected if \n *   \"return false\" is included while using Safari.\n *\n */\ndeclare function mouseWheel(): void;\n\n// src/events/touch.js\n\n/**\n *   The system variable touches[] contains an array of \n *   the positions of all current touch points, \n *   relative to (0, 0) of the canvas, and IDs \n *   identifying a unique touch as it moves. Each \n *   element in the array is an object with x, y, and \n *   id properties. The touches[] array is not \n *   supported on Safari and IE on touch-based desktops \n *   (laptops).\n *\n */\ndeclare var touches: object[];\n\n/**\n *   The touchStarted() function is called once after \n *   every time a touch is registered. If no \n *   touchStarted() function is defined, the \n *   mousePressed() function will be called instead if \n *   it is defined. Browsers may have different default \n *   behaviors attached to various touch events. To \n *   prevent any default behavior for this event, add \n *   \"return false\" to the end of the method.\n *\n */\ndeclare function touchStarted(): void;\n\n/**\n *   The touchMoved() function is called every time a \n *   touch move is registered. If no touchMoved() \n *   function is defined, the mouseDragged() function \n *   will be called instead if it is defined. Browsers \n *   may have different default behaviors attached to \n *   various touch events. To prevent any default \n *   behavior for this event, add \"return false\" to the \n *   end of the method.\n *\n */\ndeclare function touchMoved(): void;\n\n/**\n *   The touchEnded() function is called every time a \n *   touch ends. If no touchEnded() function is \n *   defined, the mouseReleased() function will be \n *   called instead if it is defined. Browsers may have \n *   different default behaviors attached to various \n *   touch events. To prevent any default behavior for \n *   this event, add \"return false\" to the end of the \n *   method.\n *\n */\ndeclare function touchEnded(): void;\n\n// src/image/image.js\n\n/**\n *   Creates a new p5.Image (the datatype for storing \n *   images). This provides a fresh buffer of pixels to \n *   play with. Set the size of the buffer with the \n *   width and height parameters.  .pixels gives access \n *   to an array containing the values for all the \n *   pixels in the display window. These values are \n *   numbers. This array is the size (including an \n *   appropriate factor for the pixelDensity) of the \n *   display window x4, representing the R, G, B, A \n *   values in order for each pixel, moving from left \n *   to right across each row, then down each column. \n *   See .pixels for more info. It may also be simpler \n *   to use set() or get(). \n * \n *  \n *   Before accessing the pixels of an image, the data \n *   must loaded with the loadPixels() function. After \n *   the array data has been modified, the \n *   updatePixels() function must be run to update the \n *   changes.\n *\n *   @param width width in pixels\n *   @param height height in pixels\n *   @return the p5.Image object\n */\ndeclare function createImage(width: number, height: number): p5.Image;\n\n/**\n *   Save the current canvas as an image. In Safari, \n *   this will open the image in the window and the \n *   user must provide their own filename on save-as. \n *   Other browsers will either save the file \n *   immediately, or prompt the user with a dialogue \n *   window.\n *\n *   @param selectedCanvas a variable representing a \n *   specific html5 canvas (optional)\n *   @param [extension] 'jpg' or 'png'\n */\ndeclare function saveCanvas(selectedCanvas: p5.Element|HTMLCanvasElement, filename?: string, extension?: string): void;\n\n/**\n *   Save the current canvas as an image. In Safari, \n *   this will open the image in the window and the \n *   user must provide their own filename on save-as. \n *   Other browsers will either save the file \n *   immediately, or prompt the user with a dialogue \n *   window.\n *\n *   @param [extension] 'jpg' or 'png'\n */\ndeclare function saveCanvas(filename?: string, extension?: string): void;\n\n/**\n *   Capture a sequence of frames that can be used to \n *   create a movie. Accepts a callback. For example, \n *   you may wish to send the frames to a server where \n *   they can be stored or converted into a movie. If \n *   no callback is provided, the browser will pop up \n *   save dialogues in an attempt to download all of \n *   the images that have just been created. With the \n *   callback provided the image data isn't saved by \n *   default but instead passed as an argument to the \n *   callback function as an array of objects, with the \n *   size of array equal to the total number of frames. \n *   Note that saveFrames() will only save the first 15 \n *   frames of an animation. To export longer \n *   animations, you might look into a library like \n *   ccapture.js.\n *\n *   @param extension 'jpg' or 'png'\n *   @param duration Duration in seconds to save the \n *   frames for.\n *   @param framerate Framerate to save the frames in.\n *   @param [callback] A callback function that will be \n *   executed to handle the image data. This function \n *   should accept an array as argument. The array will \n *   contain the specified number of frames of objects. \n *   Each object has three properties: imageData - an \n *   image/octet-stream, filename and extension.\n */\ndeclare function saveFrames(filename: string, extension: string, duration: number, framerate: number, callback?: (p1: any[]) => any): void;\n\n// src/image/loading_displaying.js\n\n/**\n *   Loads an image from a path and creates a p5.Image \n *   from it.  The image may not be immediately \n *   available for rendering If you want to ensure that \n *   the image is ready before doing anything with it, \n *   place the loadImage() call in preload(). You may \n *   also supply a callback function to handle the \n *   image when it's ready. \n * \n *  \n *   The path to the image should be relative to the \n *   HTML file that links in your sketch. Loading an \n *   image from a URL or other remote location may be \n *   blocked due to your browser's built-in security.\n *\n *   @param path Path of the image to be loaded\n *   @param [successCallback] Function to be called \n *   once the image is loaded. Will be passed the \n *   p5.Image.\n *   @param [failureCallback] called with event error \n *   if the image fails to load.\n *   @return the p5.Image object\n */\ndeclare function loadImage(path: string, successCallback?: (p1: p5.Image) => any, failureCallback?: (p1: Event) => any): p5.Image;\n\n/**\n *   Draw an image to the p5.js canvas. This function \n *   can be used with different numbers of parameters. \n *   The simplest use requires only three parameters: \n *   img, x, and y—where (x, y) is the position of the \n *   image. Two more parameters can optionally be added \n *   to specify the width and height of the image. \n * \n *   This function can also be used with all eight \n *   Number parameters. To differentiate between all \n *   these parameters, p5.js uses the language of \n *   \"destination rectangle\" (which corresponds to \n *   \"dx\", \"dy\", etc.) and \"source image\" (which \n *   corresponds to \"sx\", \"sy\", etc.) below. Specifying \n *   the \"source image\" dimensions can be useful when \n *   you want to display a subsection of the source \n *   image instead of the whole thing. Here's a diagram \n *   to explain further:\n *\n *   @param img the image to display\n *   @param x the x-coordinate of the top-left corner \n *   of the image\n *   @param y the y-coordinate of the top-left corner \n *   of the image\n *   @param [width] the width to draw the image\n *   @param [height] the height to draw the image\n */\ndeclare function image(img: p5.Image|p5.Element, x: number, y: number, width?: number, height?: number): void;\n\n/**\n *   Draw an image to the p5.js canvas. This function \n *   can be used with different numbers of parameters. \n *   The simplest use requires only three parameters: \n *   img, x, and y—where (x, y) is the position of the \n *   image. Two more parameters can optionally be added \n *   to specify the width and height of the image. \n * \n *   This function can also be used with all eight \n *   Number parameters. To differentiate between all \n *   these parameters, p5.js uses the language of \n *   \"destination rectangle\" (which corresponds to \n *   \"dx\", \"dy\", etc.) and \"source image\" (which \n *   corresponds to \"sx\", \"sy\", etc.) below. Specifying \n *   the \"source image\" dimensions can be useful when \n *   you want to display a subsection of the source \n *   image instead of the whole thing. Here's a diagram \n *   to explain further:\n *\n *   @param img the image to display\n *   @param dx the x-coordinate of the destination \n *   rectangle in which to draw the source image\n *   @param dy the y-coordinate of the destination \n *   rectangle in which to draw the source image\n *   @param dWidth the width of the destination \n *   rectangle\n *   @param dHeight the height of the destination \n *   rectangle\n *   @param sx the x-coordinate of the subsection of \n *   the source image to draw into the destination \n *   rectangle\n *   @param sy the y-coordinate of the subsection of \n *   the source image to draw into the destination \n *   rectangle\n *   @param [sWidth] the width of the subsection of the \n *   source image to draw into the destination \n *   rectangle\n *   @param [sHeight] the height of the subsection of \n *   the source image to draw into the destination \n *   rectangle\n */\ndeclare function image(img: p5.Image|p5.Element, dx: number, dy: number, dWidth: number, dHeight: number, sx: number, sy: number, sWidth?: number, sHeight?: number): void;\n\n/**\n *   Sets the fill value for displaying images. Images \n *   can be tinted to specified colors or made \n *   transparent by including an alpha value.  To apply \n *   transparency to an image without affecting its \n *   color, use white as the tint color and specify an \n *   alpha value. For instance, tint(255, 128) will \n *   make an image 50% transparent (assuming the \n *   default alpha range of 0-255, which can be changed \n *   with colorMode()). \n * \n *  \n *   The value for the gray parameter must be less than \n *   or equal to the current maximum value as specified \n *   by colorMode(). The default maximum value is 255.\n *\n *   @param v1 red or hue value relative to the current \n *   color range\n *   @param v2 green or saturation value relative to \n *   the current color range\n *   @param v3 blue or brightness value relative to the \n *   current color range\n */\ndeclare function tint(v1: number, v2: number, v3: number, alpha?: number): void;\n\n/**\n *   Sets the fill value for displaying images. Images \n *   can be tinted to specified colors or made \n *   transparent by including an alpha value.  To apply \n *   transparency to an image without affecting its \n *   color, use white as the tint color and specify an \n *   alpha value. For instance, tint(255, 128) will \n *   make an image 50% transparent (assuming the \n *   default alpha range of 0-255, which can be changed \n *   with colorMode()). \n * \n *  \n *   The value for the gray parameter must be less than \n *   or equal to the current maximum value as specified \n *   by colorMode(). The default maximum value is 255.\n *\n *   @param value a color string\n */\ndeclare function tint(value: string): void;\n\n/**\n *   Sets the fill value for displaying images. Images \n *   can be tinted to specified colors or made \n *   transparent by including an alpha value.  To apply \n *   transparency to an image without affecting its \n *   color, use white as the tint color and specify an \n *   alpha value. For instance, tint(255, 128) will \n *   make an image 50% transparent (assuming the \n *   default alpha range of 0-255, which can be changed \n *   with colorMode()). \n * \n *  \n *   The value for the gray parameter must be less than \n *   or equal to the current maximum value as specified \n *   by colorMode(). The default maximum value is 255.\n *\n *   @param gray a gray value\n */\ndeclare function tint(gray: number, alpha?: number): void;\n\n/**\n *   Sets the fill value for displaying images. Images \n *   can be tinted to specified colors or made \n *   transparent by including an alpha value.  To apply \n *   transparency to an image without affecting its \n *   color, use white as the tint color and specify an \n *   alpha value. For instance, tint(255, 128) will \n *   make an image 50% transparent (assuming the \n *   default alpha range of 0-255, which can be changed \n *   with colorMode()). \n * \n *  \n *   The value for the gray parameter must be less than \n *   or equal to the current maximum value as specified \n *   by colorMode(). The default maximum value is 255.\n *\n *   @param values an array containing the \n *   red,green,blue & and alpha components of the color\n */\ndeclare function tint(values: number[]): void;\n\n/**\n *   Sets the fill value for displaying images. Images \n *   can be tinted to specified colors or made \n *   transparent by including an alpha value.  To apply \n *   transparency to an image without affecting its \n *   color, use white as the tint color and specify an \n *   alpha value. For instance, tint(255, 128) will \n *   make an image 50% transparent (assuming the \n *   default alpha range of 0-255, which can be changed \n *   with colorMode()). \n * \n *  \n *   The value for the gray parameter must be less than \n *   or equal to the current maximum value as specified \n *   by colorMode(). The default maximum value is 255.\n *\n *   @param color the tint color\n */\ndeclare function tint(color: p5.Color): void;\n\n/**\n *   Removes the current fill value for displaying \n *   images and reverts to displaying images with their \n *   original hues.\n *\n */\ndeclare function noTint(): void;\n\n/**\n *   Set image mode. Modifies the location from which \n *   images are drawn by changing the way in which \n *   parameters given to image() are interpreted. The \n *   default mode is imageMode(CORNER), which \n *   interprets the second and third parameters of \n *   image() as the upper-left corner of the image. If \n *   two additional parameters are specified, they are \n *   used to set the image's width and height.  \n *   imageMode(CORNERS) interprets the second and third \n *   parameters of image() as the location of one \n *   corner, and the fourth and fifth parameters as the \n *   opposite corner. \n * \n *  \n *   imageMode(CENTER) interprets the second and third \n *   parameters of image() as the image's center point. \n *   If two additional parameters are specified, they \n *   are used to set the image's width and height.\n *\n *   @param mode either CORNER, CORNERS, or CENTER\n */\ndeclare function imageMode(mode: IMAGE_MODE): void;\n\n// src/image/pixels.js\n\n/**\n *   Uint8ClampedArray containing the values for all \n *   the pixels in the display window. These values are \n *   numbers. This array is the size (include an \n *   appropriate factor for pixelDensity) of the \n *   display window x4, representing the R, G, B, A \n *   values in order for each pixel, moving from left \n *   to right across each row, then down each column. \n *   Retina and other high density displays will have \n *   more pixels[] (by a factor of pixelDensity^2). For \n *   example, if the image is 100x100 pixels, there \n *   will be 40,000. On a retina display, there will be \n *   160,000.  The first four values (indices 0-3) in \n *   the array will be the R, G, B, A values of the \n *   pixel at (0, 0). The second four values (indices \n *   4-7) will contain the R, G, B, A values of the \n *   pixel at (1, 0). More generally, to set values for \n *   a pixel at (x, y): \n * \n *   var d = pixelDensity(); for (var i = 0; i < d; \n *   i++) { for (var j = 0; j < d; j++) { // loop over \n *   idx = 4 * ((y * d + j) * width * d + (x * d + i)); \n *   pixels[idx] = r; pixels[idx+1] = g; pixels[idx+2] \n *   = b; pixels[idx+3] = a; } }  \n * \n *   While the above method is complex, it is flexible \n *   enough to work with any pixelDensity. Note that \n *   set() will automatically take care of setting all \n *   the appropriate values in pixels[] for a given (x, \n *   y) at any pixelDensity, but the performance may \n *   not be as fast when lots of modifications are made \n *   to the pixel array. \n * \n *  \n *   Before accessing this array, the data must loaded \n *   with the loadPixels() function. After the array \n *   data has been modified, the updatePixels() \n *   function must be run to update the changes. \n * \n *  \n *   Note that this is not a standard javascript array. \n *   This means that standard javascript functions such \n *   as slice() or arrayCopy() do not work.\n *\n */\ndeclare var pixels: number[];\n\n/**\n *   Copies a region of pixels from one image to \n *   another, using a specified blend mode to do the \n *   operation.\n *\n *   @param srcImage source image\n *   @param sx X coordinate of the source's upper left \n *   corner\n *   @param sy Y coordinate of the source's upper left \n *   corner\n *   @param sw source image width\n *   @param sh source image height\n *   @param dx X coordinate of the destination's upper \n *   left corner\n *   @param dy Y coordinate of the destination's upper \n *   left corner\n *   @param dw destination image width\n *   @param dh destination image height\n *   @param blendMode the blend mode. either BLEND, \n *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n */\ndeclare function blend(srcImage: p5.Image, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number, blendMode: BLEND_MODE): void;\n\n/**\n *   Copies a region of pixels from one image to \n *   another, using a specified blend mode to do the \n *   operation.\n *\n *   @param sx X coordinate of the source's upper left \n *   corner\n *   @param sy Y coordinate of the source's upper left \n *   corner\n *   @param sw source image width\n *   @param sh source image height\n *   @param dx X coordinate of the destination's upper \n *   left corner\n *   @param dy Y coordinate of the destination's upper \n *   left corner\n *   @param dw destination image width\n *   @param dh destination image height\n *   @param blendMode the blend mode. either BLEND, \n *   DARKEST, LIGHTEST, DIFFERENCE, MULTIPLY, \n *   EXCLUSION, SCREEN, REPLACE, OVERLAY, HARD_LIGHT, \n *   SOFT_LIGHT, DODGE, BURN, ADD or NORMAL.\n */\ndeclare function blend(sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number, blendMode: any): void;\n\n/**\n *   Copies a region of the canvas to another region of \n *   the canvas and copies a region of pixels from an \n *   image used as the srcImg parameter into the canvas \n *   srcImage is specified this is used as the source. \n *   If the source and destination regions aren't the \n *   same size, it will automatically resize source \n *   pixels to fit the specified target region.\n *\n *   @param srcImage source image\n *   @param sx X coordinate of the source's upper left \n *   corner\n *   @param sy Y coordinate of the source's upper left \n *   corner\n *   @param sw source image width\n *   @param sh source image height\n *   @param dx X coordinate of the destination's upper \n *   left corner\n *   @param dy Y coordinate of the destination's upper \n *   left corner\n *   @param dw destination image width\n *   @param dh destination image height\n */\ndeclare function copy(srcImage: p5.Image|p5.Element, sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;\n\n/**\n *   Copies a region of the canvas to another region of \n *   the canvas and copies a region of pixels from an \n *   image used as the srcImg parameter into the canvas \n *   srcImage is specified this is used as the source. \n *   If the source and destination regions aren't the \n *   same size, it will automatically resize source \n *   pixels to fit the specified target region.\n *\n *   @param sx X coordinate of the source's upper left \n *   corner\n *   @param sy Y coordinate of the source's upper left \n *   corner\n *   @param sw source image width\n *   @param sh source image height\n *   @param dx X coordinate of the destination's upper \n *   left corner\n *   @param dy Y coordinate of the destination's upper \n *   left corner\n *   @param dw destination image width\n *   @param dh destination image height\n */\ndeclare function copy(sx: number, sy: number, sw: number, sh: number, dx: number, dy: number, dw: number, dh: number): void;\n\n/**\n *   Applies a filter to the canvas.  \n * \n *   The presets options are: \n * \n *  \n * \n *   THRESHOLD Converts the image to black and white \n *   pixels depending if they are above or below the \n *   threshold defined by the level parameter. The \n *   parameter must be between 0.0 (black) and 1.0 \n *   (white). If no level is specified, 0.5 is used. \n * \n *  \n * \n *   GRAY Converts any colors in the image to grayscale \n *   equivalents. No parameter is used. \n * \n *  \n * \n *   OPAQUE Sets the alpha channel to entirely opaque. \n *   No parameter is used. \n * \n *  \n * \n *   INVERT Sets each pixel to its inverse value. No \n *   parameter is used. \n * \n *  \n * \n *   POSTERIZE Limits each channel of the image to the \n *   number of colors specified as the parameter. The \n *   parameter can be set to values between 2 and 255, \n *   but results are most noticeable in the lower \n *   ranges. \n * \n *  \n * \n *   BLUR Executes a Gaussian blur with the level \n *   parameter specifying the extent of the blurring. \n *   If no parameter is used, the blur is equivalent to \n *   Gaussian blur of radius 1. Larger values increase \n *   the blur. \n * \n *  \n * \n *   ERODE Reduces the light areas. No parameter is \n *   used. \n * \n *  \n * \n *   DILATE Increases the light areas. No parameter is \n *   used.\n *\n *   @param filterType either THRESHOLD, GRAY, OPAQUE, \n *   INVERT, POSTERIZE, BLUR, ERODE, DILATE or BLUR. \n *   See Filters.js for docs on each available filter\n *   @param [filterParam] an optional parameter unique \n *   to each filter, see above\n */\ndeclare function filter(filterType: FILTER_TYPE, filterParam?: number): void;\n\n/**\n *   Returns an array of [R,G,B,A] values for any pixel \n *   or grabs a section of an image. If no parameters \n *   are specified, the entire image is returned. Use \n *   the x and y parameters to get the value of one \n *   pixel. Get a section of the display window by \n *   specifying additional w and h parameters. When \n *   getting an image, the x and y parameters define \n *   the coordinates for the upper-left corner of the \n *   image, regardless of the current imageMode().  If \n *   the pixel requested is outside of the image \n *   window, [0,0,0,255] is returned. To get the \n *   numbers scaled according to the current color \n *   ranges and taking into account colorMode, use \n *   getColor instead of get. \n * \n *  \n *   Getting the color of a single pixel with get(x, y) \n *   is easy, but not as fast as grabbing the data \n *   directly from pixels[]. The equivalent statement \n *   to get(x, y) using pixels[] with pixel density d \n *   is  var x, y, d; // set these to the coordinates \n *   var off = (y  width + x)  d * 4; var components = \n *   [ pixels[off], pixels[off + 1], pixels[off + 2], \n *   pixels[off + 3] ]; print(components);  \n * \n *  \n *   See the reference for pixels[] for more \n *   information.\n *\n *   @param [x] x-coordinate of the pixel\n *   @param [y] y-coordinate of the pixel\n *   @param [w] width\n *   @param [h] height\n *   @return values of pixel at x,y in array format [R, \n *   G, B, A] or p5.Image\n */\ndeclare function get(x?: number, y?: number, w?: number, h?: number): number[]|p5.Image;\n\n/**\n *   Loads the pixel data for the display window into \n *   the pixels[] array. This function must always be \n *   called before reading from or writing to pixels[]. \n *   Note that only changes made with set() or direct \n *   manipulation of pixels[] will occur.\n *\n */\ndeclare function loadPixels(): void;\n\n/**\n *   Changes the color of any pixel, or writes an image \n *   directly to the display window. The x and y \n *   parameters specify the pixel to change and the c \n *   parameter specifies the color value. This can be a \n *   p5.Color object, or [R, G, B, A] pixel array. It \n *   can also be a single grayscale value. When setting \n *   an image, the x and y parameters define the \n *   coordinates for the upper-left corner of the \n *   image, regardless of the current imageMode().  \n * \n *  \n *   After using set(), you must call updatePixels() \n *   for your changes to appear. This should be called \n *   once all pixels have been set, and must be called \n *   before calling .get() or drawing the image.  \n * \n *   Setting the color of a single pixel with set(x, y) \n *   is easy, but not as fast as putting the data \n *   directly into pixels[]. Setting the pixels[] \n *   values directly may be complicated when working \n *   with a retina display, but will perform better \n *   when lots of pixels need to be set directly on \n *   every loop. \n * \n *   See the reference for pixels[] for more \n *   information.\n *\n *   @param x x-coordinate of the pixel\n *   @param y y-coordinate of the pixel\n *   @param c insert a grayscale value | a pixel array \n *   | a p5.Color object | a p5.Image to copy\n */\ndeclare function set(x: number, y: number, c: number|number[]|object): void;\n\n/**\n *   Updates the display window with the data in the \n *   pixels[] array. Use in conjunction with \n *   loadPixels(). If you're only reading pixels from \n *   the array, there's no need to call updatePixels() \n *   — updating is only necessary to apply changes. \n *   updatePixels() should be called anytime the pixels \n *   array is manipulated or set() is called, and only \n *   changes made with set() or direct changes to \n *   pixels[] will occur.\n *\n *   @param [x] x-coordinate of the upper-left corner \n *   of region to update\n *   @param [y] y-coordinate of the upper-left corner \n *   of region to update\n *   @param [w] width of region to update\n *   @param [h] height of region to update\n */\ndeclare function updatePixels(x?: number, y?: number, w?: number, h?: number): void;\n\n// src/io/files.js\n\n/**\n *   Loads a JSON file from a file or a URL, and \n *   returns an Object. Note that even if the JSON file \n *   contains an Array, an Object will be returned with \n *   index numbers as keys. This method is \n *   asynchronous, meaning it may not finish before the \n *   next line in your sketch is executed. JSONP is \n *   supported via a polyfill and you can pass in as \n *   the second argument an object with definitions of \n *   the json callback following the syntax specified \n *   here.\n *\n *   @param path name of the file or url to load\n *   @param [jsonpOptions] options object for jsonp \n *   related settings\n *   @param [datatype] \"json\" or \"jsonp\"\n *   @param [callback] function to be executed after \n *   loadJSON() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n *   @return JSON data\n */\ndeclare function loadJSON(path: string, jsonpOptions?: object, datatype?: string, callback?: Function, errorCallback?: Function): object|any[];\n\n/**\n *   Loads a JSON file from a file or a URL, and \n *   returns an Object. Note that even if the JSON file \n *   contains an Array, an Object will be returned with \n *   index numbers as keys. This method is \n *   asynchronous, meaning it may not finish before the \n *   next line in your sketch is executed. JSONP is \n *   supported via a polyfill and you can pass in as \n *   the second argument an object with definitions of \n *   the json callback following the syntax specified \n *   here.\n *\n *   @param path name of the file or url to load\n *   @param datatype \"json\" or \"jsonp\"\n *   @param [callback] function to be executed after \n *   loadJSON() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function loadJSON(path: string, datatype: string, callback?: Function, errorCallback?: Function): object|any[];\n\n/**\n *   Loads a JSON file from a file or a URL, and \n *   returns an Object. Note that even if the JSON file \n *   contains an Array, an Object will be returned with \n *   index numbers as keys. This method is \n *   asynchronous, meaning it may not finish before the \n *   next line in your sketch is executed. JSONP is \n *   supported via a polyfill and you can pass in as \n *   the second argument an object with definitions of \n *   the json callback following the syntax specified \n *   here.\n *\n *   @param path name of the file or url to load\n *   @param callback function to be executed after \n *   loadJSON() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function loadJSON(path: string, callback: Function, errorCallback?: Function): object|any[];\n\n/**\n *   Reads the contents of a file and creates a String \n *   array of its individual lines. If the name of the \n *   file is used as the parameter, as in the above \n *   example, the file must be located in the sketch \n *   directory/folder.  Alternatively, the file maybe \n *   be loaded from anywhere on the local computer \n *   using an absolute path (something that starts with \n *   / on Unix and Linux, or a drive letter on \n *   Windows), or the filename parameter can be a URL \n *   for a file found on a network. \n * \n *  \n *   This method is asynchronous, meaning it may not \n *   finish before the next line in your sketch is \n *   executed.\n *\n *   @param filename name of the file or url to load\n *   @param [callback] function to be executed after \n *   loadStrings() completes, Array is passed in as \n *   first argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n *   @return Array of Strings\n */\ndeclare function loadStrings(filename: string, callback?: Function, errorCallback?: Function): string[];\n\n/**\n *   Reads the contents of a file or URL and creates a \n *   p5.Table object with its values. If a file is \n *   specified, it must be located in the sketch's \n *   \"data\" folder. The filename parameter can also be \n *   a URL to a file found online. By default, the file \n *   is assumed to be comma-separated (in CSV format). \n *   Table only looks for a header row if the 'header' \n *   option is included. Possible options include: \n * \n *   - csv - parse the table as comma-separated values\n *   - tsv - parse the table as tab-separated values\n *   - header - this table has a header (title) row  \n * \n *   When passing in multiple options, pass them in as \n *   separate parameters, seperated by commas. For \n *   example: \n * \n *   \n *   loadTable('my_csv_file.csv', 'csv', 'header');   \n * \n *  \n *   All files loaded and saved use UTF-8 encoding. \n * \n *   This method is asynchronous, meaning it may not \n *   finish before the next line in your sketch is \n *   executed. Calling loadTable() inside preload() \n *   guarantees to complete the operation before \n *   setup() and draw() are called. \n * \n *   Outside of preload(), you may supply a callback \n *   function to handle the object:\n *\n *   @param filename name of the file or URL to load\n *   @param options \"header\" \"csv\" \"tsv\"\n *   @param [callback] function to be executed after \n *   loadTable() completes. On success, the Table \n *   object is passed in as the first argument.\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n *   @return Table object containing data\n */\ndeclare function loadTable(filename: string, options: string, callback?: Function, errorCallback?: Function): object;\n\n/**\n *   Reads the contents of a file or URL and creates a \n *   p5.Table object with its values. If a file is \n *   specified, it must be located in the sketch's \n *   \"data\" folder. The filename parameter can also be \n *   a URL to a file found online. By default, the file \n *   is assumed to be comma-separated (in CSV format). \n *   Table only looks for a header row if the 'header' \n *   option is included. Possible options include: \n * \n *   - csv - parse the table as comma-separated values\n *   - tsv - parse the table as tab-separated values\n *   - header - this table has a header (title) row  \n * \n *   When passing in multiple options, pass them in as \n *   separate parameters, seperated by commas. For \n *   example: \n * \n *   \n *   loadTable('my_csv_file.csv', 'csv', 'header');   \n * \n *  \n *   All files loaded and saved use UTF-8 encoding. \n * \n *   This method is asynchronous, meaning it may not \n *   finish before the next line in your sketch is \n *   executed. Calling loadTable() inside preload() \n *   guarantees to complete the operation before \n *   setup() and draw() are called. \n * \n *   Outside of preload(), you may supply a callback \n *   function to handle the object:\n *\n *   @param filename name of the file or URL to load\n *   @param [callback] function to be executed after \n *   loadTable() completes. On success, the Table \n *   object is passed in as the first argument.\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function loadTable(filename: string, callback?: Function, errorCallback?: Function): object;\n\n/**\n *   Reads the contents of a file and creates an XML \n *   object with its values. If the name of the file is \n *   used as the parameter, as in the above example, \n *   the file must be located in the sketch \n *   directory/folder. Alternatively, the file maybe be \n *   loaded from anywhere on the local computer using \n *   an absolute path (something that starts with / on \n *   Unix and Linux, or a drive letter on Windows), or \n *   the filename parameter can be a URL for a file \n *   found on a network. \n * \n *   This method is asynchronous, meaning it may not \n *   finish before the next line in your sketch is \n *   executed. Calling loadXML() inside preload() \n *   guarantees to complete the operation before \n *   setup() and draw() are called. \n * \n *   Outside of preload(), you may supply a callback \n *   function to handle the object.\n *\n *   @param filename name of the file or URL to load\n *   @param [callback] function to be executed after \n *   loadXML() completes, XML object is passed in as \n *   first argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n *   @return XML object containing data\n */\ndeclare function loadXML(filename: string, callback?: Function, errorCallback?: Function): object;\ndeclare function loadBytes(file: string, callback?: Function, errorCallback?: Function): object;\n\n/**\n *   Method for executing an HTTP GET request. If data \n *   type is not specified, p5 will try to guess based \n *   on the URL, defaulting to text. This is equivalent \n *   to calling httpDo(path, 'GET'). The 'binary' \n *   datatype will return a Blob object, and the \n *   'arrayBuffer' datatype will return an ArrayBuffer \n *   which can be used to initialize typed arrays (such \n *   as Uint8Array).\n *\n *   @param path name of the file or url to load\n *   @param [datatype] \"json\", \"jsonp\", \"binary\", \n *   \"arrayBuffer\", \"xml\", or \"text\"\n *   @param [data] param data passed sent with request\n *   @param [callback] function to be executed after \n *   httpGet() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpGet(path: string, datatype?: string, data?: object|boolean, callback?: Function, errorCallback?: Function): void;\n\n/**\n *   Method for executing an HTTP GET request. If data \n *   type is not specified, p5 will try to guess based \n *   on the URL, defaulting to text. This is equivalent \n *   to calling httpDo(path, 'GET'). The 'binary' \n *   datatype will return a Blob object, and the \n *   'arrayBuffer' datatype will return an ArrayBuffer \n *   which can be used to initialize typed arrays (such \n *   as Uint8Array).\n *\n *   @param path name of the file or url to load\n *   @param data param data passed sent with request\n *   @param [callback] function to be executed after \n *   httpGet() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpGet(path: string, data: object|boolean, callback?: Function, errorCallback?: Function): void;\n\n/**\n *   Method for executing an HTTP GET request. If data \n *   type is not specified, p5 will try to guess based \n *   on the URL, defaulting to text. This is equivalent \n *   to calling httpDo(path, 'GET'). The 'binary' \n *   datatype will return a Blob object, and the \n *   'arrayBuffer' datatype will return an ArrayBuffer \n *   which can be used to initialize typed arrays (such \n *   as Uint8Array).\n *\n *   @param path name of the file or url to load\n *   @param callback function to be executed after \n *   httpGet() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpGet(path: string, callback: Function, errorCallback?: Function): void;\n\n/**\n *   Method for executing an HTTP POST request. If data \n *   type is not specified, p5 will try to guess based \n *   on the URL, defaulting to text. This is equivalent \n *   to calling httpDo(path, 'POST').\n *\n *   @param path name of the file or url to load\n *   @param [datatype] \"json\", \"jsonp\", \"xml\", or \n *   \"text\". If omitted, httpPost() will guess.\n *   @param [data] param data passed sent with request\n *   @param [callback] function to be executed after \n *   httpPost() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpPost(path: string, datatype?: string, data?: object|boolean, callback?: Function, errorCallback?: Function): void;\n\n/**\n *   Method for executing an HTTP POST request. If data \n *   type is not specified, p5 will try to guess based \n *   on the URL, defaulting to text. This is equivalent \n *   to calling httpDo(path, 'POST').\n *\n *   @param path name of the file or url to load\n *   @param data param data passed sent with request\n *   @param [callback] function to be executed after \n *   httpPost() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpPost(path: string, data: object|boolean, callback?: Function, errorCallback?: Function): void;\n\n/**\n *   Method for executing an HTTP POST request. If data \n *   type is not specified, p5 will try to guess based \n *   on the URL, defaulting to text. This is equivalent \n *   to calling httpDo(path, 'POST').\n *\n *   @param path name of the file or url to load\n *   @param callback function to be executed after \n *   httpPost() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpPost(path: string, callback: Function, errorCallback?: Function): void;\n\n/**\n *   Method for executing an HTTP request. If data type \n *   is not specified, p5 will try to guess based on \n *   the URL, defaulting to text. For more advanced \n *   use, you may also pass in the path as the first \n *   argument and a object as the second argument, the \n *   signature follows the one specified in the Fetch \n *   API specification.\n *\n *   @param path name of the file or url to load\n *   @param [method] either \"GET\", \"POST\", or \"PUT\", \n *   defaults to \"GET\"\n *   @param [datatype] \"json\", \"jsonp\", \"xml\", or \n *   \"text\"\n *   @param [data] param data passed sent with request\n *   @param [callback] function to be executed after \n *   httpGet() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpDo(path: string, method?: string, datatype?: string, data?: object, callback?: Function, errorCallback?: Function): void;\n\n/**\n *   Method for executing an HTTP request. If data type \n *   is not specified, p5 will try to guess based on \n *   the URL, defaulting to text. For more advanced \n *   use, you may also pass in the path as the first \n *   argument and a object as the second argument, the \n *   signature follows the one specified in the Fetch \n *   API specification.\n *\n *   @param path name of the file or url to load\n *   @param options Request object options as \n *   documented in the \"fetch\" API reference\n *   @param [callback] function to be executed after \n *   httpGet() completes, data is passed in as first \n *   argument\n *   @param [errorCallback] function to be executed if \n *   there is an error, response is passed in as first \n *   argument\n */\ndeclare function httpDo(path: string, options: object, callback?: Function, errorCallback?: Function): void;\ndeclare function createWriter(name: string, extension?: string): p5.PrintWriter;\n\n/**\n *   Save an image, text, json, csv, wav, or html. \n *   Prompts download to the client's computer. Note \n *   that it is not recommended to call save() within \n *   draw if it's looping, as the save() function will \n *   open a new save dialog every frame. The default \n *   behavior is to save the canvas as an image. You \n *   can optionally specify a filename. For example: \n * \n *  \n *   save(); save('myCanvas.jpg'); // save a specific \n *   canvas with a filename  \n * \n *   Alternately, the first parameter can be a pointer \n *   to a canvas p5.Element, an Array of Strings, an \n *   Array of JSON, a JSON object, a p5.Table, a \n *   p5.Image, or a p5.SoundFile (requires p5.sound). \n *   The second parameter is a filename (including \n *   extension). The third parameter is for options \n *   specific to this type of object. This method will \n *   save a file that fits the given paramaters. For \n *   example: \n * \n *  \n *   // Saves canvas as an image save('myCanvas.jpg'); \n *   // Saves pImage as a png image var img = \n *   createImage(10, 10); save(img, 'my.png'); // Saves \n *   canvas as an image var cnv = createCanvas(100, \n *   100); save(cnv, 'myCanvas.jpg'); // Saves \n *   p5.Renderer object as an image var gb = \n *   createGraphics(100, 100); save(gb, \n *   'myGraphics.jpg'); var myTable = new p5.Table(); \n *   // Saves table as html file save(myTable, \n *   'myTable.html'); // Comma Separated Values \n *   save(myTable, 'myTable.csv'); // Tab Separated \n *   Values save(myTable, 'myTable.tsv'); var myJSON = \n *   { a: 1, b: true }; // Saves pretty JSON \n *   save(myJSON, 'my.json'); // Optimizes JSON \n *   filesize save(myJSON, 'my.json', true); // Saves \n *   array of strings to a text file with line breaks \n *   after each item var arrayOfStrings = ['a', 'b']; \n *   save(arrayOfStrings, 'my.txt');\n *\n *   @param [objectOrFilename] If filename is provided, \n *   will save canvas as an image with either png or \n *   jpg extension depending on the filename. If object \n *   is provided, will save depending on the object and \n *   filename (see examples above).\n *   @param [filename] If an object is provided as the \n *   first parameter, then the second parameter \n *   indicates the filename, and should include an \n *   appropriate file extension (see examples above).\n *   @param [options] Additional options depend on \n *   filetype. For example, when saving JSON, true \n *   indicates that the output will be optimized for \n *   filesize, rather than readability.\n */\ndeclare function save(objectOrFilename?: object|string, filename?: string, options?: boolean|string): void;\n\n/**\n *   Writes the contents of an Array or a JSON object \n *   to a .json file. The file saving process and \n *   location of the saved file will vary between web \n *   browsers.\n *\n *   @param [optimize] If true, removes line breaks and \n *   spaces from the output file to optimize filesize \n *   (but not readability).\n */\ndeclare function saveJSON(json: any[]|object, filename: string, optimize?: boolean): void;\n\n/**\n *   Writes an array of Strings to a text file, one \n *   line per String. The file saving process and \n *   location of the saved file will vary between web \n *   browsers.\n *\n *   @param list string array to be written\n *   @param filename filename for output\n *   @param [extension] the filename's extension\n */\ndeclare function saveStrings(list: string[], filename: string, extension?: string): void;\n\n/**\n *   Writes the contents of a Table object to a file. \n *   Defaults to a text file with \n *   comma-separated-values ('csv') but can also use \n *   tab separation ('tsv'), or generate an HTML table \n *   ('html'). The file saving process and location of \n *   the saved file will vary between web browsers.\n *\n *   @param Table the Table object to save to a file\n *   @param filename the filename to which the Table \n *   should be saved\n *   @param [options] can be one of \"tsv\", \"csv\", or \n *   \"html\"\n */\ndeclare function saveTable(Table: p5.Table, filename: string, options?: string): void;\n\n// src/math/calculation.js\n\n/**\n *   Calculates the absolute value (magnitude) of a \n *   number. Maps to Math.abs(). The absolute value of \n *   a number is always positive.\n *\n *   @param n number to compute\n *   @return absolute value of given number\n */\ndeclare function abs(n: number): number;\n\n/**\n *   Calculates the closest int value that is greater \n *   than or equal to the value of the parameter. Maps \n *   to Math.ceil(). For example, ceil(9.03) returns \n *   the value 10.\n *\n *   @param n number to round up\n *   @return rounded up number\n */\ndeclare function ceil(n: number): number;\n\n/**\n *   Constrains a value between a minimum and maximum \n *   value.\n *\n *   @param n number to constrain\n *   @param low minimum limit\n *   @param high maximum limit\n *   @return constrained number\n */\ndeclare function constrain(n: number, low: number, high: number): number;\n\n/**\n *   Calculates the distance between two points.\n *\n *   @param x1 x-coordinate of the first point\n *   @param y1 y-coordinate of the first point\n *   @param x2 x-coordinate of the second point\n *   @param y2 y-coordinate of the second point\n *   @return distance between the two points\n */\ndeclare function dist(x1: number, y1: number, x2: number, y2: number): number;\n\n/**\n *   Calculates the distance between two points.\n *\n *   @param x1 x-coordinate of the first point\n *   @param y1 y-coordinate of the first point\n *   @param z1 z-coordinate of the first point\n *   @param x2 x-coordinate of the second point\n *   @param y2 y-coordinate of the second point\n *   @param z2 z-coordinate of the second point\n *   @return distance between the two points\n */\ndeclare function dist(x1: number, y1: number, z1: number, x2: number, y2: number, z2: number): number;\n\n/**\n *   Returns Euler's number e (2.71828...) raised to \n *   the power of the n parameter. Maps to Math.exp().\n *\n *   @param n exponent to raise\n *   @return e^n\n */\ndeclare function exp(n: number): number;\n\n/**\n *   Calculates the closest int value that is less than \n *   or equal to the value of the parameter. Maps to \n *   Math.floor().\n *\n *   @param n number to round down\n *   @return rounded down number\n */\ndeclare function floor(n: number): number;\n\n/**\n *   Calculates a number between two numbers at a \n *   specific increment. The amt parameter is the \n *   amount to interpolate between the two values where \n *   0.0 equal to the first point, 0.1 is very near the \n *   first point, 0.5 is half-way in between, etc. The \n *   lerp function is convenient for creating motion \n *   along a straight path and for drawing dotted \n *   lines.\n *\n *   @param start first value\n *   @param stop second value\n *   @param amt number between 0.0 and 1.0\n *   @return lerped value\n */\ndeclare function lerp(start: number, stop: number, amt: number): number;\n\n/**\n *   Calculates the natural logarithm (the base-e \n *   logarithm) of a number. This function expects the \n *   n parameter to be a value greater than 0.0. Maps \n *   to Math.log().\n *\n *   @param n number greater than 0\n *   @return natural logarithm of n\n */\ndeclare function log(n: number): number;\n\n/**\n *   Calculates the magnitude (or length) of a vector. \n *   A vector is a direction in space commonly used in \n *   computer graphics and linear algebra. Because it \n *   has no \"start\" position, the magnitude of a vector \n *   can be thought of as the distance from the \n *   coordinate 0,0 to its x,y value. Therefore, mag() \n *   is a shortcut for writing dist(0, 0, x, y).\n *\n *   @param a first value\n *   @param b second value\n *   @return magnitude of vector from (0,0) to (a,b)\n */\ndeclare function mag(a: number, b: number): number;\n\n/**\n *   Re-maps a number from one range to another.  In \n *   the first example above, the number 25 is \n *   converted from a value in the range of 0 to 100 \n *   into a value that ranges from the left edge of the \n *   window (0) to the right edge (width).\n *\n *   @param value the incoming value to be converted\n *   @param start1 lower bound of the value's current \n *   range\n *   @param stop1 upper bound of the value's current \n *   range\n *   @param start2 lower bound of the value's target \n *   range\n *   @param stop2 upper bound of the value's target \n *   range\n *   @param [withinBounds] constrain the value to the \n *   newly mapped range\n *   @return remapped number\n */\ndeclare function map(value: number, start1: number, stop1: number, start2: number, stop2: number, withinBounds?: boolean): number;\n\n/**\n *   Determines the largest value in a sequence of \n *   numbers, and then returns that value. max() \n *   accepts any number of Number parameters, or an \n *   Array of any length.\n *\n *   @param n0 Number to compare\n *   @param n1 Number to compare\n *   @return maximum Number\n */\ndeclare function max(n0: number, n1: number): number;\n\n/**\n *   Determines the largest value in a sequence of \n *   numbers, and then returns that value. max() \n *   accepts any number of Number parameters, or an \n *   Array of any length.\n *\n *   @param nums Numbers to compare\n */\ndeclare function max(nums: number[]): number;\n\n/**\n *   Determines the smallest value in a sequence of \n *   numbers, and then returns that value. min() \n *   accepts any number of Number parameters, or an \n *   Array of any length.\n *\n *   @param n0 Number to compare\n *   @param n1 Number to compare\n *   @return minimum Number\n */\ndeclare function min(n0: number, n1: number): number;\n\n/**\n *   Determines the smallest value in a sequence of \n *   numbers, and then returns that value. min() \n *   accepts any number of Number parameters, or an \n *   Array of any length.\n *\n *   @param nums Numbers to compare\n */\ndeclare function min(nums: number[]): number;\n\n/**\n *   Normalizes a number from another range into a \n *   value between 0 and 1. Identical to map(value, \n *   low, high, 0, 1). Numbers outside of the range are \n *   not clamped to 0 and 1, because out-of-range \n *   values are often intentional and useful. (See the \n *   second example above.)\n *\n *   @param value incoming value to be normalized\n *   @param start lower bound of the value's current \n *   range\n *   @param stop upper bound of the value's current \n *   range\n *   @return normalized number\n */\ndeclare function norm(value: number, start: number, stop: number): number;\n\n/**\n *   Facilitates exponential expressions. The pow() \n *   function is an efficient way of multiplying \n *   numbers by themselves (or their reciprocals) in \n *   large quantities. For example, pow(3, 5) is \n *   equivalent to the expression 33333 and pow(3, -5) \n *   is equivalent to 1 / 33333. Maps to Math.pow().\n *\n *   @param n base of the exponential expression\n *   @param e power by which to raise the base\n *   @return n^e\n */\ndeclare function pow(n: number, e: number): number;\n\n/**\n *   Calculates the integer closest to the n parameter. \n *   For example, round(133.8) returns the value 134. \n *   Maps to Math.round().\n *\n *   @param n number to round\n *   @return rounded number\n */\ndeclare function round(n: number): number;\n\n/**\n *   Squares a number (multiplies a number by itself). \n *   The result is always a positive number, as \n *   multiplying two negative numbers always yields a \n *   positive result. For example, -1 * -1 = 1.\n *\n *   @param n number to square\n *   @return squared number\n */\ndeclare function sq(n: number): number;\n\n/**\n *   Calculates the square root of a number. The square \n *   root of a number is always positive, even though \n *   there may be a valid negative root. The square \n *   root s of number a is such that s*s = a. It is the \n *   opposite of squaring. Maps to Math.sqrt().\n *\n *   @param n non-negative number to square root\n *   @return square root of number\n */\ndeclare function sqrt(n: number): number;\n\n// src/math/math.js\n\n/**\n *   Creates a new p5.Vector (the datatype for storing \n *   vectors). This provides a two or three dimensional \n *   vector, specifically a Euclidean (also known as \n *   geometric) vector. A vector is an entity that has \n *   both magnitude and direction.\n *\n *   @param [x] x component of the vector\n *   @param [y] y component of the vector\n *   @param [z] z component of the vector\n */\ndeclare function createVector(x?: number, y?: number, z?: number): p5.Vector;\n\n// src/math/noise.js\n\n/**\n *   Returns the Perlin noise value at specified \n *   coordinates. Perlin noise is a random sequence \n *   generator producing a more natural ordered, \n *   harmonic succession of numbers compared to the \n *   standard random() function. It was invented by Ken \n *   Perlin in the 1980s and been used since in \n *   graphical applications to produce procedural \n *   textures, natural motion, shapes, terrains etc. \n *   The main difference to the random() function is \n *   that Perlin noise is defined in an infinite \n *   n-dimensional space where each pair of coordinates \n *   corresponds to a fixed semi-random value (fixed \n *   only for the lifespan of the program; see the \n *   noiseSeed() function). p5.js can compute 1D, 2D \n *   and 3D noise, depending on the number of \n *   coordinates given. The resulting value will always \n *   be between 0.0 and 1.0. The noise value can be \n *   animated by moving through the noise space as \n *   demonstrated in the example above. The 2nd and 3rd \n *   dimension can also be interpreted as time.\n * \n *   The actual noise is structured similar to an audio \n *   signal, in respect to the function's use of \n *   frequencies. Similar to the concept of harmonics \n *   in physics, perlin noise is computed over several \n *   octaves which are added together for the final \n *   result. \n * \n *   Another way to adjust the character of the \n *   resulting sequence is the scale of the input \n *   coordinates. As the function works within an \n *   infinite space the value of the coordinates \n *   doesn't matter as such, only the distance between \n *   successive coordinates does (eg. when using \n *   noise() within a loop). As a general rule the \n *   smaller the difference between coordinates, the \n *   smoother the resulting noise sequence will be. \n *   Steps of 0.005-0.03 work best for most \n *   applications, but this will differ depending on \n *   use.\n *\n *   @param x x-coordinate in noise space\n *   @param [y] y-coordinate in noise space\n *   @param [z] z-coordinate in noise space\n *   @return Perlin noise value (between 0 and 1) at \n *   specified coordinates\n */\ndeclare function noise(x: number, y?: number, z?: number): number;\n\n/**\n *   Adjusts the character and level of detail produced \n *   by the Perlin noise function. Similar to harmonics \n *   in physics, noise is computed over several \n *   octaves. Lower octaves contribute more to the \n *   output signal and as such define the overall \n *   intensity of the noise, whereas higher octaves \n *   create finer grained details in the noise \n *   sequence.  By default, noise is computed over 4 \n *   octaves with each octave contributing exactly half \n *   than its predecessor, starting at 50% strength for \n *   the 1st octave. This falloff amount can be changed \n *   by adding an additional function parameter. Eg. a \n *   falloff factor of 0.75 means each octave will now \n *   have 75% impact (25% less) of the previous lower \n *   octave. Any value between 0.0 and 1.0 is valid, \n *   however note that values greater than 0.5 might \n *   result in greater than 1.0 values returned by \n *   noise(). \n * \n *  \n *   By changing these parameters, the signal created \n *   by the noise() function can be adapted to fit very \n *   specific needs and characteristics.\n *\n *   @param lod number of octaves to be used by the \n *   noise\n *   @param falloff falloff factor for each octave\n */\ndeclare function noiseDetail(lod: number, falloff: number): void;\n\n/**\n *   Sets the seed value for noise(). By default, \n *   noise() produces different results each time the \n *   program is run. Set the value parameter to a \n *   constant to return the same pseudo-random numbers \n *   each time the software is run.\n *\n *   @param seed the seed value\n */\ndeclare function noiseSeed(seed: number): void;\n\n// src/math/random.js\n\n/**\n *   Sets the seed value for random(). By default, \n *   random() produces different results each time the \n *   program is run. Set the seed parameter to a \n *   constant to return the same pseudo-random numbers \n *   each time the software is run.\n *\n *   @param seed the seed value\n */\ndeclare function randomSeed(seed: number): void;\n\n/**\n *   Return a random floating-point number. Takes \n *   either 0, 1 or 2 arguments. \n * \n *   If no argument is given, returns a random number \n *   from 0 up to (but not including) 1. \n * \n *   If one argument is given and it is a number, \n *   returns a random number from 0 up to (but not \n *   including) the number. \n * \n *   If one argument is given and it is an array, \n *   returns a random element from that array. \n * \n *   If two arguments are given, returns a random \n *   number from the first argument up to (but not \n *   including) the second argument.\n *\n *   @param [min] the lower bound (inclusive)\n *   @param [max] the upper bound (exclusive)\n *   @return the random number\n */\ndeclare function random(min?: number, max?: number): number;\n\n/**\n *   Return a random floating-point number. Takes \n *   either 0, 1 or 2 arguments. \n * \n *   If no argument is given, returns a random number \n *   from 0 up to (but not including) 1. \n * \n *   If one argument is given and it is a number, \n *   returns a random number from 0 up to (but not \n *   including) the number. \n * \n *   If one argument is given and it is an array, \n *   returns a random element from that array. \n * \n *   If two arguments are given, returns a random \n *   number from the first argument up to (but not \n *   including) the second argument.\n *\n *   @param choices the array to choose from\n *   @return the random element from the array\n */\ndeclare function random(choices: any[]): any;\n\n/**\n *   Returns a random number fitting a Gaussian, or \n *   normal, distribution. There is theoretically no \n *   minimum or maximum value that randomGaussian() \n *   might return. Rather, there is just a very low \n *   probability that values far from the mean will be \n *   returned; and a higher probability that numbers \n *   near the mean will be returned.  Takes either 0, 1 \n *   or 2 arguments.\n *  \n *   If no args, returns a mean of 0 and standard \n *   deviation of 1.\n *  \n *   If one arg, that arg is the mean (standard \n *   deviation is 1).\n *  \n *   If two args, first is mean, second is standard \n *   deviation.\n *\n *   @param mean the mean\n *   @param sd the standard deviation\n *   @return the random number\n */\ndeclare function randomGaussian(mean: number, sd: number): number;\n\n// src/math/trigonometry.js\n\n/**\n *   The inverse of cos(), returns the arc cosine of a \n *   value. This function expects the values in the \n *   range of -1 to 1 and values are returned in the \n *   range 0 to PI (3.1415927).\n *\n *   @param value the value whose arc cosine is to be \n *   returned\n *   @return the arc cosine of the given value\n */\ndeclare function acos(value: number): number;\n\n/**\n *   The inverse of sin(), returns the arc sine of a \n *   value. This function expects the values in the \n *   range of -1 to 1 and values are returned in the \n *   range -PI/2 to PI/2.\n *\n *   @param value the value whose arc sine is to be \n *   returned\n *   @return the arc sine of the given value\n */\ndeclare function asin(value: number): number;\n\n/**\n *   The inverse of tan(), returns the arc tangent of a \n *   value. This function expects the values in the \n *   range of -Infinity to Infinity (exclusive) and \n *   values are returned in the range -PI/2 to PI/2.\n *\n *   @param value the value whose arc tangent is to be \n *   returned\n *   @return the arc tangent of the given value\n */\ndeclare function atan(value: number): number;\n\n/**\n *   Calculates the angle (in radians) from a specified \n *   point to the coordinate origin as measured from \n *   the positive x-axis. Values are returned as a \n *   float in the range from PI to -PI. The atan2() \n *   function is most often used for orienting geometry \n *   to the position of the cursor.  Note: The \n *   y-coordinate of the point is the first parameter, \n *   and the x-coordinate is the second parameter, due \n *   the the structure of calculating the tangent.\n *\n *   @param y y-coordinate of the point\n *   @param x x-coordinate of the point\n *   @return the arc tangent of the given point\n */\ndeclare function atan2(y: number, x: number): number;\n\n/**\n *   Calculates the cosine of an angle. This function \n *   takes into account the current angleMode. Values \n *   are returned in the range -1 to 1.\n *\n *   @param angle the angle\n *   @return the cosine of the angle\n */\ndeclare function cos(angle: number): number;\n\n/**\n *   Calculates the sine of an angle. This function \n *   takes into account the current angleMode. Values \n *   are returned in the range -1 to 1.\n *\n *   @param angle the angle\n *   @return the sine of the angle\n */\ndeclare function sin(angle: number): number;\n\n/**\n *   Calculates the tangent of an angle. This function \n *   takes into account the current angleMode. Values \n *   are returned in the range -1 to 1.\n *\n *   @param angle the angle\n *   @return the tangent of the angle\n */\ndeclare function tan(angle: number): number;\n\n/**\n *   Converts a radian measurement to its corresponding \n *   value in degrees. Radians and degrees are two ways \n *   of measuring the same thing. There are 360 degrees \n *   in a circle and 2*PI radians in a circle. For \n *   example, 90° = PI/2 = 1.5707964. This function \n *   does not take into account the current angleMode.\n *\n *   @param radians the radians value to convert to \n *   degrees\n *   @return the converted angle\n */\ndeclare function degrees(radians: number): number;\n\n/**\n *   Converts a degree measurement to its corresponding \n *   value in radians. Radians and degrees are two ways \n *   of measuring the same thing. There are 360 degrees \n *   in a circle and 2*PI radians in a circle. For \n *   example, 90° = PI/2 = 1.5707964. This function \n *   does not take into account the current angleMode.\n *\n *   @param degrees the degree value to convert to \n *   radians\n *   @return the converted angle\n */\ndeclare function radians(degrees: number): number;\n\n/**\n *   Sets the current mode of p5 to given mode. Default \n *   mode is RADIANS.\n *\n *   @param mode either RADIANS or DEGREES\n */\ndeclare function angleMode(mode: ANGLE_MODE): void;\n\n// src/typography/attributes.js\n\n/**\n *   Sets the current alignment for drawing text. \n *   Accepts two arguments: horizAlign (LEFT, CENTER, \n *   or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or \n *   BASELINE). The horizAlign parameter is in \n *   reference to the x value of the text() function, \n *   while the vertAlign parameter is in reference to \n *   the y value. \n * \n *   So if you write textAlign(LEFT), you are aligning \n *   the left edge of your text to the x value you give \n *   in text(). If you write textAlign(RIGHT, TOP), you \n *   are aligning the right edge of your text to the x \n *   value and the top of edge of the text to the y \n *   value.\n *\n *   @param horizAlign horizontal alignment, either \n *   LEFT, CENTER, or RIGHT\n *   @param [vertAlign] vertical alignment, either TOP, \n *   BOTTOM, CENTER, or BASELINE\n *   @chainable\n */\ndeclare function textAlign(horizAlign: HORIZ_ALIGN, vertAlign?: VERT_ALIGN): p5;\n\n/**\n *   Sets the current alignment for drawing text. \n *   Accepts two arguments: horizAlign (LEFT, CENTER, \n *   or RIGHT) and vertAlign (TOP, BOTTOM, CENTER, or \n *   BASELINE). The horizAlign parameter is in \n *   reference to the x value of the text() function, \n *   while the vertAlign parameter is in reference to \n *   the y value. \n * \n *   So if you write textAlign(LEFT), you are aligning \n *   the left edge of your text to the x value you give \n *   in text(). If you write textAlign(RIGHT, TOP), you \n *   are aligning the right edge of your text to the x \n *   value and the top of edge of the text to the y \n *   value.\n *\n */\ndeclare function textAlign(): object;\n\n/**\n *   Sets/gets the spacing, in pixels, between lines of \n *   text. This setting will be used in all subsequent \n *   calls to the text() function.\n *\n *   @param leading the size in pixels for spacing \n *   between lines\n *   @chainable\n */\ndeclare function textLeading(leading: number): p5;\n\n/**\n *   Sets/gets the spacing, in pixels, between lines of \n *   text. This setting will be used in all subsequent \n *   calls to the text() function.\n *\n */\ndeclare function textLeading(): number;\n\n/**\n *   Sets/gets the current font size. This size will be \n *   used in all subsequent calls to the text() \n *   function. Font size is measured in pixels.\n *\n *   @param theSize the size of the letters in units of \n *   pixels\n *   @chainable\n */\ndeclare function textSize(theSize: number): p5;\n\n/**\n *   Sets/gets the current font size. This size will be \n *   used in all subsequent calls to the text() \n *   function. Font size is measured in pixels.\n *\n */\ndeclare function textSize(): number;\n\n/**\n *   Sets/gets the style of the text for system fonts \n *   to NORMAL, ITALIC, or BOLD. Note: this may be is \n *   overridden by CSS styling. For non-system fonts \n *   (opentype, truetype, etc.) please load styled \n *   fonts instead.\n *\n *   @param theStyle styling for text, either NORMAL, \n *   ITALIC, or BOLD\n *   @chainable\n */\ndeclare function textStyle(theStyle: THE_STYLE): p5;\n\n/**\n *   Sets/gets the style of the text for system fonts \n *   to NORMAL, ITALIC, or BOLD. Note: this may be is \n *   overridden by CSS styling. For non-system fonts \n *   (opentype, truetype, etc.) please load styled \n *   fonts instead.\n *\n */\ndeclare function textStyle(): string;\n\n/**\n *   Calculates and returns the width of any character \n *   or text string.\n *\n *   @param theText the String of characters to measure\n */\ndeclare function textWidth(theText: string): number;\n\n/**\n *   Returns the ascent of the current font at its \n *   current size. The ascent represents the distance, \n *   in pixels, of the tallest character above the \n *   baseline.\n *\n */\ndeclare function textAscent(): number;\n\n/**\n *   Returns the descent of the current font at its \n *   current size. The descent represents the distance, \n *   in pixels, of the character with the longest \n *   descender below the baseline.\n *\n */\ndeclare function textDescent(): number;\n\n// src/typography/loading_displaying.js\n\n/**\n *   Loads an opentype font file (.otf, .ttf) from a \n *   file or a URL, and returns a PFont Object. This \n *   method is asynchronous, meaning it may not finish \n *   before the next line in your sketch is executed.  \n *   The path to the font should be relative to the \n *   HTML file that links in your sketch. Loading an \n *   from a URL or other remote location may be blocked \n *   due to your browser's built-in security.\n *\n *   @param path name of the file or url to load\n *   @param [callback] function to be executed after \n *   loadFont() completes\n *   @param [onError] function to be executed if an \n *   error occurs\n *   @return p5.Font object\n */\ndeclare function loadFont(path: string, callback?: Function, onError?: Function): p5.Font;\n\n/**\n *   Draws text to the screen. Displays the information \n *   specified in the first parameter on the screen in \n *   the position specified by the additional \n *   parameters. A default font will be used unless a \n *   font is set with the textFont() function and a \n *   default size will be used unless a font is set \n *   with textSize(). Change the color of the text with \n *   the fill() function. Change the outline of the \n *   text with the stroke() and strokeWeight() \n *   functions.  The text displays in relation to the \n *   textAlign() function, which gives the option to \n *   draw to the left, right, and center of the \n *   coordinates. \n * \n *  \n *   The x2 and y2 parameters define a rectangular area \n *   to display within and may only be used with string \n *   data. When these parameters are specified, they \n *   are interpreted based on the current rectMode() \n *   setting. Text that does not fit completely within \n *   the rectangle specified will not be drawn to the \n *   screen.\n *\n *   @param str the alphanumeric symbols to be \n *   displayed\n *   @param x x-coordinate of text\n *   @param y y-coordinate of text\n *   @param [x2] by default, the width of the text box, \n *   see rectMode() for more info\n *   @param [y2] by default, the height of the text \n *   box, see rectMode() for more info\n *   @chainable\n */\ndeclare function text(str: string|object|any[]|number|boolean, x: number, y: number, x2?: number, y2?: number): p5;\n\n/**\n *   Sets the current font that will be drawn with the \n *   text() function.\n *\n *   @return the current font\n */\ndeclare function textFont(): object;\n\n/**\n *   Sets the current font that will be drawn with the \n *   text() function.\n *\n *   @param font a font loaded via loadFont(), or a \n *   String representing a web safe font (a font that \n *   is generally available across all systems)\n *   @param [size] the font size to use\n *   @chainable\n */\ndeclare function textFont(font: object|string, size?: number): p5;\n\n// src/utilities/array_functions.js\n\n/**\n *   Adds a value to the end of an array. Extends the \n *   length of the array by one. Maps to Array.push().\n *\n *   @param array Array to append\n *   @param value to be added to the Array\n */\ndeclare function append(array: any[], value: any): void;\n\n/**\n *   Copies an array (or part of an array) to another \n *   array. The src array is copied to the dst array, \n *   beginning at the position specified by srcPosition \n *   and into the position specified by dstPosition. \n *   The number of elements to copy is determined by \n *   length. Note that copying values overwrites \n *   existing values in the destination array. To \n *   append values instead of overwriting them, use \n *   concat().  The simplified version with only two \n *   arguments, arrayCopy(src, dst), copies an entire \n *   array to another of the same size. It is \n *   equivalent to arrayCopy(src, 0, dst, 0, \n *   src.length). \n * \n *  \n *   Using this function is far more efficient for \n *   copying array data than iterating through a for() \n *   loop and copying each element individually.\n *\n *   @param src the source Array\n *   @param srcPosition starting position in the source \n *   Array\n *   @param dst the destination Array\n *   @param dstPosition starting position in the \n *   destination Array\n *   @param length number of Array elements to be \n *   copied\n */\ndeclare function arrayCopy(src: any[], srcPosition: number, dst: any[], dstPosition: number, length: number): void;\n\n/**\n *   Copies an array (or part of an array) to another \n *   array. The src array is copied to the dst array, \n *   beginning at the position specified by srcPosition \n *   and into the position specified by dstPosition. \n *   The number of elements to copy is determined by \n *   length. Note that copying values overwrites \n *   existing values in the destination array. To \n *   append values instead of overwriting them, use \n *   concat().  The simplified version with only two \n *   arguments, arrayCopy(src, dst), copies an entire \n *   array to another of the same size. It is \n *   equivalent to arrayCopy(src, 0, dst, 0, \n *   src.length). \n * \n *  \n *   Using this function is far more efficient for \n *   copying array data than iterating through a for() \n *   loop and copying each element individually.\n *\n *   @param src the source Array\n *   @param dst the destination Array\n *   @param [length] number of Array elements to be \n *   copied\n */\ndeclare function arrayCopy(src: any[], dst: any[], length?: number): void;\n\n/**\n *   Concatenates two arrays, maps to Array.concat(). \n *   Does not modify the input arrays.\n *\n *   @param a first Array to concatenate\n *   @param b second Array to concatenate\n *   @return concatenated array\n */\ndeclare function concat(a: any[], b: any[]): any[];\n\n/**\n *   Reverses the order of an array, maps to \n *   Array.reverse()\n *\n *   @param list Array to reverse\n */\ndeclare function reverse(list: any[]): void;\n\n/**\n *   Decreases an array by one element and returns the \n *   shortened array, maps to Array.pop().\n *\n *   @param list Array to shorten\n *   @return shortened Array\n */\ndeclare function shorten(list: any[]): any[];\n\n/**\n *   Randomizes the order of the elements of an array. \n *   Implements  Fisher-Yates Shuffle Algorithm.\n *\n *   @param array Array to shuffle\n *   @param [bool] modify passed array\n *   @return shuffled Array\n */\ndeclare function shuffle(array: any[], bool?: boolean): any[];\n\n/**\n *   Sorts an array of numbers from smallest to \n *   largest, or puts an array of words in alphabetical \n *   order. The original array is not modified; a \n *   re-ordered array is returned. The count parameter \n *   states the number of elements to sort. For \n *   example, if there are 12 elements in an array and \n *   count is set to 5, only the first 5 elements in \n *   the array will be sorted.\n *\n *   @param list Array to sort\n *   @param [count] number of elements to sort, \n *   starting from 0\n */\ndeclare function sort(list: any[], count?: number): void;\n\n/**\n *   Inserts a value or an array of values into an \n *   existing array. The first parameter specifies the \n *   initial array to be modified, and the second \n *   parameter defines the data to be inserted. The \n *   third parameter is an index value which specifies \n *   the array position from which to insert data. \n *   (Remember that array index numbering starts at \n *   zero, so the first position is 0, the second \n *   position is 1, and so on.)\n *\n *   @param list Array to splice into\n *   @param value value to be spliced in\n *   @param position in the array from which to insert \n *   data\n */\ndeclare function splice(list: any[], value: any, position: number): void;\n\n/**\n *   Extracts an array of elements from an existing \n *   array. The list parameter defines the array from \n *   which the elements will be copied, and the start \n *   and count parameters specify which elements to \n *   extract. If no count is given, elements will be \n *   extracted from the start to the end of the array. \n *   When specifying the start, remember that the first \n *   array element is 0. This function does not change \n *   the source array.\n *\n *   @param list Array to extract from\n *   @param start position to begin\n *   @param [count] number of values to extract\n *   @return Array of extracted elements\n */\ndeclare function subset(list: any[], start: number, count?: number): any[];\n\n// src/utilities/conversion.js\n\n/**\n *   Converts a string to its floating point \n *   representation. The contents of a string must \n *   resemble a number, or NaN (not a number) will be \n *   returned. For example, float(\"1234.56\") evaluates \n *   to 1234.56, but float(\"giraffe\") will return NaN. \n *   When an array of values is passed in, then an \n *   array of floats of the same length is returned.\n *\n *   @param str float string to parse\n *   @return floating point representation of string\n */\ndeclare function float(str: string): number;\n\n/**\n *   Converts a boolean, string, or float to its \n *   integer representation. When an array of values is \n *   passed in, then an int array of the same length is \n *   returned.\n *\n *   @param n value to parse\n *   @param [radix] the radix to convert to (default: \n *   10)\n *   @return integer representation of value\n */\ndeclare function int(n: string|boolean|number, radix?: number): number;\n\n/**\n *   Converts a boolean, string, or float to its \n *   integer representation. When an array of values is \n *   passed in, then an int array of the same length is \n *   returned.\n *\n *   @param ns values to parse\n *   @return integer representation of values\n */\ndeclare function int(ns: any[]): number[];\n\n/**\n *   Converts a boolean, string or number to its string \n *   representation. When an array of values is passed \n *   in, then an array of strings of the same length is \n *   returned.\n *\n *   @param n value to parse\n *   @return string representation of value\n */\ndeclare function str(n: string|boolean|number|any[]): string;\n\n/**\n *   Converts a number or string to its boolean \n *   representation. For a number, any non-zero value \n *   (positive or negative) evaluates to true, while \n *   zero evaluates to false. For a string, the value \n *   \"true\" evaluates to true, while any other value \n *   evaluates to false. When an array of number or \n *   string values is passed in, then a array of \n *   booleans of the same length is returned.\n *\n *   @param n value to parse\n *   @return boolean representation of value\n */\ndeclare function boolean(n: string|boolean|number|any[]): boolean;\n\n/**\n *   Converts a number, string representation of a \n *   number, or boolean to its byte representation. A \n *   byte can be only a whole number between -128 and \n *   127, so when a value outside of this range is \n *   converted, it wraps around to the corresponding \n *   byte representation. When an array of number, \n *   string or boolean values is passed in, then an \n *   array of bytes the same length is returned.\n *\n *   @param n value to parse\n *   @return byte representation of value\n */\ndeclare function byte(n: string|boolean|number): number;\n\n/**\n *   Converts a number, string representation of a \n *   number, or boolean to its byte representation. A \n *   byte can be only a whole number between -128 and \n *   127, so when a value outside of this range is \n *   converted, it wraps around to the corresponding \n *   byte representation. When an array of number, \n *   string or boolean values is passed in, then an \n *   array of bytes the same length is returned.\n *\n *   @param ns values to parse\n *   @return array of byte representation of values\n */\ndeclare function byte(ns: any[]): number[];\n\n/**\n *   Converts a number or string to its corresponding \n *   single-character string representation. If a \n *   string parameter is provided, it is first parsed \n *   as an integer and then translated into a \n *   single-character string. When an array of number \n *   or string values is passed in, then an array of \n *   single-character strings of the same length is \n *   returned.\n *\n *   @param n value to parse\n *   @return string representation of value\n */\ndeclare function char(n: string|number): string;\n\n/**\n *   Converts a number or string to its corresponding \n *   single-character string representation. If a \n *   string parameter is provided, it is first parsed \n *   as an integer and then translated into a \n *   single-character string. When an array of number \n *   or string values is passed in, then an array of \n *   single-character strings of the same length is \n *   returned.\n *\n *   @param ns values to parse\n *   @return array of string representation of values\n */\ndeclare function char(ns: any[]): string[];\n\n/**\n *   Converts a single-character string to its \n *   corresponding integer representation. When an \n *   array of single-character string values is passed \n *   in, then an array of integers of the same length \n *   is returned.\n *\n *   @param n value to parse\n *   @return integer representation of value\n */\ndeclare function unchar(n: string): number;\n\n/**\n *   Converts a single-character string to its \n *   corresponding integer representation. When an \n *   array of single-character string values is passed \n *   in, then an array of integers of the same length \n *   is returned.\n *\n *   @param ns values to parse\n *   @return integer representation of values\n */\ndeclare function unchar(ns: any[]): number[];\n\n/**\n *   Converts a number to a string in its equivalent \n *   hexadecimal notation. If a second parameter is \n *   passed, it is used to set the number of characters \n *   to generate in the hexadecimal notation. When an \n *   array is passed in, an array of strings in \n *   hexadecimal notation of the same length is \n *   returned.\n *\n *   @param n value to parse\n *   @return hexadecimal string representation of value\n */\ndeclare function hex(n: number, digits?: number): string;\n\n/**\n *   Converts a number to a string in its equivalent \n *   hexadecimal notation. If a second parameter is \n *   passed, it is used to set the number of characters \n *   to generate in the hexadecimal notation. When an \n *   array is passed in, an array of strings in \n *   hexadecimal notation of the same length is \n *   returned.\n *\n *   @param ns array of values to parse\n *   @return hexadecimal string representation of \n *   values\n */\ndeclare function hex(ns: number[], digits?: number): string[];\n\n/**\n *   Converts a string representation of a hexadecimal \n *   number to its equivalent integer value. When an \n *   array of strings in hexadecimal notation is passed \n *   in, an array of integers of the same length is \n *   returned.\n *\n *   @param n value to parse\n *   @return integer representation of hexadecimal \n *   value\n */\ndeclare function unhex(n: string): number;\n\n/**\n *   Converts a string representation of a hexadecimal \n *   number to its equivalent integer value. When an \n *   array of strings in hexadecimal notation is passed \n *   in, an array of integers of the same length is \n *   returned.\n *\n *   @param ns values to parse\n *   @return integer representations of hexadecimal \n *   value\n */\ndeclare function unhex(ns: any[]): number[];\n\n// src/utilities/string_functions.js\n\n/**\n *   Combines an array of Strings into one String, each \n *   separated by the character(s) used for the \n *   separator parameter. To join arrays of ints or \n *   floats, it's necessary to first convert them to \n *   Strings using nf() or nfs().\n *\n *   @param list array of Strings to be joined\n *   @param separator String to be placed between each \n *   item\n *   @return joined String\n */\ndeclare function join(list: any[], separator: string): string;\n\n/**\n *   This function is used to apply a regular \n *   expression to a piece of text, and return matching \n *   groups (elements found inside parentheses) as a \n *   String array. If there are no matches, a null \n *   value will be returned. If no groups are specified \n *   in the regular expression, but the sequence \n *   matches, an array of length 1 (with the matched \n *   text as the first element of the array) will be \n *   returned.  To use the function, first check to see \n *   if the result is null. If the result is null, then \n *   the sequence did not match at all. If the sequence \n *   did match, an array is returned. \n * \n *  \n *   If there are groups (specified by sets of \n *   parentheses) in the regular expression, then the \n *   contents of each will be returned in the array. \n *   Element [0] of a regular expression match returns \n *   the entire matching string, and the match groups \n *   start at element [1] (the first group is [1], the \n *   second [2], and so on).\n *\n *   @param str the String to be searched\n *   @param regexp the regexp to be used for matching\n *   @return Array of Strings found\n */\ndeclare function match(str: string, regexp: string): string[];\n\n/**\n *   This function is used to apply a regular \n *   expression to a piece of text, and return a list \n *   of matching groups (elements found inside \n *   parentheses) as a two-dimensional String array. If \n *   there are no matches, a null value will be \n *   returned. If no groups are specified in the \n *   regular expression, but the sequence matches, a \n *   two dimensional array is still returned, but the \n *   second dimension is only of length one.  To use \n *   the function, first check to see if the result is \n *   null. If the result is null, then the sequence did \n *   not match at all. If the sequence did match, a 2D \n *   array is returned. \n * \n *  \n *   If there are groups (specified by sets of \n *   parentheses) in the regular expression, then the \n *   contents of each will be returned in the array. \n *   Assuming a loop with counter variable i, element \n *   [i][0] of a regular expression match returns the \n *   entire matching string, and the match groups start \n *   at element [i][1] (the first group is [i][1], the \n *   second [i][2], and so on).\n *\n *   @param str the String to be searched\n *   @param regexp the regexp to be used for matching\n *   @return 2d Array of Strings found\n */\ndeclare function matchAll(str: string, regexp: string): string[];\n\n/**\n *   Utility function for formatting numbers into \n *   strings. There are two versions: one for \n *   formatting floats, and one for formatting ints. \n *   The values for the digits, left, and right \n *   parameters should always be positive integers.\n *\n *   @param num the Number to format\n *   @param [left] number of digits to the left of the \n *   decimal point\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted String\n */\ndeclare function nf(num: number|string, left?: number|string, right?: number|string): string;\n\n/**\n *   Utility function for formatting numbers into \n *   strings. There are two versions: one for \n *   formatting floats, and one for formatting ints. \n *   The values for the digits, left, and right \n *   parameters should always be positive integers.\n *\n *   @param nums the Numbers to format\n *   @param [left] number of digits to the left of the \n *   decimal point\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted Strings\n */\ndeclare function nf(nums: any[], left?: number|string, right?: number|string): string[];\n\n/**\n *   Utility function for formatting numbers into \n *   strings and placing appropriate commas to mark \n *   units of 1000. There are two versions: one for \n *   formatting ints, and one for formatting an array \n *   of ints. The value for the right parameter should \n *   always be a positive integer.\n *\n *   @param num the Number to format\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted String\n */\ndeclare function nfc(num: number|string, right?: number|string): string;\n\n/**\n *   Utility function for formatting numbers into \n *   strings and placing appropriate commas to mark \n *   units of 1000. There are two versions: one for \n *   formatting ints, and one for formatting an array \n *   of ints. The value for the right parameter should \n *   always be a positive integer.\n *\n *   @param nums the Numbers to format\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted Strings\n */\ndeclare function nfc(nums: any[], right?: number|string): string[];\n\n/**\n *   Utility function for formatting numbers into \n *   strings. Similar to nf() but puts a \"+\" in front \n *   of positive numbers and a \"-\" in front of negative \n *   numbers. There are two versions: one for \n *   formatting floats, and one for formatting ints. \n *   The values for left, and right parameters should \n *   always be positive integers.\n *\n *   @param num the Number to format\n *   @param [left] number of digits to the left of the \n *   decimal point\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted String\n */\ndeclare function nfp(num: number, left?: number, right?: number): string;\n\n/**\n *   Utility function for formatting numbers into \n *   strings. Similar to nf() but puts a \"+\" in front \n *   of positive numbers and a \"-\" in front of negative \n *   numbers. There are two versions: one for \n *   formatting floats, and one for formatting ints. \n *   The values for left, and right parameters should \n *   always be positive integers.\n *\n *   @param nums the Numbers to format\n *   @param [left] number of digits to the left of the \n *   decimal point\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted Strings\n */\ndeclare function nfp(nums: number[], left?: number, right?: number): string[];\n\n/**\n *   Utility function for formatting numbers into \n *   strings. Similar to nf() but puts a \" \" (space) in \n *   front of positive numbers and a \"-\" in front of \n *   negative numbers. There are two versions: one for \n *   formatting floats, and one for formatting ints. \n *   The values for the digits, left, and right \n *   parameters should always be positive integers.\n *\n *   @param num the Number to format\n *   @param [left] number of digits to the left of the \n *   decimal point\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted String\n */\ndeclare function nfs(num: number, left?: number, right?: number): string;\n\n/**\n *   Utility function for formatting numbers into \n *   strings. Similar to nf() but puts a \" \" (space) in \n *   front of positive numbers and a \"-\" in front of \n *   negative numbers. There are two versions: one for \n *   formatting floats, and one for formatting ints. \n *   The values for the digits, left, and right \n *   parameters should always be positive integers.\n *\n *   @param nums the Numbers to format\n *   @param [left] number of digits to the left of the \n *   decimal point\n *   @param [right] number of digits to the right of \n *   the decimal point\n *   @return formatted Strings\n */\ndeclare function nfs(nums: any[], left?: number, right?: number): string[];\n\n/**\n *   The split() function maps to String.split(), it \n *   breaks a String into pieces using a character or \n *   string as the delimiter. The delim parameter \n *   specifies the character or characters that mark \n *   the boundaries between each piece. A String[] \n *   array is returned that contains each of the \n *   pieces. The splitTokens() function works in a \n *   similar fashion, except that it splits using a \n *   range of characters instead of a specific \n *   character or sequence.\n *\n *   @param value the String to be split\n *   @param delim the String used to separate the data\n *   @return Array of Strings\n */\ndeclare function split(value: string, delim: string): string[];\n\n/**\n *   The splitTokens() function splits a String at one \n *   or many character delimiters or \"tokens.\" The \n *   delim parameter specifies the character or \n *   characters to be used as a boundary.  If no delim \n *   characters are specified, any whitespace character \n *   is used to split. Whitespace characters include \n *   tab (\\t), line feed (\\n), carriage return (\\r), \n *   form feed (\\f), and space.\n *\n *   @param value the String to be split\n *   @param [delim] list of individual Strings that \n *   will be used as separators\n *   @return Array of Strings\n */\ndeclare function splitTokens(value: string, delim?: string): string[];\n\n/**\n *   Removes whitespace characters from the beginning \n *   and end of a String. In addition to standard \n *   whitespace characters such as space, carriage \n *   return, and tab, this function also removes the \n *   Unicode \"nbsp\" character.\n *\n *   @param str a String to be trimmed\n *   @return a trimmed String\n */\ndeclare function trim(str: string): string;\n\n/**\n *   Removes whitespace characters from the beginning \n *   and end of a String. In addition to standard \n *   whitespace characters such as space, carriage \n *   return, and tab, this function also removes the \n *   Unicode \"nbsp\" character.\n *\n *   @param strs an Array of Strings to be trimmed\n *   @return an Array of trimmed Strings\n */\ndeclare function trim(strs: any[]): string[];\n\n// src/utilities/time_date.js\n\n/**\n *   p5.js communicates with the clock on your \n *   computer. The day() function returns the current \n *   day as a value from 1 - 31.\n *\n *   @return the current day\n */\ndeclare function day(): number;\n\n/**\n *   p5.js communicates with the clock on your \n *   computer. The hour() function returns the current \n *   hour as a value from 0 - 23.\n *\n *   @return the current hour\n */\ndeclare function hour(): number;\n\n/**\n *   p5.js communicates with the clock on your \n *   computer. The minute() function returns the \n *   current minute as a value from 0 - 59.\n *\n *   @return the current minute\n */\ndeclare function minute(): number;\n\n/**\n *   Returns the number of milliseconds (thousandths of \n *   a second) since starting the program. This \n *   information is often used for timing events and \n *   animation sequences.\n *\n *   @return the number of milliseconds since starting \n *   the program\n */\ndeclare function millis(): number;\n\n/**\n *   p5.js communicates with the clock on your \n *   computer. The month() function returns the current \n *   month as a value from 1 - 12.\n *\n *   @return the current month\n */\ndeclare function month(): number;\n\n/**\n *   p5.js communicates with the clock on your \n *   computer. The second() function returns the \n *   current second as a value from 0 - 59.\n *\n *   @return the current second\n */\ndeclare function second(): number;\n\n/**\n *   p5.js communicates with the clock on your \n *   computer. The year() function returns the current \n *   year as an integer (2014, 2015, 2016, etc).\n *\n *   @return the current year\n */\ndeclare function year(): number;\n\n// src/webgl/camera.js\n\n/**\n *   Sets camera position for a 3D sketch. The function \n *   behaves similarly gluLookAt, except that it \n *   replaces the existing modelview matrix instead of \n *   applying any transformations calculated here on \n *   top of the existing model view. When called with \n *   no arguments, this function sets a default camera \n *   equivalent to calling camera(0, 0, (height/2.0) / \n *   tan(PI*30.0 / 180.0), 0, 0, 0, 0, 1, 0);\n *\n *   @param [x] camera position value on x axis\n *   @param [y] camera position value on y axis\n *   @param [z] camera position value on z axis\n *   @param [centerX] x coordinate representing center \n *   of the sketch\n *   @param [centerY] y coordinate representing center \n *   of the sketch\n *   @param [centerZ] z coordinate representing center \n *   of the sketch\n *   @param [upX] x component of direction 'up' from \n *   camera\n *   @param [upY] y component of direction 'up' from \n *   camera\n *   @param [upZ] z component of direction 'up' from \n *   camera\n *   @chainable\n */\ndeclare function camera(x?: number, y?: number, z?: number, centerX?: number, centerY?: number, centerZ?: number, upX?: number, upY?: number, upZ?: number): p5;\n\n/**\n *   Sets perspective camera. When called with no \n *   arguments, the defaults provided are equivalent to \n *   perspective(PI/3.0, width/height, cameraZ/10.0, \n *   cameraZ10.0) where cameraZ is ((height/2.0) / \n *   tan(PI60.0/360.0));\n *\n *   @param [fovy] camera frustum vertical field of \n *   view, from bottom to top of view, in angleMode \n *   units\n *   @param [aspect] camera frustum aspect ratio\n *   @param [near] frustum near plane length\n *   @param [far] frustum far plane length\n *   @chainable\n */\ndeclare function perspective(fovy?: number, aspect?: number, near?: number, far?: number): p5;\n\n/**\n *   Setup ortho camera\n *\n *   @param [left] camera frustum left plane\n *   @param [right] camera frustum right plane\n *   @param [bottom] camera frustum bottom plane\n *   @param [top] camera frustum top plane\n *   @param [near] camera frustum near plane\n *   @param [far] camera frustum far plane\n *   @chainable\n */\ndeclare function ortho(left?: number, right?: number, bottom?: number, top?: number, near?: number, far?: number): p5;\n\n// src/webgl/interaction.js\n\ndeclare function orbitControl(): p5;\n\n// src/webgl/light.js\n\n/**\n *   Creates an ambient light with a color\n *\n *   @param v1 red or hue value relative to the current \n *   color range\n *   @param v2 green or saturation value relative to \n *   the current color range\n *   @param v3 blue or brightness value relative to the \n *   current color range\n *   @chainable\n */\ndeclare function ambientLight(v1: number, v2: number, v3: number, alpha?: number): p5;\n\n/**\n *   Creates an ambient light with a color\n *\n *   @param value a color string\n *   @chainable\n */\ndeclare function ambientLight(value: string): p5;\n\n/**\n *   Creates an ambient light with a color\n *\n *   @param gray a gray value\n *   @chainable\n */\ndeclare function ambientLight(gray: number, alpha?: number): p5;\n\n/**\n *   Creates an ambient light with a color\n *\n *   @param values an array containing the \n *   red,green,blue & and alpha components of the color\n *   @chainable\n */\ndeclare function ambientLight(values: number[]): p5;\n\n/**\n *   Creates an ambient light with a color\n *\n *   @param color the ambient light color\n *   @chainable\n */\ndeclare function ambientLight(color: p5.Color): p5;\n\n/**\n *   Creates a directional light with a color and a \n *   direction\n *\n *   @param v1 red or hue value (depending on the \n *   current color mode),\n *   @param v2 green or saturation value\n *   @param v3 blue or brightness value\n *   @param position the direction of the light\n *   @chainable\n */\ndeclare function directionalLight(v1: number, v2: number, v3: number, position: p5.Vector): p5;\n\n/**\n *   Creates a directional light with a color and a \n *   direction\n *\n *   @param color color Array, CSS color string, or \n *   p5.Color value\n *   @param x x axis direction\n *   @param y y axis direction\n *   @param z z axis direction\n *   @chainable\n */\ndeclare function directionalLight(color: number[]|string|p5.Color, x: number, y: number, z: number): p5;\n\n/**\n *   Creates a directional light with a color and a \n *   direction\n *\n *   @param color color Array, CSS color string, or \n *   p5.Color value\n *   @param position the direction of the light\n *   @chainable\n */\ndeclare function directionalLight(color: number[]|string|p5.Color, position: p5.Vector): p5;\n\n/**\n *   Creates a directional light with a color and a \n *   direction\n *\n *   @param v1 red or hue value (depending on the \n *   current color mode),\n *   @param v2 green or saturation value\n *   @param v3 blue or brightness value\n *   @param x x axis direction\n *   @param y y axis direction\n *   @param z z axis direction\n *   @chainable\n */\ndeclare function directionalLight(v1: number, v2: number, v3: number, x: number, y: number, z: number): p5;\n\n/**\n *   Creates a point light with a color and a light \n *   position\n *\n *   @param v1 red or hue value (depending on the \n *   current color mode),\n *   @param v2 green or saturation value\n *   @param v3 blue or brightness value\n *   @param x x axis position\n *   @param y y axis position\n *   @param z z axis position\n *   @chainable\n */\ndeclare function pointLight(v1: number, v2: number, v3: number, x: number, y: number, z: number): p5;\n\n/**\n *   Creates a point light with a color and a light \n *   position\n *\n *   @param v1 red or hue value (depending on the \n *   current color mode),\n *   @param v2 green or saturation value\n *   @param v3 blue or brightness value\n *   @param position the position of the light\n *   @chainable\n */\ndeclare function pointLight(v1: number, v2: number, v3: number, position: p5.Vector): p5;\n\n/**\n *   Creates a point light with a color and a light \n *   position\n *\n *   @param color color Array, CSS color string, or \n *   p5.Color value\n *   @param x x axis position\n *   @param y y axis position\n *   @param z z axis position\n *   @chainable\n */\ndeclare function pointLight(color: number[]|string|p5.Color, x: number, y: number, z: number): p5;\n\n/**\n *   Creates a point light with a color and a light \n *   position\n *\n *   @param color color Array, CSS color string, or \n *   p5.Color value\n *   @param position the position of the light\n *   @chainable\n */\ndeclare function pointLight(color: number[]|string|p5.Color, position: p5.Vector): p5;\n\n// src/webgl/loading.js\n\n/**\n *   Load a 3d model from an OBJ file.  One of the \n *   limitations of the OBJ format is that it doesn't \n *   have a built-in sense of scale. This means that \n *   models exported from different programs might be \n *   very different sizes. If your model isn't \n *   displaying, try calling loadModel() with the \n *   normalized parameter set to true. This will resize \n *   the model to a scale appropriate for p5. You can \n *   also make additional changes to the final size of \n *   your model with the scale() function.\n *\n *   @param path Path of the model to be loaded\n *   @param normalize If true, scale the model to a \n *   standardized size when loading\n *   @param [successCallback] Function to be called \n *   once the model is loaded. Will be passed the 3D \n *   model object.\n *   @param [failureCallback] called with event error \n *   if the image fails to load.\n *   @return the p5.Geometry object\n */\ndeclare function loadModel(path: string, normalize: boolean, successCallback?: (p1: p5.Geometry) => any, failureCallback?: (p1: Event) => any): p5.Geometry;\n\n/**\n *   Load a 3d model from an OBJ file.  One of the \n *   limitations of the OBJ format is that it doesn't \n *   have a built-in sense of scale. This means that \n *   models exported from different programs might be \n *   very different sizes. If your model isn't \n *   displaying, try calling loadModel() with the \n *   normalized parameter set to true. This will resize \n *   the model to a scale appropriate for p5. You can \n *   also make additional changes to the final size of \n *   your model with the scale() function.\n *\n *   @param path Path of the model to be loaded\n *   @param [successCallback] Function to be called \n *   once the model is loaded. Will be passed the 3D \n *   model object.\n *   @param [failureCallback] called with event error \n *   if the image fails to load.\n *   @return the p5.Geometry object\n */\ndeclare function loadModel(path: string, successCallback?: (p1: p5.Geometry) => any, failureCallback?: (p1: Event) => any): p5.Geometry;\n\n/**\n *   Render a 3d model to the screen.\n *\n *   @param model Loaded 3d model to be rendered\n */\ndeclare function model(model: p5.Geometry): void;\n\n// src/webgl/material.js\n\n/**\n *   Loads a custom shader from the provided vertex and \n *   fragment shader paths. The shader files are loaded \n *   asynchronously in the background, so this method \n *   should be used in preload(). For now, there are \n *   three main types of shaders. p5 will automatically \n *   supply appropriate vertices, normals, colors, and \n *   lighting attributes if the parameters defined in \n *   the shader match the names.\n *\n *   @param [vertFilename] path to file containing \n *   vertex shader source code\n *   @param [fragFilename] path to file containing \n *   fragment shader source code\n *   @return a shader object created from the provided \n *   vertex and fragment shader files.\n */\ndeclare function loadShader(vertFilename?: string, fragFilename?: string): p5.Shader;\ndeclare function createShader(vertSrc: string, fragSrc: string): p5.Shader;\n\n/**\n *   The shader() function lets the user provide a \n *   custom shader to fill in shapes in WEBGL mode. \n *   Users can create their own shaders by loading \n *   vertex and fragment shaders with loadShader().\n *\n *   @param [s] the desired p5.Shader to use for \n *   rendering shapes.\n *   @chainable\n */\ndeclare function shader(s?: p5.Shader): p5;\n\n/**\n *   Normal material for geometry. You can view all \n *   possible materials in this example.\n *\n *   @chainable\n */\ndeclare function normalMaterial(): p5;\n\n/**\n *   Texture for geometry. You can view other possible \n *   materials in this example.\n *\n *   @param tex 2-dimensional graphics to render as \n *   texture\n *   @chainable\n */\ndeclare function texture(tex: p5.Image|p5.MediaElement|p5.Graphics): p5;\n\n/**\n *   Ambient material for geometry with a given color. \n *   You can view all possible materials in this \n *   example.\n *\n *   @param v1 gray value, red or hue value (depending \n *   on the current color mode),\n *   @param [v2] green or saturation value\n *   @param [v3] blue or brightness value\n *   @param [a] opacity\n *   @chainable\n */\ndeclare function ambientMaterial(v1: number, v2?: number, v3?: number, a?: number): p5;\n\n/**\n *   Ambient material for geometry with a given color. \n *   You can view all possible materials in this \n *   example.\n *\n *   @param color color, color Array, or CSS color \n *   string\n *   @chainable\n */\ndeclare function ambientMaterial(color: number[]|string|p5.Color): p5;\n\n/**\n *   Specular material for geometry with a given color. \n *   You can view all possible materials in this \n *   example.\n *\n *   @param v1 gray value, red or hue value (depending \n *   on the current color mode),\n *   @param [v2] green or saturation value\n *   @param [v3] blue or brightness value\n *   @param [a] opacity\n *   @chainable\n */\ndeclare function specularMaterial(v1: number, v2?: number, v3?: number, a?: number): p5;\n\n/**\n *   Specular material for geometry with a given color. \n *   You can view all possible materials in this \n *   example.\n *\n *   @param color color Array, or CSS color string\n *   @chainable\n */\ndeclare function specularMaterial(color: number[]|string|p5.Color): p5;\n\n// src/webgl/p5.RendererGL.js\n\n/**\n *   Set attributes for the WebGL Drawing context. This \n *   is a way of adjusting ways that the WebGL renderer \n *   works to fine-tune the display and performance. \n *   This should be put in setup(). The available \n *   attributes are:  alpha - indicates if the canvas \n *   contains an alpha buffer default is true \n * \n *  \n *   depth - indicates whether the drawing buffer has a \n *   depth buffer of at least 16 bits - default is true \n * \n *  \n *   stencil - indicates whether the drawing buffer has \n *   a stencil buffer of at least 8 bits \n * \n *  \n *   antialias - indicates whether or not to perform \n *   anti-aliasing default is false \n * \n *  \n *   premultipliedAlpha - indicates that the page \n *   compositor will assume the drawing buffer contains \n *   colors with pre-multiplied alpha default is false \n * \n *  \n *   preserveDrawingBuffer - if true the buffers will \n *   not be cleared and and will preserve their values \n *   until cleared or overwritten by author (note that \n *   p5 clears automatically on draw loop) default is \n *   true \n * \n *  \n *   perPixelLighting - if true, per-pixel lighting \n *   will be used in the lighting shader. default is \n *   false\n *\n *   @param key Name of attribute\n *   @param value New value of named attribute\n */\ndeclare function setAttributes(key: string, value: boolean): void;\n\n/**\n *   Set attributes for the WebGL Drawing context. This \n *   is a way of adjusting ways that the WebGL renderer \n *   works to fine-tune the display and performance. \n *   This should be put in setup(). The available \n *   attributes are:  alpha - indicates if the canvas \n *   contains an alpha buffer default is true \n * \n *  \n *   depth - indicates whether the drawing buffer has a \n *   depth buffer of at least 16 bits - default is true \n * \n *  \n *   stencil - indicates whether the drawing buffer has \n *   a stencil buffer of at least 8 bits \n * \n *  \n *   antialias - indicates whether or not to perform \n *   anti-aliasing default is false \n * \n *  \n *   premultipliedAlpha - indicates that the page \n *   compositor will assume the drawing buffer contains \n *   colors with pre-multiplied alpha default is false \n * \n *  \n *   preserveDrawingBuffer - if true the buffers will \n *   not be cleared and and will preserve their values \n *   until cleared or overwritten by author (note that \n *   p5 clears automatically on draw loop) default is \n *   true \n * \n *  \n *   perPixelLighting - if true, per-pixel lighting \n *   will be used in the lighting shader. default is \n *   false\n *\n *   @param obj object with key-value pairs\n */\ndeclare function setAttributes(obj: object): void;\n\n// src/webgl/primitives.js\n\n/**\n *   Draw a plane with given a width and height\n *\n *   @param [width] width of the plane\n *   @param [height] height of the plane\n *   @param [detailX] Optional number of triangle \n *   subdivisions in x-dimension\n *   @param [detailY] Optional number of triangle \n *   subdivisions in y-dimension\n *   @chainable\n */\ndeclare function plane(width?: number, height?: number, detailX?: number, detailY?: number): p5;\n\n/**\n *   Draw a box with given width, height and depth\n *\n *   @param [width] width of the box\n *   @param [Height] height of the box\n *   @param [depth] depth of the box\n *   @param [detailX] Optional number of triangle \n *   subdivisions in x-dimension\n *   @param [detailY] Optional number of triangle \n *   subdivisions in y-dimension\n *   @chainable\n */\ndeclare function box(width?: number, Height?: number, depth?: number, detailX?: number, detailY?: number): p5;\n\n/**\n *   Draw a sphere with given radius\n *\n *   @param [radius] radius of circle\n *   @param [detailX] number of segments, the more \n *   segments the smoother geometry default is 24\n *   @param [detailY] number of segments, the more \n *   segments the smoother geometry default is 16\n *   @chainable\n */\ndeclare function sphere(radius?: number, detailX?: number, detailY?: number): p5;\n\n/**\n *   Draw a cylinder with given radius and height\n *\n *   @param [radius] radius of the surface\n *   @param [height] height of the cylinder\n *   @param [detailX] number of segments, the more \n *   segments the smoother geometry default is 24\n *   @param [detailY] number of segments in \n *   y-dimension, the more segments the smoother \n *   geometry default is 1\n *   @param [bottomCap] whether to draw the bottom of \n *   the cylinder\n *   @param [topCap] whether to draw the top of the \n *   cylinder\n *   @chainable\n */\ndeclare function cylinder(radius?: number, height?: number, detailX?: number, detailY?: number, bottomCap?: boolean, topCap?: boolean): p5;\n\n/**\n *   Draw a cone with given radius and height\n *\n *   @param [radius] radius of the bottom surface\n *   @param [height] height of the cone\n *   @param [detailX] number of segments, the more \n *   segments the smoother geometry default is 24\n *   @param [detailY] number of segments, the more \n *   segments the smoother geometry default is 1\n *   @param [cap] whether to draw the base of the cone\n *   @chainable\n */\ndeclare function cone(radius?: number, height?: number, detailX?: number, detailY?: number, cap?: boolean): p5;\n\n/**\n *   Draw an ellipsoid with given radius\n *\n *   @param [radiusx] xradius of circle\n *   @param [radiusy] yradius of circle\n *   @param [radiusz] zradius of circle\n *   @param [detailX] number of segments, the more \n *   segments the smoother geometry default is 24. \n *   Avoid detail number above 150, it may crash the \n *   browser.\n *   @param [detailY] number of segments, the more \n *   segments the smoother geometry default is 16. \n *   Avoid detail number above 150, it may crash the \n *   browser.\n *   @chainable\n */\ndeclare function ellipsoid(radiusx?: number, radiusy?: number, radiusz?: number, detailX?: number, detailY?: number): p5;\n\n/**\n *   Draw a torus with given radius and tube radius\n *\n *   @param [radius] radius of the whole ring\n *   @param [tubeRadius] radius of the tube\n *   @param [detailX] number of segments in \n *   x-dimension, the more segments the smoother \n *   geometry default is 24\n *   @param [detailY] number of segments in \n *   y-dimension, the more segments the smoother \n *   geometry default is 16\n *   @chainable\n */\ndeclare function torus(radius?: number, tubeRadius?: number, detailX?: number, detailY?: number): p5;\n\n// lib/addons/p5.sound.js\n\n/**\n *   Returns a number representing the sample rate, in \n *   samples per second, of all sound objects in this \n *   audio context. It is determined by the sampling \n *   rate of your operating system's sound card, and it \n *   is not currently possile to change. It is often \n *   44100, or twice the range of human hearing.\n *\n *   @return samplerate samples per second\n */\ndeclare function sampleRate(): number;\n\n/**\n *   Returns the closest MIDI note value for a given \n *   frequency.\n *\n *   @param frequency A freqeuncy, for example, the \"A\" \n *   above Middle C is 440Hz\n *   @return MIDI note value\n */\ndeclare function freqToMidi(frequency: number): number;\n\n/**\n *   Returns the frequency value of a MIDI note value. \n *   General MIDI treats notes as integers where middle \n *   C is 60, C# is 61, D is 62 etc. Useful for \n *   generating musical frequencies with oscillators.\n *\n *   @param midiNote The number of a MIDI note\n *   @return Frequency value of the given MIDI note\n */\ndeclare function midiToFreq(midiNote: number): number;\n\n/**\n *   List the SoundFile formats that you will include. \n *   LoadSound will search your directory for these \n *   extensions, and will pick a format that is \n *   compatable with the client's web browser. Here is \n *   a free online file converter.\n *\n *   @param [formats] i.e. 'mp3', 'wav', 'ogg'\n */\ndeclare function soundFormats(formats?: string): void;\n\n// Properties from p5.dom\n\n// lib/addons/p5.dom.js\n\n/**\n *   Searches the page for an element with the given \n *   ID, class, or tag name (using the '#' or '.' \n *   prefixes to specify an ID or class respectively, \n *   and none for a tag) and returns it as a \n *   p5.Element. If a class or tag name is given with \n *   more than 1 element, only the first element will \n *   be returned. The DOM node itself can be accessed \n *   with .elt. Returns null if none found. You can \n *   also specify a container to search within.\n *\n *   @param name id, class, or tag name of element to \n *   search for\n *   @param [container] id, p5.Element, or HTML element \n *   to search within\n *   @return p5.Element containing node found\n */\ndeclare function select(name: string, container?: string|p5.Element|HTMLElement): object|p5.Element|any;\n\n/**\n *   Searches the page for elements with the given \n *   class or tag name (using the '.' prefix to specify \n *   a class and no prefix for a tag) and returns them \n *   as p5.Elements in an array. The DOM node itself \n *   can be accessed with .elt. Returns an empty array \n *   if none found. You can also specify a container to \n *   search within.\n *\n *   @param name class or tag name of elements to \n *   search for\n *   @param [container] id, p5.Element, or HTML element \n *   to search within\n *   @return Array of p5.Elements containing nodes \n *   found\n */\ndeclare function selectAll(name: string, container?: string): any[];\n\n/**\n *   Removes all elements created by p5, except any \n *   canvas / graphics elements created by createCanvas \n *   or createGraphics. Event handlers are removed, and \n *   element is removed from the DOM.\n *\n */\ndeclare function removeElements(): void;\n\n/**\n *   Creates a <div></div> element in the DOM with \n *   given inner HTML. Appends to the container node if \n *   one is specified, otherwise appends to body.\n *\n *   @param [html] inner HTML for element created\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createDiv(html?: string): object|p5.Element;\n\n/**\n *   Creates a <p></p> element in the DOM with given \n *   inner HTML. Used for paragraph length text. \n *   Appends to the container node if one is specified, \n *   otherwise appends to body.\n *\n *   @param [html] inner HTML for element created\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createP(html?: string): object|p5.Element;\n\n/**\n *   Creates a <span></span> element in the DOM with \n *   given inner HTML. Appends to the container node if \n *   one is specified, otherwise appends to body.\n *\n *   @param [html] inner HTML for element created\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createSpan(html?: string): object|p5.Element;\n\n/**\n *   Creates an <img> element in the DOM with given src \n *   and alternate text. Appends to the container node \n *   if one is specified, otherwise appends to body.\n *\n *   @param src src path or url for image\n *   @param [alt] alternate text to be used if image \n *   does not load\n *   @param [successCallback] callback to be called \n *   once image data is loaded\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createImg(src: string, alt?: string, successCallback?: Function): object|p5.Element;\n\n/**\n *   Creates an <a></a> element in the DOM for \n *   including a hyperlink. Appends to the container \n *   node if one is specified, otherwise appends to \n *   body.\n *\n *   @param href url of page to link to\n *   @param html inner html of link element to display\n *   @param [target] target where new link should open, \n *   could be _blank, _self, _parent, _top.\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createA(href: string, html: string, target?: string): object|p5.Element;\n\n/**\n *   Creates a slider <input></input> element in the \n *   DOM. Use .size() to set the display length of the \n *   slider. Appends to the container node if one is \n *   specified, otherwise appends to body.\n *\n *   @param min minimum value of the slider\n *   @param max maximum value of the slider\n *   @param [value] default value of the slider\n *   @param [step] step size for each tick of the \n *   slider (if step is set to 0, the slider will move \n *   continuously from the minimum to the maximum \n *   value)\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createSlider(min: number, max: number, value?: number, step?: number): object|p5.Element;\n\n/**\n *   Creates a <button></button> element in the DOM. \n *   Use .size() to set the display size of the button. \n *   Use .mousePressed() to specify behavior on press. \n *   Appends to the container node if one is specified, \n *   otherwise appends to body.\n *\n *   @param label label displayed on the button\n *   @param [value] value of the button\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createButton(label: string, value?: string): object|p5.Element;\n\n/**\n *   Creates a checkbox <input></input> element in the \n *   DOM. Calling .checked() on a checkbox returns if \n *   it is checked or not\n *\n *   @param [label] label displayed after checkbox\n *   @param [value] value of the checkbox; checked is \n *   true, unchecked is false\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createCheckbox(label?: string, value?: boolean): object|p5.Element;\n\n/**\n *   Creates a dropdown menu <select></select> element \n *   in the DOM. It also helps to assign select-box \n *   methods to p5.Element when selecting existing \n *   select box\n *\n *   @param [multiple] true if dropdown should support \n *   multiple selections\n */\ndeclare function createSelect(multiple?: boolean): p5.Element;\n\n/**\n *   Creates a dropdown menu <select></select> element \n *   in the DOM. It also helps to assign select-box \n *   methods to p5.Element when selecting existing \n *   select box\n *\n *   @param existing DOM select element\n */\ndeclare function createSelect(existing: object): p5.Element;\n\n/**\n *   Creates a radio button <input></input> element in \n *   the DOM. The .option() method can be used to set \n *   options for the radio after it is created. The \n *   .value() method will return the currently selected \n *   option.\n *\n *   @param [divId] the id and name of the created div \n *   and input field respectively\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createRadio(divId?: string): object|p5.Element;\n\n/**\n *   Creates an <input></input> element in the DOM for \n *   text input. Use .size() to set the display length \n *   of the box. Appends to the container node if one \n *   is specified, otherwise appends to body.\n *\n *   @param [value] default value of the input box\n *   @param [type] type of text, ie text, password etc. \n *   Defaults to text\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createInput(value?: string, type?: string): object|p5.Element;\n\n/**\n *   Creates an <input></input> element in the DOM of \n *   type 'file'. This allows users to select local \n *   files for use in a sketch.\n *\n *   @param [callback] callback function for when a \n *   file loaded\n *   @param [multiple] optional to allow multiple files \n *   selected\n *   @return pointer to p5.Element holding created DOM \n *   element\n */\ndeclare function createFileInput(callback?: Function, multiple?: string): object|p5.Element;\n\n/**\n *   Creates an HTML5 <video> element in the DOM for \n *   simple playback of audio/video. Shown by default, \n *   can be hidden with .hide() and drawn into canvas \n *   using video(). Appends to the container node if \n *   one is specified, otherwise appends to body. The \n *   first parameter can be either a single string path \n *   to a video file, or an array of string paths to \n *   different formats of the same video. This is \n *   useful for ensuring that your video can play \n *   across different browsers, as each supports \n *   different formats. See this page for further \n *   information about supported formats.\n *\n *   @param src path to a video file, or array of paths \n *   for supporting different browsers\n *   @param [callback] callback function to be called \n *   upon 'canplaythrough' event fire, that is, when \n *   the browser can play the media, and estimates that \n *   enough data has been loaded to play the media up \n *   to its end without having to stop for further \n *   buffering of content\n *   @return pointer to video p5.Element\n */\ndeclare function createVideo(src: string|any[], callback?: object): p5.MediaElement|p5.Element;\n\n/**\n *   Creates a hidden HTML5 <audio> element in the DOM \n *   for simple audio playback. Appends to the \n *   container node if one is specified, otherwise \n *   appends to body. The first parameter can be either \n *   a single string path to a audio file, or an array \n *   of string paths to different formats of the same \n *   audio. This is useful for ensuring that your audio \n *   can play across different browsers, as each \n *   supports different formats. See this page for \n *   further information about supported formats.\n *\n *   @param [src] path to an audio file, or array of \n *   paths for supporting different browsers\n *   @param [callback] callback function to be called \n *   upon 'canplaythrough' event fire, that is, when \n *   the browser can play the media, and estimates that \n *   enough data has been loaded to play the media up \n *   to its end without having to stop for further \n *   buffering of content\n *   @return pointer to audio p5.Element /**\n */\ndeclare function createAudio(src?: string|string[], callback?: object): p5.MediaElement|p5.Element;\n\n/**\n *   Creates a new HTML5 <video> element that contains \n *   the audio/video feed from a webcam. The element is \n *   separate from the canvas and is displayed by \n *   default. The element can be hidden using .hide(). \n *   The feed can be drawn onto the canvas using \n *   image(). More specific properties of the feed can \n *   be passing in a Constraints object. See the  W3C \n *   spec for possible properties. Note that not all of \n *   these are supported by all browsers. \n * \n *   Security note: A new browser security \n *   specification requires that getUserMedia, which is \n *   behind createCapture(), only works when you're \n *   running the code locally, or on HTTPS. Learn more \n *   here and here.\n *\n *   @param type type of capture, either VIDEO or AUDIO \n *   if none specified, default both, or a Constraints \n *   object\n *   @param callback function to be called once stream \n *   has loaded\n *   @return capture video p5.Element\n */\ndeclare function createCapture(type: string|any|object, callback: Function): object|p5.Element;\n\n/**\n *   Creates element with given tag in the DOM with \n *   given content. Appends to the container node if \n *   one is specified, otherwise appends to body.\n *\n *   @param tag tag for the new element\n *   @param [content] html content to be inserted into \n *   the element\n *   @return pointer to p5.Element holding created node\n */\ndeclare function createElement(tag: string, content?: string): object|p5.Element;\n\n// Properties from p5.sound\n\n// lib/addons/p5.sound.js\n\n/**\n *   Returns the Audio Context for this sketch. Useful \n *   for users who would like to dig deeper into the \n *   Web Audio API .\n *\n *   @return AudioContext for this sketch\n */\ndeclare function getAudioContext(): object;\n\n/**\n *   Returns a number representing the master amplitude \n *   (volume) for sound in this sketch.\n *\n *   @return Master amplitude (volume) for sound in \n *   this sketch. Should be between 0.0 (silence) and \n *   1.0.\n */\ndeclare function getMasterVolume(): number;\n\n/**\n *   Scale the output of all sound in this sketch \n *   Scaled between 0.0 (silence) and 1.0 (full \n *   volume). 1.0 is the maximum amplitude of a digital \n *   sound, so multiplying by greater than 1.0 may \n *   cause digital distortion. To fade, provide a \n *   rampTime parameter. For more complex fades, see \n *   the Env class. Alternately, you can pass in a \n *   signal source such as an oscillator to modulate \n *   the amplitude with an audio signal. How This \n *   Works: When you load the p5.sound module, it \n *   creates a single instance of p5sound. All sound \n *   objects in this module output to p5sound before \n *   reaching your computer's output. So if you change \n *   the amplitude of p5sound, it impacts all of the \n *   sound in this module. \n * \n *   If no value is provided, returns a Web Audio API \n *   Gain Node\n *\n *   @param volume Volume (amplitude) between 0.0 and \n *   1.0 or modulating signal/oscillator\n *   @param [rampTime] Fade for t seconds\n *   @param [timeFromNow] Schedule this event to happen \n *   at t seconds in the future\n */\ndeclare function masterVolume(volume: number|object, rampTime?: number, timeFromNow?: number): void;\n\n/**\n *   p5.soundOut is the p5.sound master output. It \n *   sends output to the destination of this window's \n *   web audio context. It contains Web Audio API nodes \n *   including a dyanmicsCompressor (.limiter), and \n *   Gain Nodes for .input and .output.\n *\n */\ndeclare var soundOut: object;\n// Constants \ntype COLOR_MODE =\n      typeof RGB\n    | typeof HSB\n    | typeof HSL;\n\ntype ARC_MODE =\n      typeof CHORD\n    | typeof PIE\n    | typeof OPEN;\n\ntype ELLIPSE_MODE =\n      typeof CENTER\n    | typeof RADIUS\n    | typeof CORNER\n    | typeof CORNERS;\n\ntype RECT_MODE =\n      typeof CORNER\n    | typeof CORNERS\n    | typeof CENTER\n    | typeof RADIUS;\n\ntype STROKE_CAP =\n      typeof SQUARE\n    | typeof PROJECT\n    | typeof ROUND;\n\ntype STROKE_JOIN =\n      typeof MITER\n    | typeof BEVEL\n    | typeof ROUND;\n\ntype RENDERER =\n      typeof P2D\n    | typeof WEBGL;\n\ntype BLEND_MODE =\n      typeof BLEND\n    | typeof DARKEST\n    | typeof LIGHTEST\n    | typeof DIFFERENCE\n    | typeof MULTIPLY\n    | typeof EXCLUSION\n    | typeof SCREEN\n    | typeof REPLACE\n    | typeof OVERLAY\n    | typeof HARD_LIGHT\n    | typeof SOFT_LIGHT\n    | typeof DODGE\n    | typeof BURN\n    | typeof ADD\n    | typeof NORMAL;\n\ntype BEGIN_KIND =\n      typeof POINTS\n    | typeof LINES\n    | typeof TRIANGLES\n    | typeof TRIANGLE_FAN\n    | typeof TRIANGLE_STRIP\n    | typeof QUADS\n    | typeof QUAD_STRIP;\n\ntype END_MODE =\n      typeof CLOSE;\n\ntype IMAGE_MODE =\n      typeof CORNER\n    | typeof CORNERS\n    | typeof CENTER;\n\ntype FILTER_TYPE =\n      typeof THRESHOLD\n    | typeof GRAY\n    | typeof OPAQUE\n    | typeof INVERT\n    | typeof POSTERIZE\n    | typeof BLUR\n    | typeof ERODE\n    | typeof DILATE\n    | typeof BLUR;\n\ntype ANGLE_MODE =\n      typeof RADIANS\n    | typeof DEGREES;\n\ntype HORIZ_ALIGN =\n      typeof LEFT\n    | typeof CENTER\n    | typeof RIGHT;\n\ntype VERT_ALIGN =\n      typeof TOP\n    | typeof BOTTOM\n    | typeof CENTER\n    | typeof BASELINE;\n\ntype THE_STYLE =\n      typeof NORMAL\n    | typeof ITALIC\n    | typeof BOLD;\n\n"],"sourceRoot":""}